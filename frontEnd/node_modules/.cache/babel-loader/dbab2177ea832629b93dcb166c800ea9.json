{"ast":null,"code":"/**\n * @module ol/render/canvas/ZIndexContext\n */\nimport { getSharedCanvasContext2D } from '../../dom.js';\n/** @typedef {CanvasRenderingContext2D & {globalAlpha: any}} ZIndexContextProxy */\n\n/**\n * @extends {CanvasRenderingContext2D}\n */\n\nclass ZIndexContext {\n  constructor() {\n    /**\n     * @private\n     * @type {Array<Array<*>>}\n     */\n    this.instructions_ = [];\n    /**\n     * @type {number}\n     */\n\n    this.zIndex = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.offset_ = 0;\n    /**\n     * @type {ZIndexContextProxy}\n     */\n\n    this.context_ =\n    /** @type {ZIndexContextProxy} */\n    new Proxy(getSharedCanvasContext2D(), {\n      get: (target, property) => {\n        if (typeof\n        /** @type {*} */\n        getSharedCanvasContext2D()[property] !== 'function') {\n          // we only accept calling functions on the proxy, not accessing properties\n          return undefined;\n        }\n\n        if (!this.instructions_[this.zIndex + this.offset_]) {\n          this.instructions_[this.zIndex + this.offset_] = [];\n        }\n\n        this.instructions_[this.zIndex + this.offset_].push(property);\n        return this.pushMethodArgs_;\n      },\n      set: (target, property, value) => {\n        if (!this.instructions_[this.zIndex + this.offset_]) {\n          this.instructions_[this.zIndex + this.offset_] = [];\n        }\n\n        this.instructions_[this.zIndex + this.offset_].push(property, value);\n        return true;\n      }\n    });\n  }\n  /**\n   * @private\n   * @param {...*} args Args.\n   * @return {ZIndexContext} This.\n   */\n\n\n  pushMethodArgs_ = (() => {\n    var _this = this;\n\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.instructions_[_this.zIndex + _this.offset_].push(args);\n\n      return _this;\n    };\n  })();\n  /**\n   * Push a function that renders to the context directly.\n   * @param {function(CanvasRenderingContext2D): void} render Function.\n   */\n\n  pushFunction(render) {\n    this.instructions_[this.zIndex + this.offset_].push(render);\n  }\n  /**\n   * Get a proxy for CanvasRenderingContext2D which does not support getting state\n   * (e.g. `context.globalAlpha`, which will return `undefined`). To set state, if it relies on a\n   * previous state (e.g. `context.globalAlpha = context.globalAlpha / 2`), set a function,\n   * e.g. `context.globalAlpha = (context) => context.globalAlpha / 2`.\n   * @return {ZIndexContextProxy} Context.\n   */\n\n\n  getContext() {\n    return this.context_;\n  }\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n\n\n  draw(context) {\n    this.instructions_.forEach(instructionsAtIndex => {\n      for (let i = 0, ii = instructionsAtIndex.length; i < ii; ++i) {\n        const property = instructionsAtIndex[i];\n\n        if (typeof property === 'function') {\n          property(context);\n          continue;\n        }\n\n        const instructionAtIndex = instructionsAtIndex[++i];\n\n        if (typeof\n        /** @type {*} */\n        context[property] === 'function') {\n          /** @type {*} */\n          context[property](...instructionAtIndex);\n        } else {\n          if (typeof instructionAtIndex === 'function') {\n            /** @type {*} */\n            context[property] = instructionAtIndex(context);\n            continue;\n          }\n          /** @type {*} */\n\n\n          context[property] = instructionAtIndex;\n        }\n      }\n    });\n  }\n\n  clear() {\n    this.instructions_.length = 0;\n    this.zIndex = 0;\n    this.offset_ = 0;\n  }\n  /**\n   * Offsets the zIndex by the highest current zIndex. Useful for rendering multiple worlds or tiles, to\n   * avoid conflicting context.clip() or context.save()/restore() calls.\n   */\n\n\n  offset() {\n    this.offset_ = this.instructions_.length;\n    this.zIndex = 0;\n  }\n\n}\n\nexport default ZIndexContext;","map":{"version":3,"names":["getSharedCanvasContext2D","ZIndexContext","constructor","instructions_","zIndex","offset_","context_","Proxy","get","target","property","undefined","push","pushMethodArgs_","set","value","args","pushFunction","render","getContext","draw","context","forEach","instructionsAtIndex","i","ii","length","instructionAtIndex","clear","offset"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/render/canvas/ZIndexContext.js"],"sourcesContent":["/**\n * @module ol/render/canvas/ZIndexContext\n */\n\nimport {getSharedCanvasContext2D} from '../../dom.js';\n\n/** @typedef {CanvasRenderingContext2D & {globalAlpha: any}} ZIndexContextProxy */\n\n/**\n * @extends {CanvasRenderingContext2D}\n */\nclass ZIndexContext {\n  constructor() {\n    /**\n     * @private\n     * @type {Array<Array<*>>}\n     */\n    this.instructions_ = [];\n    /**\n     * @type {number}\n     */\n    this.zIndex = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offset_ = 0;\n\n    /**\n     * @type {ZIndexContextProxy}\n     */\n    this.context_ = /** @type {ZIndexContextProxy} */ (\n      new Proxy(getSharedCanvasContext2D(), {\n        get: (target, property) => {\n          if (\n            typeof (/** @type {*} */ (getSharedCanvasContext2D())[property]) !==\n            'function'\n          ) {\n            // we only accept calling functions on the proxy, not accessing properties\n            return undefined;\n          }\n          if (!this.instructions_[this.zIndex + this.offset_]) {\n            this.instructions_[this.zIndex + this.offset_] = [];\n          }\n          this.instructions_[this.zIndex + this.offset_].push(property);\n          return this.pushMethodArgs_;\n        },\n        set: (target, property, value) => {\n          if (!this.instructions_[this.zIndex + this.offset_]) {\n            this.instructions_[this.zIndex + this.offset_] = [];\n          }\n          this.instructions_[this.zIndex + this.offset_].push(property, value);\n          return true;\n        },\n      })\n    );\n  }\n\n  /**\n   * @private\n   * @param {...*} args Args.\n   * @return {ZIndexContext} This.\n   */\n  pushMethodArgs_ = (...args) => {\n    this.instructions_[this.zIndex + this.offset_].push(args);\n    return this;\n  };\n\n  /**\n   * Push a function that renders to the context directly.\n   * @param {function(CanvasRenderingContext2D): void} render Function.\n   */\n  pushFunction(render) {\n    this.instructions_[this.zIndex + this.offset_].push(render);\n  }\n\n  /**\n   * Get a proxy for CanvasRenderingContext2D which does not support getting state\n   * (e.g. `context.globalAlpha`, which will return `undefined`). To set state, if it relies on a\n   * previous state (e.g. `context.globalAlpha = context.globalAlpha / 2`), set a function,\n   * e.g. `context.globalAlpha = (context) => context.globalAlpha / 2`.\n   * @return {ZIndexContextProxy} Context.\n   */\n  getContext() {\n    return this.context_;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  draw(context) {\n    this.instructions_.forEach((instructionsAtIndex) => {\n      for (let i = 0, ii = instructionsAtIndex.length; i < ii; ++i) {\n        const property = instructionsAtIndex[i];\n        if (typeof property === 'function') {\n          property(context);\n          continue;\n        }\n        const instructionAtIndex = instructionsAtIndex[++i];\n        if (typeof (/** @type {*} */ (context)[property]) === 'function') {\n          /** @type {*} */ (context)[property](...instructionAtIndex);\n        } else {\n          if (typeof instructionAtIndex === 'function') {\n            /** @type {*} */ (context)[property] = instructionAtIndex(context);\n            continue;\n          }\n          /** @type {*} */ (context)[property] = instructionAtIndex;\n        }\n      }\n    });\n  }\n\n  clear() {\n    this.instructions_.length = 0;\n    this.zIndex = 0;\n    this.offset_ = 0;\n  }\n\n  /**\n   * Offsets the zIndex by the highest current zIndex. Useful for rendering multiple worlds or tiles, to\n   * avoid conflicting context.clip() or context.save()/restore() calls.\n   */\n  offset() {\n    this.offset_ = this.instructions_.length;\n    this.zIndex = 0;\n  }\n}\n\nexport default ZIndexContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}