{"ast":null,"code":"/**\r\n * 09. 13. 2023\r\n * Houses all functions for making calls to backend API\r\n * \r\n */\nexport default function APIaccess(key) {\n  const apiAddr = \"http://172.20.22.241:3333\";\n  let savedKey = sessionStorage.getItem('userKey'); // const userKey = savedKey ? savedKey : key;\n\n  return {\n    async getProjectPublicStats() {\n      let request = await fetch(`${apiAddr}/publicStats`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      }).then(data => data.json());\n      return request;\n    },\n\n    async signupUser(signupCredentials) {\n      /**\r\n       * Form Requirements:\r\n       * - firstName:\r\n       * - lastName:\r\n       * - emailAddr:\r\n       * - userName:\r\n       * - password:\r\n       */\n      let request = await fetch(`${apiAddr}/users/newuser`, {\n        method: 'POST',\n        headers: {\n          // 'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: signupCredentials\n      }).then(data => data.json());\n      /* 09. 14. 2023\r\n         Returns a true statement if signup successful\r\n         Checks by submitted emailAddr whether account was made with on prior\r\n      */\n\n      return request;\n    },\n\n    async submitRefCode(refCode) {\n      let request = await fetch(`${apiAddr}/users/newuser`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          action: 'getReferrer',\n          refCode: refCode\n        })\n      }).then(data => data.json());\n      return request;\n    },\n\n    async userExistsCheck(body) {\n      let request = await fetch(`${apiAddr}/users/newuser`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(body)\n      }).then(data => data.json());\n      return request;\n    },\n\n    async logInUser(loginCredentials) {\n      /**\r\n       * Form Requirements\r\n       * - emailAddr\r\n       * - password\r\n       */\n      let parseJwt = token => {\n        let base64Url = token.split('.')[1],\n            base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/'),\n            jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n        return JSON.parse(jsonPayload);\n      };\n\n      let request = await fetch(`${apiAddr}/users/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(loginCredentials)\n      }).then(data => data.json());\n\n      if (request.confirm == true) {\n        let userToken = request.JWT;\n        let userInfo = parseJwt(request.JWT);\n        sessionStorage.setItem('userKey', userToken);\n        sessionStorage.setItem('userID', userInfo._id);\n        sessionStorage.setItem('userName', userInfo._username);\n        sessionStorage.setItem('profilePhoto', request.profilePhoto);\n        sessionStorage.setItem('privacySetting', request.privacySetting);\n        let topicsAsString = request.settings.topics.join(', ');\n        console.log(topicsAsString);\n        console.log(request.settings);\n        sessionStorage.setItem('topicsAsString', topicsAsString);\n        return {\n          confirm: true,\n          settings: request.settings\n        };\n      } else if (request.error == true) {\n        console.log(request);\n        return request.message;\n      }\n    },\n\n    async pullUserLog(data) {\n      /**\r\n       * The 'pull' argument differentiates the kind of request for posts\r\n       * made to the API\r\n       * initial: when user first logs in\r\n       * update: get the most recent, new posts\r\n       * append: get more posts from the past, those before the last postID sent\r\n       */\n      //?pull=${pull}?lastID=${lastID} for future update\n      let userKey = sessionStorage.getItem('userKey');\n      let log = await fetch(`${apiAddr}/posts/log?type=${data.type}&userID=${data.userID}&logNumber=${data.logNumber}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-Length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return log;\n    },\n\n    async pullSocialLog(pull, lastID) {\n      //?pull=${pull}?lastID=${lastID} for future update\n      let userKey = sessionStorage.getItem('userKey');\n      let log = await fetch(`${apiAddr}/posts/log?type=social`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-Length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return log;\n    },\n\n    async pullMonthChart(month, day, year, social) {\n      let userKey = sessionStorage.getItem('userKey');\n\n      if (day) {\n        /*** Gets all posts per specific day ***/\n        let request = await fetch(`${apiAddr}/posts/monthChart?social=${social}&month=${month}&day=${day}&year=${year}`, {\n          method: \"GET\",\n          headers: {\n            'Content-Type': 'application/json',\n            'Content-length': 0,\n            'Accept': 'application/json',\n            'Host': apiAddr,\n            'auth-token': userKey\n          }\n        }).then(data => data.json());\n        let reorder = [];\n\n        for (let i = request.length; i >= 0; i--) {\n          reorder.push(request[i]);\n        } // reorder.splice(0, 1);\n\n\n        return reorder;\n      } else {\n        /*** Gets amount of posts per day in a month ***/\n        let request = await fetch(`${apiAddr}/posts/monthChart?social=${social}&month=${month}&year=${year}`, {\n          method: \"GET\",\n          headers: {\n            'Content-Type': 'application/json',\n            'Content-length': 0,\n            'Accept': 'application/json',\n            'Host': apiAddr,\n            'auth-token': userKey\n          }\n        }).then(data => data.json());\n        return request;\n      }\n    },\n\n    async getDrafts() {\n      let userKey = sessionStorage.getItem('userKey');\n      let log = await fetch(`${apiAddr}/posts/log?type=drafts`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-Length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return log;\n    },\n\n    async deleteDraft(draftID) {\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/posts/log?type=deleteDraft&postID=${draftID}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-Length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return request;\n    },\n\n    async getBlogPost(postID) {\n      let userKey = sessionStorage.getItem('userKey');\n      let post = await fetch(`${apiAddr}/posts/${postID}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-Length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return post;\n    },\n\n    async createPost(content) {\n      let userKey = sessionStorage.getItem('userKey');\n      let post = await fetch(`${apiAddr}/posts/createPost`, {\n        method: \"POST\",\n        headers: {\n          'auth-token': userKey,\n          'Accept': 'application/json'\n        },\n        body: content\n      }).then(data => data.json()); //returns true for successful submit, returns false on error\n\n      return post;\n    },\n\n    async updatePost() {\n      /**\r\n       * 09. 15. 2023\r\n       * Need to redesign algo for editting posts between Front and Back End\r\n       * Function will be removed for now, until later update\r\n       */\n    },\n\n    async deletePost(postID) {\n      let userKey = sessionStorage.getItem('userKey');\n      let response = await fetch(`${apiAddr}/posts/deletePost?id=${postID}`, {\n        method: \"DELETE\",\n        headers: {\n          // 'Content-Type': 'application/json',\n          // 'Accept': 'application/json',\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return response;\n      /* simply confirms whether post is deleted or not */\n    },\n\n    async getComments(postID) {\n      let userKey = sessionStorage.getItem('userKey');\n      let response = await fetch(`${apiAddr}/posts/comment/getComments?postID=${postID}`, {\n        method: \"GET\",\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return response;\n    },\n\n    async postComment(type, parentID, body) {\n      let userKey = sessionStorage.getItem('userKey');\n      /**\r\n       * type: *initial, *response\r\n       */\n\n      if (body == null) {\n        let request = await fetch(`${apiAddr}/posts/comment/${type}/?postID=${parentID}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Content-length': 0,\n            'Accept': 'application/json',\n            'Host': apiAddr,\n            'auth-token': userKey\n          }\n        }).then(data => data.json());\n        return request;\n      } else {\n        let request = await fetch(`${apiAddr}/posts/comment/${type}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Content-length': 0,\n            'Accept': 'application/json',\n            'Host': apiAddr,\n            'auth-token': userKey\n          },\n          body: JSON.stringify(body)\n        }).then(data => data.json());\n        return request;\n      }\n    },\n\n    async deleteComment(commentID) {\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/posts/comment/delete/?commentID=${commentID}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return request;\n    },\n\n    async updateCommentCount(postID, count) {\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/posts/comment/updateCount/?postID=${postID}&count=${count}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return request;\n    },\n\n    async getInteractions(arg) {\n      let userKey = sessionStorage.getItem('userKey');\n\n      if (arg == 'count') {\n        const notifs = await fetch(`${apiAddr}/users/notif/sendUnreadCount`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Content-length': 0,\n            'Accept': 'application/json',\n            'Host': apiAddr,\n            'auth-token': userKey\n          }\n        }).then(data => data.json());\n        return notifs;\n      } else {\n        const notifs = await fetch(`${apiAddr}/users/notif/sendAll`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Content-length': 0,\n            'Accept': 'application/json',\n            'Host': apiAddr,\n            'auth-token': userKey\n          }\n        }).then(data => data.json());\n        return notifs;\n      }\n    },\n\n    /**\r\n     * For connection requests, commenting, tagging, group invites\r\n     */\n    async newInteraction(notif) {\n      let userKey = sessionStorage.getItem('userKey');\n      /**\r\n       * Notif object requirements:\r\n       * type: *request, *commentInitial, *commentResponse, *tagging\r\n       * isRead: boolean,\r\n       * sender: userID,\r\n       * recipients: array || userID\r\n       * url:\r\n       * message: *sent, *accept, *ignore\r\n       */\n\n      const request = await fetch(`${apiAddr}/users/notif/${notif.type}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        },\n        body: JSON.stringify(notif)\n      }).then(data => data.json());\n      return request;\n    },\n\n    async getConnections(userID) {\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/users/user/${userID}?query=getAllConnects`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return request;\n    },\n\n    async removeConnection(userID) {\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/users/user/${userID}/?query=removeConnect&remove=${userID}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return request;\n    },\n\n    async removeSubscription(userID, toOrFrom) {\n      //if toOrFrom == 'to', removing sub TO user\n      //if 'from', removing sub FROM current user\n      let direction = toOrFrom == 'to' ? 'removeSubTo' : 'removeSubFrom';\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/users/user/${userID}/?query=${direction}&remove=${userID}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return request;\n    },\n\n    async getSingleUser(userID) {\n      /* For return user's page*/\n      let userKey = sessionStorage.getItem('userKey');\n      let user = await fetch(`${apiAddr}/users/user/${userID}/?query=singleUser`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return user;\n    },\n\n    async searchUsers(query) {\n      let userKey = sessionStorage.getItem('userKey');\n      const search = await fetch(`${apiAddr}/users/search/?userName=${query}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        }\n      }).then(data => data.json());\n      return search; //returns search results, most likely some array of objects\n    },\n\n    async newGroup(body) {\n      /***\r\n       * Necessary body values:\r\n       * type: tag, collection, group\r\n       * name: groupName\r\n       * owner: userID,\r\n       * admins: [userID],\r\n       * hasAccess: [userID]\r\n       * isPrivate: boolean\r\n       */\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/groups/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        },\n        body: JSON.stringify(body)\n      }).then(data => data.json());\n      return request;\n    },\n\n    async groupPosts(body) {\n      /***\r\n       * Action Types:\r\n       * getPosts, addPost, removePost\r\n       * \r\n       * Necessary body values:\r\n       * id: groupID,\r\n       * name: groupName,\r\n       * postID: \r\n       */\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/groups/posts`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        },\n        body: JSON.stringify(body)\n      }).then(data => data.json());\n      return request;\n    },\n\n    async manageGroup(action, body) {\n      /*** \r\n       * Action Types:\r\n       * request, addUser, removeUser, addAdmin, removeAdmin, \r\n       * \tdeleteGroup, renameGroup, privatizeGroup\r\n       * \r\n       * Necessary body values:\r\n       * id: groupID,\r\n       * name: groupName,\r\n       * userID: \r\n       * details: \r\n       * \t - necessary when giving access to private group.\r\n       *   - should be owner or admin's userID\r\n       */\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/groups/manage/${action}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        },\n        body: JSON.stringify(body)\n      }).then(data => data.json());\n      return request;\n    },\n\n    async getSuggestions() {\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/groups/posts`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        },\n        body: JSON.stringify({\n          action: 'getSuggestions'\n        })\n      }).then(data => data.json());\n      return request;\n    },\n\n    async getUserTags() {\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/groups/posts`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        },\n        body: JSON.stringify({\n          action: 'getUserTags'\n        })\n      }).then(data => data.json());\n      return request;\n    },\n\n    async getMacros(type) {\n      let userKey = sessionStorage.getItem('userKey');\n\n      if (type == 'tags') {\n        let request = await fetch(`${apiAddr}/groups/posts`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Content-length': 0,\n            'Accept': 'application/json',\n            'Host': apiAddr,\n            'auth-token': userKey\n          },\n          body: JSON.stringify({\n            action: 'allTagsUsed'\n          })\n        }).then(data => data.json());\n        return request;\n      } else if (type == 'private') {\n        let request = await fetch(`${apiAddr}/groups/posts`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Content-length': 0,\n            'Accept': 'application/json',\n            'Host': apiAddr,\n            'auth-token': userKey\n          },\n          body: JSON.stringify({\n            action: 'getPrivatePosts'\n          })\n        }).then(data => data.json());\n        return request;\n      } else if (type == 'collections') {\n        let request = await fetch(`${apiAddr}/groups/posts`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Content-length': 0,\n            'Accept': 'application/json',\n            'Host': apiAddr,\n            'auth-token': userKey\n          },\n          body: JSON.stringify({\n            action: 'getCollections'\n          })\n        }).then(data => data.json());\n        return request;\n      }\n    },\n\n    async getTagData(groupID, groupName) {\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/groups/posts`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        },\n        body: JSON.stringify({\n          action: 'getTagInfo',\n          groupID: groupID,\n          groupName: groupName\n        })\n      }).then(data => data.json());\n      return request;\n    },\n\n    async userSettings(body) {\n      /**\r\n       * Necessary Body Values\r\n       * option: Profile, Privacy, InvitationCount,\r\n       * username, profilePhoto, bio, changePassword,\r\n       * updateLocation\r\n       * \r\n       * action: addTopics, removeTopics\r\n       *\r\n       **/\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/users/settings`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-length': 0,\n          'Accept': 'application/json',\n          'Host': apiAddr,\n          'auth-token': userKey\n        },\n        body: JSON.stringify(body)\n      }).then(data => data.json());\n      return request;\n    },\n\n    async userSettings_profilePhoto(body) {\n      let userKey = sessionStorage.getItem('userKey');\n      let request = await fetch(`${apiAddr}/users/settings`, {\n        method: \"POST\",\n        headers: {\n          'auth-token': userKey\n        },\n        body: body\n      }).then(data => data.json());\n      return request;\n    }\n\n  };\n}\n_c = APIaccess;\n\nvar _c;\n\n$RefreshReg$(_c, \"APIaccess\");","map":{"version":3,"names":["APIaccess","key","apiAddr","savedKey","sessionStorage","getItem","getProjectPublicStats","request","fetch","method","headers","then","data","json","signupUser","signupCredentials","body","submitRefCode","refCode","JSON","stringify","action","userExistsCheck","logInUser","loginCredentials","parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","parse","confirm","userToken","JWT","userInfo","setItem","_id","_username","profilePhoto","privacySetting","topicsAsString","settings","topics","console","log","error","message","pullUserLog","userKey","type","userID","logNumber","pullSocialLog","pull","lastID","pullMonthChart","month","day","year","social","reorder","i","length","push","getDrafts","deleteDraft","draftID","getBlogPost","postID","post","createPost","content","updatePost","deletePost","response","getComments","postComment","parentID","deleteComment","commentID","updateCommentCount","count","getInteractions","arg","notifs","newInteraction","notif","getConnections","removeConnection","removeSubscription","toOrFrom","direction","getSingleUser","user","searchUsers","query","search","newGroup","groupPosts","manageGroup","getSuggestions","getUserTags","getMacros","getTagData","groupID","groupName","userSettings","userSettings_profilePhoto"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/src/apiaccess.jsx"],"sourcesContent":["/**\r\n * 09. 13. 2023\r\n * Houses all functions for making calls to backend API\r\n * \r\n */\r\n\r\n\r\nexport default function APIaccess(key) {\r\n\r\n\tconst apiAddr = \"http://172.20.22.241:3333\";\r\n\tlet savedKey = sessionStorage.getItem('userKey')\r\n\t// const userKey = savedKey ? savedKey : key;\r\n\r\n\treturn {\r\n\r\n\t\tasync getProjectPublicStats() {\r\n\t\t\tlet request = await fetch(`${apiAddr}/publicStats`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Accept':'application/json'\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request\r\n\t\t},\r\n\r\n\t\tasync signupUser(signupCredentials) {\r\n\t\t\t/**\r\n\t\t\t * Form Requirements:\r\n\t\t\t * - firstName:\r\n\t\t\t * - lastName:\r\n\t\t\t * - emailAddr:\r\n\t\t\t * - userName:\r\n\t\t\t * - password:\r\n\t\t\t */\r\n\r\n\t\t\tlet request = await fetch(`${apiAddr}/users/newuser`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t// 'Content-Type': 'application/json',\r\n\t\t\t\t\t'Accept': 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\tbody: signupCredentials\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\t/* 09. 14. 2023\r\n\t\t\t   Returns a true statement if signup successful\r\n\t\t\t   Checks by submitted emailAddr whether account was made with on prior\r\n\t\t\t*/\r\n\t\t\treturn request\r\n\t\t},\r\n\r\n\t\tasync submitRefCode(refCode) {\r\n\r\n\t\t\tlet request = await fetch(`${apiAddr}/users/newuser`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Accept': 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\taction: 'getReferrer',\r\n\t\t\t\t\trefCode: refCode\r\n\t\t\t\t})\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync userExistsCheck(body) {\r\n\r\n\t\t\tlet request = await fetch(`${apiAddr}/users/newuser`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Accept': 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(body)\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync logInUser(loginCredentials) {\r\n\r\n\t\t\t/**\r\n\t\t\t * Form Requirements\r\n\t\t\t * - emailAddr\r\n\t\t\t * - password\r\n\t\t\t */\r\n\r\n\t\t\tlet parseJwt = (token) => {\r\n\t\t\t    let base64Url = token.split('.')[1],\r\n\t\t\t        base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/'),\r\n\t\t\t        jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {\r\n\t\t\t        \treturn '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n\t\t\t        }).join(''));\r\n\r\n\t\t\t    return JSON.parse(jsonPayload);\r\n\t\t\t};\r\n\r\n\t\t\tlet request = await fetch(`${apiAddr}/users/login`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Accept':'application/json'\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(loginCredentials)\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\tif(request.confirm == true) {\r\n\r\n\t\t\t\tlet userToken = request.JWT;\r\n\r\n\t\t\t\tlet userInfo = parseJwt(request.JWT);\r\n\r\n\t\t\t\tsessionStorage.setItem('userKey', userToken);\r\n\t\t\t\tsessionStorage.setItem('userID', userInfo._id);\r\n\t\t\t\tsessionStorage.setItem('userName', userInfo._username);\r\n\t\t\t\tsessionStorage.setItem('profilePhoto', request.profilePhoto);\r\n\t\t\t\tsessionStorage.setItem('privacySetting', request.privacySetting);\r\n\r\n\r\n\t\t\t\tlet topicsAsString = request.settings.topics.join(', ');\r\n\t\t\t\tconsole.log(topicsAsString);\r\n\t\t\t\tconsole.log(request.settings);\r\n\t\t\t\tsessionStorage.setItem('topicsAsString', topicsAsString);\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tconfirm: true,\r\n\t\t\t\t\tsettings: request.settings\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if (request.error == true) {\r\n\t\t\t\tconsole.log(request);\r\n\t\t\t\treturn request.message\r\n\t\t\t}\t\r\n\t\t},\t\r\n\r\n\t\tasync pullUserLog(data) {\r\n\r\n\t\t\t/**\r\n\t\t\t * The 'pull' argument differentiates the kind of request for posts\r\n\t\t\t * made to the API\r\n\t\t\t * initial: when user first logs in\r\n\t\t\t * update: get the most recent, new posts\r\n\t\t\t * append: get more posts from the past, those before the last postID sent\r\n\t\t\t */\r\n\r\n\t\t\t//?pull=${pull}?lastID=${lastID} for future update\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet log = await fetch(`${apiAddr}/posts/log?type=${data.type}&userID=${data.userID}&logNumber=${data.logNumber}`, {\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Content-Length': 0,\r\n\t\t\t\t\t'Accept': 'application/json',\r\n\t\t\t\t\t'Host': apiAddr,\r\n\t\t\t\t\t'auth-token': userKey\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn log;\r\n\t\t},\r\n\r\n\t\tasync pullSocialLog(pull, lastID) {\r\n\r\n\t\t\t//?pull=${pull}?lastID=${lastID} for future update\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet log = await fetch(`${apiAddr}/posts/log?type=social`, {\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Content-Length': 0,\r\n\t\t\t\t\t'Accept': 'application/json',\r\n\t\t\t\t\t'Host': apiAddr,\r\n\t\t\t\t\t'auth-token': userKey\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn log;\r\n\t\t},\r\n\r\n\t\tasync pullMonthChart(month, day, year, social) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\r\n\t\t\tif(day) { /*** Gets all posts per specific day ***/\r\n\r\n\t\t\t\tlet request = await fetch(`${apiAddr}/posts/monthChart?social=${social}&month=${month}&day=${day}&year=${year}`, {\r\n\t\t\t\t\tmethod: \"GET\",\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t        \t\t'Content-length': 0,\r\n\t\t        \t\t'Accept': 'application/json',\r\n\t\t        \t\t'Host': apiAddr,\r\n\t\t        \t\t'auth-token': userKey\r\n\t\t\t\t\t}\r\n\t\t\t\t}).then(data => data.json());\r\n\r\n\t\t\t\tlet reorder = [];\r\n\t\t        for(let i = request.length; i >= 0; i--) {\r\n\t\t          reorder.push(request[i]);\r\n\t\t        }\r\n\t\t        // reorder.splice(0, 1);\r\n\r\n\t\t\t\treturn reorder;\r\n\r\n\t\t\t} else { /*** Gets amount of posts per day in a month ***/\r\n\r\n\t\t\t\tlet request = await fetch(`${apiAddr}/posts/monthChart?social=${social}&month=${month}&year=${year}`, {\r\n\t\t\t\t\tmethod: \"GET\",\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t        \t\t'Content-length': 0,\r\n\t\t        \t\t'Accept': 'application/json',\r\n\t\t        \t\t'Host': apiAddr,\r\n\t\t        \t\t'auth-token': userKey\r\n\t\t\t\t\t}\r\n\t\t\t\t}).then(data => data.json());\r\n\r\n\t\t\t\treturn request;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tasync getDrafts() {\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet log = await fetch(`${apiAddr}/posts/log?type=drafts`, {\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Content-Length': 0,\r\n\t\t\t\t\t'Accept': 'application/json',\r\n\t\t\t\t\t'Host': apiAddr,\r\n\t\t\t\t\t'auth-token': userKey\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn log;\r\n\t\t},\r\n\r\n\t\tasync deleteDraft(draftID) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet request = await fetch(`${apiAddr}/posts/log?type=deleteDraft&postID=${draftID}`, {\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Content-Length': 0,\r\n\t\t\t\t\t'Accept': 'application/json',\r\n\t\t\t\t\t'Host': apiAddr,\r\n\t\t\t\t\t'auth-token': userKey\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync getBlogPost(postID) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\r\n\t\t\tlet post = await fetch(`${apiAddr}/posts/${postID}`, {\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Content-Length': 0,\r\n\t\t\t\t\t'Accept': 'application/json',\r\n\t\t\t\t\t'Host': apiAddr,\r\n\t\t\t\t\t'auth-token': userKey\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn post;\r\n\t\t},\r\n\r\n\t\tasync createPost(content) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\r\n\t\t\tlet post = await fetch(`${apiAddr}/posts/createPost`, {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'auth-token': userKey,\r\n\t\t\t\t\t'Accept': 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\tbody: content,\r\n\t\t\t}).then(data => data.json())\r\n\r\n\t\t\t//returns true for successful submit, returns false on error\r\n\t\t\treturn post;\r\n\t\t},\r\n\r\n\t\tasync updatePost() {\r\n\r\n\t\t\t/**\r\n\t\t\t * 09. 15. 2023\r\n\t\t\t * Need to redesign algo for editting posts between Front and Back End\r\n\t\t\t * Function will be removed for now, until later update\r\n\t\t\t */\r\n\t\t},\r\n\r\n\t\tasync deletePost(postID) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\r\n\t\t\tlet response = await fetch(`${apiAddr}/posts/deletePost?id=${postID}`, {\r\n\t\t\t\tmethod: \"DELETE\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t// 'Content-Type': 'application/json',\r\n\t\t\t\t\t// 'Accept': 'application/json',\r\n\t\t\t\t\t'auth-token': userKey\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json())\r\n\r\n\t\t\treturn response;\r\n\t\t\t/* simply confirms whether post is deleted or not */\r\n\t\t},\r\n\r\n\t\tasync getComments(postID) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\r\n\t\t\tlet response = await fetch(`${apiAddr}/posts/comment/getComments?postID=${postID}`, {\r\n\t\t\t\tmethod: \"GET\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t        \t\t'Content-length': 0,\r\n\t        \t\t'Accept': 'application/json',\r\n\t        \t\t'Host': apiAddr,\r\n\t        \t\t'auth-token': userKey,\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json())\r\n\r\n\t\t\treturn response;\r\n\t\t},\r\n\r\n\t\tasync postComment(type, parentID, body) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\r\n\t\t\t/**\r\n\t\t\t * type: *initial, *response\r\n\t\t\t */\r\n\r\n\t\t\tif(body == null) {\r\n\t\t\t\tlet request = await fetch(`${apiAddr}/posts/comment/${type}/?postID=${parentID}`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t        \t\t'Content-length': 0,\r\n\t\t        \t\t'Accept': 'application/json',\r\n\t\t        \t\t'Host': apiAddr,\r\n\t\t        \t\t'auth-token': userKey,\r\n\t\t\t\t\t}\r\n\t\t\t\t}).then(data => data.json());\r\n\r\n\t\t\t\treturn request;\r\n\t\t\t} else {\r\n\t\t\t\tlet request = await fetch(`${apiAddr}/posts/comment/${type}`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t        \t\t'Content-length': 0,\r\n\t\t        \t\t'Accept': 'application/json',\r\n\t\t        \t\t'Host': apiAddr,\r\n\t\t        \t\t'auth-token': userKey,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify(body)\r\n\t\t\t\t}).then(data => data.json());\r\n\r\n\t\t\t\treturn request;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tasync deleteComment(commentID) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\r\n\t\t\tlet request = await fetch(`${apiAddr}/posts/comment/delete/?commentID=${commentID}`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t       \t\t'Content-length': 0,\r\n\t\t       \t\t'Accept': 'application/json',\r\n\t\t       \t\t'Host': apiAddr,\r\n\t\t       \t\t'auth-token': userKey,\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync updateCommentCount(postID, count) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet request = await fetch(`${apiAddr}/posts/comment/updateCount/?postID=${postID}&count=${count}`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t        \t\t'Content-length': 0,\r\n\t\t        \t\t'Accept': 'application/json',\r\n\t\t        \t\t'Host': apiAddr,\r\n\t\t        \t\t'auth-token': userKey,\r\n\t\t\t\t\t}\r\n\t\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync getInteractions(arg) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\r\n\t\t\tif(arg == 'count') {\r\n\r\n\t\t\t\tconst notifs = await fetch(`${apiAddr}/users/notif/sendUnreadCount`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t        \t\t'Content-length': 0,\r\n\t\t        \t\t'Accept': 'application/json',\r\n\t\t        \t\t'Host': apiAddr,\r\n\t\t        \t\t'auth-token': userKey,\r\n\t\t\t\t\t}\r\n\t\t\t\t}).then(data => data.json());\r\n\r\n\t\t\t\treturn notifs;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst notifs = await fetch(`${apiAddr}/users/notif/sendAll`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t        \t\t'Content-length': 0,\r\n\t\t        \t\t'Accept': 'application/json',\r\n\t\t        \t\t'Host': apiAddr,\r\n\t\t        \t\t'auth-token': userKey,\r\n\t\t\t\t\t}\r\n\t\t\t\t}).then(data => data.json());\r\n\r\n\t\t\t\treturn notifs;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * For connection requests, commenting, tagging, group invites\r\n\t\t */\r\n\t\tasync newInteraction(notif) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\r\n\t\t\t/**\r\n\t\t\t * Notif object requirements:\r\n\t\t\t * type: *request, *commentInitial, *commentResponse, *tagging\r\n\t\t\t * isRead: boolean,\r\n\t\t\t * sender: userID,\r\n\t\t\t * recipients: array || userID\r\n\t\t\t * url:\r\n\t\t\t * message: *sent, *accept, *ignore\r\n\t\t\t */\r\n\r\n\t\t\tconst request = await fetch(`${apiAddr}/users/notif/${notif.type}`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t        \t\t'Content-length': 0,\r\n\t        \t\t'Accept': 'application/json',\r\n\t        \t\t'Host': apiAddr,\r\n\t        \t\t'auth-token': userKey,\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(notif)\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync getConnections(userID) {\r\n\t\t\t\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet request = await fetch(`${apiAddr}/users/user/${userID}?query=getAllConnects`, {\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t        \t\t'Content-length': 0,\r\n\t        \t\t'Accept': 'application/json',\r\n\t        \t\t'Host': apiAddr,\r\n\t        \t\t'auth-token': userKey,\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync removeConnection(userID) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet request = await fetch(`${apiAddr}/users/user/${userID}/?query=removeConnect&remove=${userID}`, {\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t        \t\t'Content-length': 0,\r\n\t        \t\t'Accept': 'application/json',\r\n\t        \t\t'Host': apiAddr,\r\n\t        \t\t'auth-token': userKey,\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync removeSubscription(userID, toOrFrom) {\r\n\r\n\t\t\t//if toOrFrom == 'to', removing sub TO user\r\n\t\t\t//if 'from', removing sub FROM current user\r\n\t\t\tlet direction = toOrFrom == 'to' ? 'removeSubTo' : 'removeSubFrom';\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet request = await fetch(`${apiAddr}/users/user/${userID}/?query=${direction}&remove=${userID}`, {\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t        \t\t'Content-length': 0,\r\n\t        \t\t'Accept': 'application/json',\r\n\t        \t\t'Host': apiAddr,\r\n\t        \t\t'auth-token': userKey,\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync getSingleUser(userID) {\r\n\r\n\t\t\t/* For return user's page*/\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet user = await fetch(`${apiAddr}/users/user/${userID}/?query=singleUser`, {\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t        \t\t'Content-length': 0,\r\n\t        \t\t'Accept': 'application/json',\r\n\t        \t\t'Host': apiAddr,\r\n\t        \t\t'auth-token': userKey,\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn user;\r\n\t\t},\r\n\r\n\t\tasync searchUsers(query) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tconst search = await fetch(`${apiAddr}/users/search/?userName=${query}`, {\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t        \t'Content-length': 0,\r\n\t\t        \t'Accept': 'application/json',\r\n\t\t        \t'Host': apiAddr,\r\n\t\t        \t'auth-token': userKey\r\n\t\t\t\t}\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn search;\r\n\t\t\t//returns search results, most likely some array of objects\r\n\t\t},\r\n\r\n\t\tasync newGroup(body) {\r\n\r\n\t\t\t/***\r\n\t\t\t * Necessary body values:\r\n\t\t\t * type: tag, collection, group\r\n\t\t\t * name: groupName\r\n\t\t\t * owner: userID,\r\n\t\t\t * admins: [userID],\r\n\t\t\t * hasAccess: [userID]\r\n\t\t\t * isPrivate: boolean\r\n\t\t\t */\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet request = await fetch(`${apiAddr}/groups/create`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t        \t'Content-length': 0,\r\n\t\t        \t'Accept': 'application/json',\r\n\t\t        \t'Host': apiAddr,\r\n\t\t        \t'auth-token': userKey\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(body)\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync groupPosts(body) {\r\n\r\n\t\t\t/***\r\n\t\t\t * Action Types:\r\n\t\t\t * getPosts, addPost, removePost\r\n\t\t\t * \r\n\t\t\t * Necessary body values:\r\n\t\t\t * id: groupID,\r\n\t\t\t * name: groupName,\r\n\t\t\t * postID: \r\n\t\t\t */\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet request = await fetch(`${apiAddr}/groups/posts`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t        \t'Content-length': 0,\r\n\t\t        \t'Accept': 'application/json',\r\n\t\t        \t'Host': apiAddr,\r\n\t\t        \t'auth-token': userKey\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(body),\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync manageGroup(action, body) {\r\n\r\n\t\t\t/*** \r\n\t\t\t * Action Types:\r\n\t\t\t * request, addUser, removeUser, addAdmin, removeAdmin, \r\n\t\t\t * \tdeleteGroup, renameGroup, privatizeGroup\r\n\t\t\t * \r\n\t\t\t * Necessary body values:\r\n\t\t\t * id: groupID,\r\n\t\t\t * name: groupName,\r\n\t\t\t * userID: \r\n\t\t\t * details: \r\n\t\t\t * \t - necessary when giving access to private group.\r\n\t\t\t *   - should be owner or admin's userID\r\n\t\t\t */\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet request = await fetch(`${apiAddr}/groups/manage/${action}`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t        \t'Content-length': 0,\r\n\t\t        \t'Accept': 'application/json',\r\n\t\t        \t'Host': apiAddr,\r\n\t\t        \t'auth-token': userKey\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(body),\r\n\t\t\t}).then(data => data.json());\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync getSuggestions() {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet request = await fetch(`${apiAddr}/groups/posts`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t        \t'Content-length': 0,\r\n\t\t\t        \t'Accept': 'application/json',\r\n\t\t\t        \t'Host': apiAddr,\r\n\t\t\t        \t'auth-token': userKey\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({action: 'getSuggestions'})\r\n\t\t\t}).then(data => data.json())\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync getUserTags() {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet request = await fetch(`${apiAddr}/groups/posts`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t        \t'Content-length': 0,\r\n\t\t\t        \t'Accept': 'application/json',\r\n\t\t\t        \t'Host': apiAddr,\r\n\t\t\t        \t'auth-token': userKey\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({action: 'getUserTags'})\r\n\t\t\t}).then(data => data.json())\r\n\r\n\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync getMacros(type) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\r\n\t\t\tif(type == 'tags') {\r\n\r\n\t\t\t\tlet request = await fetch(`${apiAddr}/groups/posts`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t        \t'Content-length': 0,\r\n\t\t\t        \t'Accept': 'application/json',\r\n\t\t\t        \t'Host': apiAddr,\r\n\t\t\t        \t'auth-token': userKey\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({action: 'allTagsUsed'})\r\n\t\t\t\t}).then(data => data.json());\r\n\r\n\t\t\t\treturn request;\r\n\t\t\t}\r\n\t\t\telse if(type == 'private') {\r\n\r\n\t\t\t\tlet request = await fetch(`${apiAddr}/groups/posts`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t        \t'Content-length': 0,\r\n\t\t\t        \t'Accept': 'application/json',\r\n\t\t\t        \t'Host': apiAddr,\r\n\t\t\t        \t'auth-token': userKey\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({action: 'getPrivatePosts'})\r\n\t\t\t\t}).then(data => data.json());\r\n\r\n\t\t\t\treturn request;\r\n\t\t\t}\r\n\t\t\telse if(type == 'collections') {\r\n\r\n\t\t\t\tlet request = await fetch(`${apiAddr}/groups/posts`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t        \t'Content-length': 0,\r\n\t\t\t        \t'Accept': 'application/json',\r\n\t\t\t        \t'Host': apiAddr,\r\n\t\t\t        \t'auth-token': userKey\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({action: 'getCollections'})\r\n\t\t\t\t}).then(data => data.json());\r\n\r\n\t\t\t\treturn request;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tasync getTagData(groupID, groupName) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\t\t\tlet request = await fetch(`${apiAddr}/groups/posts`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t        \t'Content-length': 0,\r\n\t\t\t        \t'Accept': 'application/json',\r\n\t\t\t        \t'Host': apiAddr,\r\n\t\t\t        \t'auth-token': userKey\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({action: 'getTagInfo', groupID: groupID, groupName: groupName })\r\n\t\t\t\t}).then(data => data.json());\r\n\r\n\t\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync userSettings(body) {\r\n\r\n\t\t\t/**\r\n\t\t\t * Necessary Body Values\r\n\t\t\t * option: Profile, Privacy, InvitationCount,\r\n\t\t\t * username, profilePhoto, bio, changePassword,\r\n\t\t\t * updateLocation\r\n\t\t\t * \r\n\t\t\t * action: addTopics, removeTopics\r\n\t\t\t *\r\n\t\t\t **/\r\n\t\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\r\n\t\t\t\tlet request = await fetch(`${apiAddr}/users/settings`, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t        \t'Content-length': 0,\r\n\t\t\t        \t'Accept': 'application/json',\r\n\t\t\t        \t'Host': apiAddr,\r\n\t\t\t        \t'auth-token': userKey\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify(body),\r\n\t\t\t\t}).then(data => data.json());\r\n\r\n\t\t\t\treturn request;\r\n\t\t},\r\n\r\n\t\tasync userSettings_profilePhoto(body) {\r\n\r\n\t\t\tlet userKey = sessionStorage.getItem('userKey');\r\n\r\n\t\t\tlet request = await fetch(`${apiAddr}/users/settings`, {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'auth-token': userKey,\r\n\t\t\t\t},\r\n\t\t\t\tbody: body,\r\n\t\t\t}).then(data => data.json())\r\n\r\n\t\t\treturn request;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}