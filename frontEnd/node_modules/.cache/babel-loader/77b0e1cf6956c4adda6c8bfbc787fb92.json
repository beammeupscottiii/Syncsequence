{"ast":null,"code":"/**\n * @module ol/render/canvas/hitdetect\n */\nimport CanvasImmediateRenderer from './Immediate.js';\nimport { Icon } from '../../style.js';\nimport { ascending } from '../../array.js';\nimport { clamp } from '../../math.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { getTransformFromProjections, getUserProjection, toUserExtent } from '../../proj.js';\nimport { intersects } from '../../extent.js';\nexport const HIT_DETECT_RESOLUTION = 0.5;\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent in render projection.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {number} [squaredTolerance] Squared tolerance.\n * @param {import(\"../../proj/Projection.js\").default} [projection] Render projection.\n * @return {ImageData} Hit detection image data.\n */\n\nexport function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation, squaredTolerance, projection) {\n  const userExtent = projection ? toUserExtent(extent, projection) : extent;\n  const width = size[0] * HIT_DETECT_RESOLUTION;\n  const height = size[1] * HIT_DETECT_RESOLUTION;\n  const context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  const canvas = context.canvas;\n  const renderer = new CanvasImmediateRenderer(context, HIT_DETECT_RESOLUTION, extent, null, rotation, squaredTolerance, projection ? getTransformFromProjections(getUserProjection(), projection) : null);\n  const featureCount = features.length; // Stretch hit detection index to use the whole available color range\n\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  const featuresByZIndex = {};\n\n  for (let i = 1; i <= featureCount; ++i) {\n    const feature = features[i - 1];\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n\n    if (!featureStyleFunction) {\n      continue;\n    }\n\n    let styles = featureStyleFunction(feature, resolution);\n\n    if (!styles) {\n      continue;\n    }\n\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n\n    const index = i * indexFactor;\n    const color = index.toString(16).padStart(7, '#00000');\n\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\n      const originalStyle = styles[j];\n      const geometry = originalStyle.getGeometryFunction()(feature);\n\n      if (!geometry || !intersects(userExtent, geometry.getExtent())) {\n        continue;\n      }\n\n      const style = originalStyle.clone();\n      const fill = style.getFill();\n\n      if (fill) {\n        fill.setColor(color);\n      }\n\n      const stroke = style.getStroke();\n\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n\n      style.setText(undefined);\n      const image = originalStyle.getImage();\n\n      if (image) {\n        const imgSize = image.getImageSize();\n\n        if (!imgSize) {\n          continue;\n        }\n\n        const imgContext = createCanvasContext2D(imgSize[0], imgSize[1], undefined, {\n          alpha: false\n        });\n        const img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(new Icon({\n          img: img,\n          anchor: image.getAnchor(),\n          anchorXUnits: 'pixels',\n          anchorYUnits: 'pixels',\n          offset: image.getOrigin(),\n          opacity: 1,\n          size: image.getSize(),\n          scale: image.getScale(),\n          rotation: image.getRotation(),\n          rotateWithView: image.getRotateWithView()\n        }));\n      }\n\n      const zIndex = style.getZIndex() || 0;\n      let byGeometryType = featuresByZIndex[zIndex];\n\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n\n      const type = geometry.getType();\n\n      if (type === 'GeometryCollection') {\n        const geometries =\n        /** @type {import(\"../../geom/GeometryCollection.js\").default} */\n        geometry.getGeometriesArrayRecursive();\n\n        for (let i = 0, ii = geometries.length; i < ii; ++i) {\n          const geometry = geometries[i];\n          byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n        }\n      } else {\n        byGeometryType[type.replace('Multi', '')].push(geometry, style);\n      }\n    }\n  }\n\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);\n\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n\n    for (const type in byGeometryType) {\n      const geomAndStyle = byGeometryType[type];\n\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<F>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<F>} Features.\n * @template {import(\"../../Feature.js\").FeatureLike} F\n */\n\nexport function hitDetect(pixel, features, imageData) {\n  /** @type {Array<F>} */\n  const resultFeatures = [];\n\n  if (imageData) {\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION); // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n\n    const index = (clamp(x, 0, imageData.width - 1) + clamp(y, 0, imageData.height - 1) * imageData.width) * 4;\n    const r = imageData.data[index];\n    const g = imageData.data[index + 1];\n    const b = imageData.data[index + 2];\n    const i = b + 256 * (g + 256 * r);\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n\n  return resultFeatures;\n}","map":{"version":3,"names":["CanvasImmediateRenderer","Icon","ascending","clamp","createCanvasContext2D","getTransformFromProjections","getUserProjection","toUserExtent","intersects","HIT_DETECT_RESOLUTION","createHitDetectionImageData","size","transforms","features","styleFunction","extent","resolution","rotation","squaredTolerance","projection","userExtent","width","height","context","imageSmoothingEnabled","canvas","renderer","featureCount","length","indexFactor","Math","floor","featuresByZIndex","i","feature","featureStyleFunction","getStyleFunction","styles","Array","isArray","index","color","toString","padStart","j","jj","originalStyle","geometry","getGeometryFunction","getExtent","style","clone","fill","getFill","setColor","stroke","getStroke","setLineDash","setText","undefined","image","getImage","imgSize","getImageSize","imgContext","alpha","img","fillStyle","fillRect","setImage","anchor","getAnchor","anchorXUnits","anchorYUnits","offset","getOrigin","opacity","getSize","scale","getScale","getRotation","rotateWithView","getRotateWithView","zIndex","getZIndex","byGeometryType","type","getType","geometries","getGeometriesArrayRecursive","ii","replace","push","zIndexKeys","Object","keys","map","Number","sort","geomAndStyle","setStyle","k","kk","setTransform","drawGeometry","getImageData","hitDetect","pixel","imageData","resultFeatures","x","round","y","r","data","g","b"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/render/canvas/hitdetect.js"],"sourcesContent":["/**\n * @module ol/render/canvas/hitdetect\n */\n\nimport CanvasImmediateRenderer from './Immediate.js';\nimport {Icon} from '../../style.js';\nimport {ascending} from '../../array.js';\nimport {clamp} from '../../math.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n} from '../../proj.js';\nimport {intersects} from '../../extent.js';\n\nexport const HIT_DETECT_RESOLUTION = 0.5;\n\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent in render projection.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {number} [squaredTolerance] Squared tolerance.\n * @param {import(\"../../proj/Projection.js\").default} [projection] Render projection.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(\n  size,\n  transforms,\n  features,\n  styleFunction,\n  extent,\n  resolution,\n  rotation,\n  squaredTolerance,\n  projection,\n) {\n  const userExtent = projection ? toUserExtent(extent, projection) : extent;\n  const width = size[0] * HIT_DETECT_RESOLUTION;\n  const height = size[1] * HIT_DETECT_RESOLUTION;\n  const context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  const canvas = context.canvas;\n  const renderer = new CanvasImmediateRenderer(\n    context,\n    HIT_DETECT_RESOLUTION,\n    extent,\n    null,\n    rotation,\n    squaredTolerance,\n    projection\n      ? getTransformFromProjections(getUserProjection(), projection)\n      : null,\n  );\n  const featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  const featuresByZIndex = {};\n  for (let i = 1; i <= featureCount; ++i) {\n    const feature = features[i - 1];\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!featureStyleFunction) {\n      continue;\n    }\n    let styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    const index = i * indexFactor;\n    const color = index.toString(16).padStart(7, '#00000');\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\n      const originalStyle = styles[j];\n      const geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !intersects(userExtent, geometry.getExtent())) {\n        continue;\n      }\n      const style = originalStyle.clone();\n      const fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      const stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      const image = originalStyle.getImage();\n      if (image) {\n        const imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n\n        const imgContext = createCanvasContext2D(\n          imgSize[0],\n          imgSize[1],\n          undefined,\n          {alpha: false},\n        );\n        const img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(\n          new Icon({\n            img: img,\n            anchor: image.getAnchor(),\n            anchorXUnits: 'pixels',\n            anchorYUnits: 'pixels',\n            offset: image.getOrigin(),\n            opacity: 1,\n            size: image.getSize(),\n            scale: image.getScale(),\n            rotation: image.getRotation(),\n            rotateWithView: image.getRotateWithView(),\n          }),\n        );\n      }\n      const zIndex = style.getZIndex() || 0;\n      let byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n      const type = geometry.getType();\n      if (type === 'GeometryCollection') {\n        const geometries =\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\n            geometry\n          ).getGeometriesArrayRecursive();\n        for (let i = 0, ii = geometries.length; i < ii; ++i) {\n          const geometry = geometries[i];\n          byGeometryType[geometry.getType().replace('Multi', '')].push(\n            geometry,\n            style,\n          );\n        }\n      } else {\n        byGeometryType[type.replace('Multi', '')].push(geometry, style);\n      }\n    }\n  }\n\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (const type in byGeometryType) {\n      const geomAndStyle = byGeometryType[type];\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<F>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<F>} Features.\n * @template {import(\"../../Feature.js\").FeatureLike} F\n */\nexport function hitDetect(pixel, features, imageData) {\n  /** @type {Array<F>} */\n  const resultFeatures = [];\n  if (imageData) {\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    const index =\n      (clamp(x, 0, imageData.width - 1) +\n        clamp(y, 0, imageData.height - 1) * imageData.width) *\n      4;\n    const r = imageData.data[index];\n    const g = imageData.data[index + 1];\n    const b = imageData.data[index + 2];\n    const i = b + 256 * (g + 256 * r);\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  return resultFeatures;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}