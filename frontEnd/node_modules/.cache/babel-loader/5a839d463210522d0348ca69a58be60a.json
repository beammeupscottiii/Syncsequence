{"ast":null,"code":"export default function bodyParse(string) {\n  let text = string;\n  let markupSet = text.match(/\\((.*?)\\)/g);\n  let splitText = text.replace(/\\((.*?)\\)/g, '_').split('_');\n  let spanArray = [];\n  let elementArray = [];\n  let newset = markupSet.map((element, index) => {\n    if (element.includes('b') || element.includes('i')) {\n      // let thing = element.replace(/\\((.*?)\\)/g, (_, match) => `<${match}>`);\n      // return thing;\n      elementArray.push(element);\n      return 0;\n    } else if (element.includes('nl')) {\n      let thing = element.replace(/\\((.*?)\\)/g, (_, match) => `<br>`);\n      return thing;\n    } else if (element.includes('u')) {\n      spanArray.push(element);\n      return 1;\n    } else if (element.includes('color')) {\n      spanArray.push(element);\n      return 1;\n    }\n  }); // console.log(newset)\n\n  elementArray = elementArray.map((element, index) => {\n    if (index % 2 == 0) {\n      let thing = element.replace(/\\((.*?)\\)/g, (_, match) => `<${match}>`);\n      return thing;\n    } else {\n      let thing = element.replace(/\\((.*?)\\)/g, (_, match) => `</${match}>`);\n      return thing;\n    }\n  }); // console.log(elementArray);\n\n  spanArray = spanArray.map((element, index) => {\n    if (index % 2 == 0) {\n      let thing = element.replace(/\\((.*?)\\)/g, (_, match) => `<span data-code=\"${match}\">`);\n      return thing;\n    } else {\n      let thing = element.replace(/\\((.*?)\\)/g, (_, match) => `</span>`);\n      return thing;\n    }\n  });\n  let iter = 0;\n  let iterE = 0;\n  let newsetTwo = newset.map((element, index) => {\n    if (element == 0) {\n      let i = iterE;\n      iterE++;\n      return elementArray[i];\n    } else if (element == 1) {\n      let i = iter;\n      iter++;\n      return spanArray[i];\n    } else if (element !== 0 && element !== 1) {\n      return element;\n    }\n  }); // console.log(newsetTwo);\n\n  let iter2 = 0;\n  let setText = splitText.map((element, index) => {\n    if (index % 2 !== 0) {\n      let i = iter2;\n      ++iter2;\n      let newText = newsetTwo[i] + element + newsetTwo[iter2];\n      ++iter2;\n      return newText;\n    } else {\n      return element;\n    }\n  });\n  let replace = String(setText.pop()).replace(/undefined/g, '');\n  setText.push(replace);\n  let newText = setText.join('');\n  return newText;\n}","map":{"version":3,"names":["bodyParse","string","text","markupSet","match","splitText","replace","split","spanArray","elementArray","newset","map","element","index","includes","push","thing","_","iter","iterE","newsetTwo","i","iter2","setText","newText","String","pop","join"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/src/components/bodyParse.jsx"],"sourcesContent":["\r\nexport default function bodyParse(string) {\r\n\tlet text = string;\r\n\tlet markupSet = text.match(/\\((.*?)\\)/g);\r\n\tlet splitText = text.replace(/\\((.*?)\\)/g, '_').split('_');\r\n\r\n\tlet spanArray = [];\r\n\tlet elementArray = [];\r\n\tlet newset = markupSet.map((element, index) => {\r\n\t    if(element.includes('b') || element.includes('i')) {\r\n\t      // let thing = element.replace(/\\((.*?)\\)/g, (_, match) => `<${match}>`);\r\n\t      // return thing;\r\n\t      elementArray.push(element);\r\n\t      return 0;\r\n\t    }\r\n\t    else if (element.includes('nl')) {\r\n\t      let thing = element.replace(/\\((.*?)\\)/g, (_, match) => `<br>`);\r\n\t      return thing;\r\n\t    }\r\n\t    else if(element.includes('u')) {\r\n\t      spanArray.push(element);\r\n\t      return 1;\r\n\t    }\r\n\t    else if(element.includes('color')) {\r\n\t      spanArray.push(element)\r\n\t      return 1;\r\n\t    }\r\n\t});\r\n\t// console.log(newset)\r\n\r\n\telementArray = elementArray.map((element, index) => {\r\n\t\tif(index % 2 == 0) {\r\n\t\t\tlet thing = element.replace(/\\((.*?)\\)/g, (_, match) => `<${match}>`);\r\n\t\t\treturn thing;\r\n\t\t} else {\r\n\t\t\tlet thing = element.replace(/\\((.*?)\\)/g, (_, match) => `</${match}>`);\r\n\t\t\treturn thing;\r\n\t\t}\r\n\t})\r\n\t// console.log(elementArray);\r\n\r\n\tspanArray = spanArray.map((element, index) => {\r\n\t  if(index % 2 == 0) {\r\n\t      let thing = element.replace(/\\((.*?)\\)/g, (_, match) => `<span data-code=\"${match}\">`);\r\n\t      return thing;\r\n\t    } else {\r\n\t      let thing = element.replace(/\\((.*?)\\)/g, (_, match) => `</span>`);\r\n\t      return thing;\r\n\t    }\r\n\t});\r\n\r\n\tlet iter = 0;\r\n\tlet iterE = 0;\r\n\tlet newsetTwo = newset.map((element, index) => {\r\n\t  if (element == 0){\r\n\t\tlet i = iterE;\r\n\t\titerE++;\r\n\t\treturn elementArray[i];\r\n\t  } else if (element == 1){\r\n\t    let i = iter;\r\n\t    iter++;\r\n\t    return spanArray[i];\r\n\t  } else if(element !== 0 && element !== 1) {\r\n\t    return element;\r\n\t  }\r\n\t});\r\n\t// console.log(newsetTwo);\r\n\r\n\tlet iter2 = 0;\r\n\tlet setText = splitText.map((element, index) => {\r\n\t  if(index % 2 !== 0) {\r\n\t    let i = iter2;\r\n\t    ++iter2;\r\n\t    let newText = newsetTwo[i] + element + newsetTwo[iter2];\r\n\t    ++iter2;\r\n\t    \r\n\t    return newText;\r\n\t  }\r\n\t  else {\r\n\t    return element;\r\n\t  }\r\n\t});\r\n\r\n\tlet replace = String(setText.pop()).replace(/undefined/g, '');\r\n\tsetText.push(replace);\r\n\tlet newText = setText.join('');\r\n\treturn newText;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}