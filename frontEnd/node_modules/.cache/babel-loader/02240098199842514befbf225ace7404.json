{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nexport default function CalInfo() {\n  _s();\n\n  const d = new Date(); //initial get date\n\n  const date = useRef(d); //set reference for date\n\n  const fullDate = date.current; //set reference for current date\n\n  const month = fullDate.getMonth(); //set var for current month from ref\n\n  const dateNumber = fullDate.getDate();\n  const dayNumber = fullDate.getDay();\n  let start = new Date(d.getFullYear(), 0, 0);\n  let diff = d - start + (start.getTimezoneOffset() - d.getTimezoneOffset()) * 60 * 1000;\n  let oneDay = 1000 * 60 * 60 * 24;\n  let dayOfTheYear = Math.floor(diff / oneDay);\n\n  let getAmountOfDays = year => {\n    return year % 4 === 0 && year % 100 > 0 || year % 400 == 0 ? 366 : 365;\n  };\n\n  let year = d.getFullYear();\n  let amountOfDays = getAmountOfDays();\n  let monthInNum = d.getMonth() + 1;\n\n  let currentMnth = month => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return months[month];\n  };\n\n  let currentDate = date => {\n    // let date = date.getDate();\n    if (date == 1) {\n      return `${date}st`;\n    } else if (date == 2) {\n      return `${date}nd`;\n    } else if (date == 3) {\n      return `${date}rd`;\n    } else if (date == 21) {\n      return `${date}st`;\n    } else if (date == 22) {\n      return `${date}nd`;\n    } else if (date == 23) {\n      return `${date}rd`;\n    } else if (date == 31) {\n      return `${date}st`;\n    } else {\n      return `${date}th`;\n    }\n  };\n\n  let currentDay = day => {\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return days[day];\n  };\n\n  let monthsAbrv = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  let dayInitials = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"];\n  return {\n    currentMonth: currentMnth(month),\n    currentDate: currentDate(dateNumber),\n    currentDay: currentDay(dayNumber),\n    currentYear: fullDate.getFullYear(),\n    getCurrentMonth: currentMnth(),\n    getCurrentDate: currentDate(),\n    dayOfTheYear: dayOfTheYear,\n    amountOfDays: amountOfDays,\n    monthInNum: monthInNum,\n    monthsAbrv: monthsAbrv,\n    dayInitials: dayInitials // intention is to export these functions so that they can be used without set values\n\n  };\n}\n\n_s(CalInfo, \"V/9ysD0nQURr1o+y73cYANPhUis=\");\n\n_c = CalInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalInfo\");","map":{"version":3,"names":["React","useRef","CalInfo","d","Date","date","fullDate","current","month","getMonth","dateNumber","getDate","dayNumber","getDay","start","getFullYear","diff","getTimezoneOffset","oneDay","dayOfTheYear","Math","floor","getAmountOfDays","year","amountOfDays","monthInNum","currentMnth","months","currentDate","currentDay","day","days","monthsAbrv","dayInitials","currentMonth","currentYear","getCurrentMonth","getCurrentDate"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/src/components/calInfo.js"],"sourcesContent":["\r\nimport React, {useRef} from 'react';\r\n\r\nexport default function CalInfo() {\r\n\r\n  const d = new Date(); //initial get date\r\n  const date = useRef(d); //set reference for date\r\n  const fullDate = date.current; //set reference for current date\r\n  const month = fullDate.getMonth(); //set var for current month from ref\r\n  const dateNumber = fullDate.getDate(); \r\n  const dayNumber = fullDate.getDay();\r\n\r\n  let start = new Date(d.getFullYear(), 0, 0);\r\n  let diff = (d - start) + ((start.getTimezoneOffset() - d.getTimezoneOffset()) * 60 * 1000);\r\n  let oneDay = 1000 * 60 * 60 * 24\r\n  let dayOfTheYear = Math.floor(diff / oneDay);\r\n  let getAmountOfDays = (year) => {\r\n    return ((year % 4 === 0 && year % 100 > 0) || year % 400 == 0) ? 366 : 365;\r\n  }\r\n  let year = d.getFullYear();\r\n  let amountOfDays = getAmountOfDays();\r\n  let monthInNum = d.getMonth() + 1;\r\n\r\n  \r\n  let currentMnth = (month) => {\r\n      let months = [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\"\r\n      ]\r\n      return months[month];\r\n  };\r\n\r\n  let currentDate = (date) => {\r\n      // let date = date.getDate();\r\n      if(date == 1) {\r\n        return `${date}st`;\r\n      }\r\n      else if(date == 2) {\r\n        return `${date}nd`;\r\n      }\r\n      else if(date == 3) {\r\n        return `${date}rd`;\r\n      }\r\n      else if(date == 21) {\r\n        return `${date}st`;\r\n      }\r\n      else if(date == 22) {\r\n        return `${date}nd`;\r\n      }\r\n      else if(date == 23) {\r\n        return `${date}rd`;\r\n      } \r\n      else if(date == 31) {\r\n        return `${date}st`;\r\n      }\r\n      else {\r\n        return `${date}th`;\r\n      }\r\n  };\r\n\r\n  let currentDay = (day) => {\r\n      let days = [\r\n        \"Sunday\",\r\n        \"Monday\",\r\n        \"Tuesday\",\r\n        \"Wednesday\",\r\n        \"Thursday\",\r\n        \"Friday\",\r\n        \"Saturday\"\r\n      ]\r\n      return days[day];\r\n  };\r\n\r\n  let monthsAbrv = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\"\r\n  ];\r\n\r\n  let dayInitials = [\r\n      \"S\",\r\n      \"M\",\r\n      \"T\",\r\n      \"W\",\r\n      \"T\",\r\n      \"F\",\r\n      \"S\"\r\n  ];\r\n\r\n  return {\r\n  \tcurrentMonth: currentMnth(month),\r\n  \tcurrentDate: currentDate(dateNumber),\r\n  \tcurrentDay: currentDay(dayNumber),\r\n  \tcurrentYear: fullDate.getFullYear(),\r\n    getCurrentMonth: currentMnth(),\r\n    getCurrentDate: currentDate(),\r\n    dayOfTheYear: dayOfTheYear,\r\n    amountOfDays: amountOfDays,\r\n    monthInNum: monthInNum,\r\n    monthsAbrv: monthsAbrv,\r\n    dayInitials: dayInitials\r\n    // intention is to export these functions so that they can be used without set values\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}