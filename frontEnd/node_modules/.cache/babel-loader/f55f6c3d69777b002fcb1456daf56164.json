{"ast":null,"code":"/**\n * @module ol/style/Fill\n */\nimport ImageState from '../ImageState.js';\nimport { get as getIconImage } from './IconImage.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} [color=null] A color,\n * gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats. For polygon fills (not for {@link import(\"./RegularShape.js\").default} fills),\n * a pattern can also be provided as {@link module:ol/colorlike~PatternDescriptor}.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\n\nclass Fill {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default|null}\n     */\n\n    this.patternImage_ = null;\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null}\n     */\n\n    this.color_ = null;\n\n    if (options.color !== undefined) {\n      this.setColor(options.color);\n    }\n  }\n  /**\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */\n\n\n  clone() {\n    const color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined\n    });\n  }\n  /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} Color.\n   * @api\n   */\n\n\n  getColor() {\n    return this.color_;\n  }\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} color Color.\n   * @api\n   */\n\n\n  setColor(color) {\n    if (color !== null && typeof color === 'object' && 'src' in color) {\n      const patternImage = getIconImage(null, color.src, 'anonymous', undefined, color.offset ? null : color.color ? color.color : null, !(color.offset && color.size));\n      patternImage.ready().then(() => {\n        this.patternImage_ = null;\n      });\n\n      if (patternImage.getImageState() === ImageState.IDLE) {\n        patternImage.load();\n      }\n\n      if (patternImage.getImageState() === ImageState.LOADING) {\n        this.patternImage_ = patternImage;\n      }\n    }\n\n    this.color_ = color;\n  }\n  /**\n   * @return {boolean} The fill style is loading an image pattern.\n   */\n\n\n  loading() {\n    return !!this.patternImage_;\n  }\n  /**\n   * @return {Promise<void>} `false` or a promise that resolves when the style is ready to use.\n   */\n\n\n  ready() {\n    return this.patternImage_ ? this.patternImage_.ready() : Promise.resolve();\n  }\n\n}\n\nexport default Fill;","map":{"version":3,"names":["ImageState","get","getIconImage","Fill","constructor","options","patternImage_","color_","color","undefined","setColor","clone","getColor","Array","isArray","slice","patternImage","src","offset","size","ready","then","getImageState","IDLE","load","LOADING","loading","Promise","resolve"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/style/Fill.js"],"sourcesContent":["/**\n * @module ol/style/Fill\n */\n\nimport ImageState from '../ImageState.js';\nimport {get as getIconImage} from './IconImage.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} [color=null] A color,\n * gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats. For polygon fills (not for {@link import(\"./RegularShape.js\").default} fills),\n * a pattern can also be provided as {@link module:ol/colorlike~PatternDescriptor}.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nclass Fill {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default|null}\n     */\n    this.patternImage_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null}\n     */\n    this.color_ = null;\n    if (options.color !== undefined) {\n      this.setColor(options.color);\n    }\n  }\n\n  /**\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n    });\n  }\n\n  /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} color Color.\n   * @api\n   */\n  setColor(color) {\n    if (color !== null && typeof color === 'object' && 'src' in color) {\n      const patternImage = getIconImage(\n        null,\n        color.src,\n        'anonymous',\n        undefined,\n        color.offset ? null : color.color ? color.color : null,\n        !(color.offset && color.size),\n      );\n      patternImage.ready().then(() => {\n        this.patternImage_ = null;\n      });\n      if (patternImage.getImageState() === ImageState.IDLE) {\n        patternImage.load();\n      }\n      if (patternImage.getImageState() === ImageState.LOADING) {\n        this.patternImage_ = patternImage;\n      }\n    }\n    this.color_ = color;\n  }\n\n  /**\n   * @return {boolean} The fill style is loading an image pattern.\n   */\n  loading() {\n    return !!this.patternImage_;\n  }\n\n  /**\n   * @return {Promise<void>} `false` or a promise that resolves when the style is ready to use.\n   */\n  ready() {\n    return this.patternImage_ ? this.patternImage_.ready() : Promise.resolve();\n  }\n}\n\nexport default Fill;\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,SAAQC,GAAG,IAAIC,YAAf,QAAkC,gBAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,IAAN,CAAW;EACT;AACF;AACA;EACEC,WAAW,CAACC,OAAD,EAAU;IACnBA,OAAO,GAAGA,OAAO,IAAI,EAArB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,aAAL,GAAqB,IAArB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAc,IAAd;;IACA,IAAIF,OAAO,CAACG,KAAR,KAAkBC,SAAtB,EAAiC;MAC/B,KAAKC,QAAL,CAAcL,OAAO,CAACG,KAAtB;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEG,KAAK,GAAG;IACN,MAAMH,KAAK,GAAG,KAAKI,QAAL,EAAd;IACA,OAAO,IAAIT,IAAJ,CAAS;MACdK,KAAK,EAAEK,KAAK,CAACC,OAAN,CAAcN,KAAd,IAAuBA,KAAK,CAACO,KAAN,EAAvB,GAAuCP,KAAK,IAAIC;IADzC,CAAT,CAAP;EAGD;EAED;AACF;AACA;AACA;AACA;;;EACEG,QAAQ,GAAG;IACT,OAAO,KAAKL,MAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEG,QAAQ,CAACF,KAAD,EAAQ;IACd,IAAIA,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+C,SAASA,KAA5D,EAAmE;MACjE,MAAMQ,YAAY,GAAGd,YAAY,CAC/B,IAD+B,EAE/BM,KAAK,CAACS,GAFyB,EAG/B,WAH+B,EAI/BR,SAJ+B,EAK/BD,KAAK,CAACU,MAAN,GAAe,IAAf,GAAsBV,KAAK,CAACA,KAAN,GAAcA,KAAK,CAACA,KAApB,GAA4B,IALnB,EAM/B,EAAEA,KAAK,CAACU,MAAN,IAAgBV,KAAK,CAACW,IAAxB,CAN+B,CAAjC;MAQAH,YAAY,CAACI,KAAb,GAAqBC,IAArB,CAA0B,MAAM;QAC9B,KAAKf,aAAL,GAAqB,IAArB;MACD,CAFD;;MAGA,IAAIU,YAAY,CAACM,aAAb,OAAiCtB,UAAU,CAACuB,IAAhD,EAAsD;QACpDP,YAAY,CAACQ,IAAb;MACD;;MACD,IAAIR,YAAY,CAACM,aAAb,OAAiCtB,UAAU,CAACyB,OAAhD,EAAyD;QACvD,KAAKnB,aAAL,GAAqBU,YAArB;MACD;IACF;;IACD,KAAKT,MAAL,GAAcC,KAAd;EACD;EAED;AACF;AACA;;;EACEkB,OAAO,GAAG;IACR,OAAO,CAAC,CAAC,KAAKpB,aAAd;EACD;EAED;AACF;AACA;;;EACEc,KAAK,GAAG;IACN,OAAO,KAAKd,aAAL,GAAqB,KAAKA,aAAL,CAAmBc,KAAnB,EAArB,GAAkDO,OAAO,CAACC,OAAR,EAAzD;EACD;;AArFQ;;AAwFX,eAAezB,IAAf"},"metadata":{},"sourceType":"module"}