{"ast":null,"code":"import { lerp } from '../../math.js';\n/**\n * Creates chunks of equal length from a linestring\n * @param {number} chunkLength Length of each chunk.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Start offset of the `flatCoordinates`.\n * @param {number} end End offset of the `flatCoordinates`.\n * @param {number} stride Stride.\n * @return {Array<Array<number>>} Chunks of linestrings with stride 2.\n */\n\nexport function lineChunk(chunkLength, flatCoordinates, offset, end, stride) {\n  const chunks = [];\n  let cursor = offset;\n  let chunkM = 0;\n  let currentChunk = flatCoordinates.slice(offset, 2);\n\n  while (chunkM < chunkLength && cursor + stride < end) {\n    const [x1, y1] = currentChunk.slice(-2);\n    const x2 = flatCoordinates[cursor + stride];\n    const y2 = flatCoordinates[cursor + stride + 1];\n    const segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    chunkM += segmentLength;\n\n    if (chunkM >= chunkLength) {\n      const m = (chunkLength - chunkM + segmentLength) / segmentLength;\n      const x = lerp(x1, x2, m);\n      const y = lerp(y1, y2, m);\n      currentChunk.push(x, y);\n      chunks.push(currentChunk);\n      currentChunk = [x, y];\n\n      if (chunkM == chunkLength) {\n        cursor += stride;\n      }\n\n      chunkM = 0;\n    } else if (chunkM < chunkLength) {\n      currentChunk.push(flatCoordinates[cursor + stride], flatCoordinates[cursor + stride + 1]);\n      cursor += stride;\n    } else {\n      const missing = segmentLength - chunkM;\n      const x = lerp(x1, x2, missing / segmentLength);\n      const y = lerp(y1, y2, missing / segmentLength);\n      currentChunk.push(x, y);\n      chunks.push(currentChunk);\n      currentChunk = [x, y];\n      chunkM = 0;\n      cursor += stride;\n    }\n  }\n\n  if (chunkM > 0) {\n    chunks.push(currentChunk);\n  }\n\n  return chunks;\n}","map":{"version":3,"names":["lerp","lineChunk","chunkLength","flatCoordinates","offset","end","stride","chunks","cursor","chunkM","currentChunk","slice","x1","y1","x2","y2","segmentLength","Math","sqrt","m","x","y","push","missing"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/geom/flat/linechunk.js"],"sourcesContent":["import {lerp} from '../../math.js';\n\n/**\n * Creates chunks of equal length from a linestring\n * @param {number} chunkLength Length of each chunk.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Start offset of the `flatCoordinates`.\n * @param {number} end End offset of the `flatCoordinates`.\n * @param {number} stride Stride.\n * @return {Array<Array<number>>} Chunks of linestrings with stride 2.\n */\nexport function lineChunk(chunkLength, flatCoordinates, offset, end, stride) {\n  const chunks = [];\n  let cursor = offset;\n  let chunkM = 0;\n  let currentChunk = flatCoordinates.slice(offset, 2);\n  while (chunkM < chunkLength && cursor + stride < end) {\n    const [x1, y1] = currentChunk.slice(-2);\n    const x2 = flatCoordinates[cursor + stride];\n    const y2 = flatCoordinates[cursor + stride + 1];\n    const segmentLength = Math.sqrt(\n      (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1),\n    );\n    chunkM += segmentLength;\n    if (chunkM >= chunkLength) {\n      const m = (chunkLength - chunkM + segmentLength) / segmentLength;\n      const x = lerp(x1, x2, m);\n      const y = lerp(y1, y2, m);\n      currentChunk.push(x, y);\n      chunks.push(currentChunk);\n      currentChunk = [x, y];\n      if (chunkM == chunkLength) {\n        cursor += stride;\n      }\n      chunkM = 0;\n    } else if (chunkM < chunkLength) {\n      currentChunk.push(\n        flatCoordinates[cursor + stride],\n        flatCoordinates[cursor + stride + 1],\n      );\n      cursor += stride;\n    } else {\n      const missing = segmentLength - chunkM;\n      const x = lerp(x1, x2, missing / segmentLength);\n      const y = lerp(y1, y2, missing / segmentLength);\n      currentChunk.push(x, y);\n      chunks.push(currentChunk);\n      currentChunk = [x, y];\n      chunkM = 0;\n      cursor += stride;\n    }\n  }\n  if (chunkM > 0) {\n    chunks.push(currentChunk);\n  }\n  return chunks;\n}\n"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,eAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,WAAnB,EAAgCC,eAAhC,EAAiDC,MAAjD,EAAyDC,GAAzD,EAA8DC,MAA9D,EAAsE;EAC3E,MAAMC,MAAM,GAAG,EAAf;EACA,IAAIC,MAAM,GAAGJ,MAAb;EACA,IAAIK,MAAM,GAAG,CAAb;EACA,IAAIC,YAAY,GAAGP,eAAe,CAACQ,KAAhB,CAAsBP,MAAtB,EAA8B,CAA9B,CAAnB;;EACA,OAAOK,MAAM,GAAGP,WAAT,IAAwBM,MAAM,GAAGF,MAAT,GAAkBD,GAAjD,EAAsD;IACpD,MAAM,CAACO,EAAD,EAAKC,EAAL,IAAWH,YAAY,CAACC,KAAb,CAAmB,CAAC,CAApB,CAAjB;IACA,MAAMG,EAAE,GAAGX,eAAe,CAACK,MAAM,GAAGF,MAAV,CAA1B;IACA,MAAMS,EAAE,GAAGZ,eAAe,CAACK,MAAM,GAAGF,MAAT,GAAkB,CAAnB,CAA1B;IACA,MAAMU,aAAa,GAAGC,IAAI,CAACC,IAAL,CACpB,CAACJ,EAAE,GAAGF,EAAN,KAAaE,EAAE,GAAGF,EAAlB,IAAwB,CAACG,EAAE,GAAGF,EAAN,KAAaE,EAAE,GAAGF,EAAlB,CADJ,CAAtB;IAGAJ,MAAM,IAAIO,aAAV;;IACA,IAAIP,MAAM,IAAIP,WAAd,EAA2B;MACzB,MAAMiB,CAAC,GAAG,CAACjB,WAAW,GAAGO,MAAd,GAAuBO,aAAxB,IAAyCA,aAAnD;MACA,MAAMI,CAAC,GAAGpB,IAAI,CAACY,EAAD,EAAKE,EAAL,EAASK,CAAT,CAAd;MACA,MAAME,CAAC,GAAGrB,IAAI,CAACa,EAAD,EAAKE,EAAL,EAASI,CAAT,CAAd;MACAT,YAAY,CAACY,IAAb,CAAkBF,CAAlB,EAAqBC,CAArB;MACAd,MAAM,CAACe,IAAP,CAAYZ,YAAZ;MACAA,YAAY,GAAG,CAACU,CAAD,EAAIC,CAAJ,CAAf;;MACA,IAAIZ,MAAM,IAAIP,WAAd,EAA2B;QACzBM,MAAM,IAAIF,MAAV;MACD;;MACDG,MAAM,GAAG,CAAT;IACD,CAXD,MAWO,IAAIA,MAAM,GAAGP,WAAb,EAA0B;MAC/BQ,YAAY,CAACY,IAAb,CACEnB,eAAe,CAACK,MAAM,GAAGF,MAAV,CADjB,EAEEH,eAAe,CAACK,MAAM,GAAGF,MAAT,GAAkB,CAAnB,CAFjB;MAIAE,MAAM,IAAIF,MAAV;IACD,CANM,MAMA;MACL,MAAMiB,OAAO,GAAGP,aAAa,GAAGP,MAAhC;MACA,MAAMW,CAAC,GAAGpB,IAAI,CAACY,EAAD,EAAKE,EAAL,EAASS,OAAO,GAAGP,aAAnB,CAAd;MACA,MAAMK,CAAC,GAAGrB,IAAI,CAACa,EAAD,EAAKE,EAAL,EAASQ,OAAO,GAAGP,aAAnB,CAAd;MACAN,YAAY,CAACY,IAAb,CAAkBF,CAAlB,EAAqBC,CAArB;MACAd,MAAM,CAACe,IAAP,CAAYZ,YAAZ;MACAA,YAAY,GAAG,CAACU,CAAD,EAAIC,CAAJ,CAAf;MACAZ,MAAM,GAAG,CAAT;MACAD,MAAM,IAAIF,MAAV;IACD;EACF;;EACD,IAAIG,MAAM,GAAG,CAAb,EAAgB;IACdF,MAAM,CAACe,IAAP,CAAYZ,YAAZ;EACD;;EACD,OAAOH,MAAP;AACD"},"metadata":{},"sourceType":"module"}