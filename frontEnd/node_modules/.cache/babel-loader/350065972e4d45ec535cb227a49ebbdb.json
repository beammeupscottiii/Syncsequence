{"ast":null,"code":"var _jsxFileName = \"/home/jce/Web Dev Space/Syncsequence/frontEnd/src/Base.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n/* * * B a s e  L a y e r * * */\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { useNavigate } from 'react-router-dom';\nimport { createBrowserRouter, RouterProvider, Navigate, useLocation } from \"react-router-dom\";\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { UIContextProvider, useUIC } from './UIcontext';\nimport APIaccess from './apiaccess';\nimport CalInfo from './components/calInfo'; // import {UIContextProvider, UIContext} from './UIcontext';\n\nimport './Base.css';\nimport './components/base/home.css';\n/* * * C o m p o n e n t s * * */\n\nimport Entry from './components/entry/entry';\nimport Header from './cmpnts/Header/Header';\nimport NotificationList from './components/notifs/notifsList';\nimport { Navbar, Navmenu } from './cmpnts/Nav/Nav';\nimport SectionWrapper from './cmpnts/SectionWrapper/SectionWrapper';\nimport ButtonBar from './components/base/buttonBar';\nimport SectionsWrapper from './components/sections/sectionsWrapper';\nimport Macrospage from './components/macrospage/macrospage';\nimport Post from './components/blog/post';\nimport Instant from './components/notifs/instant';\nimport UserSettings from './components/base/userSettings';\nimport UserProfile from './components/base/userProfile';\nimport AboutPage from './components/base/aboutPage';\n/*\r\n  09. 16. 2025\r\n  These will technically be temporary\r\n*/\n\nimport UserLog from './components/sections/userLog';\nimport SocialLog from './components/sections/socialLog';\nimport Macros from './components/sections//macros';\n/*** Sub Sections ***/\n\nimport { CreatePost } from './components/sections/userLog';\nimport { ManageConnections } from './components/sections/socialLog';\nimport { ManageMacros } from './components/sections/macros';\nimport Calendar from './components/calendar/calendar';\nimport MapComponent from './components/map/map';\nimport { MapPage } from './components/map/map';\nimport DragSlider from './components/base/dragSlider';\nimport './components/sections/sections.css';\nimport CustomLogEditor from './components/base/customLogEditor/customLogEditor';\n/* * * I n i t i a l i z e * * */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst accessAPI = APIaccess();\n/* * * Supporting Functions * * */\n\nfunction HomeOrEntry(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    authed\n  } = useUIC();\n  const location = useLocation();\n  return authed === true ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/entry\",\n    replace: true,\n    state: {\n      path: location.pathname\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 43\n  }, this);\n}\n/* * * H O M E  C o m p o n e n t * * */\n\n\n_s(HomeOrEntry, \"FORc37THoRdWT0RqYfmrH+X9fbU=\", false, function () {\n  return [useUIC, useLocation];\n});\n\n_c = HomeOrEntry;\n\nfunction Home(_ref2) {\n  _s2();\n\n  let {\n    userDocumentSettings,\n    setUserDocumentSettings,\n    socketURL,\n    socketMessage,\n    setSocketMessage,\n    sendMessage,\n    isActive,\n    setActive,\n    accessID,\n    setAccessID,\n    unreadCount,\n    setUnreadCount,\n    getUnreadCount,\n    current,\n    setCurrent,\n    cal,\n    selectedDate,\n    setSelectedDate,\n    mapData,\n    setMapData,\n    log,\n    setLog,\n    navOptions,\n    setNavOptions,\n    tags,\n    setTags,\n    userTopics,\n    setUserTopics,\n    sectionClass,\n    setSectionClass\n  } = _ref2;\n  const navigate = useNavigate();\n  const {\n    logout\n  } = useUIC();\n  const [notifList, setNotifList] = React.useReducer(state => !state, false);\n  const [userSettings, setUserSettings] = React.useReducer(state => !state, false);\n  const [isLogout, setLogout] = React.useReducer(state => !state, false);\n  const isPost = false;\n  const [dateInView, set_dateInView] = React.useState({\n    month: null,\n    day: null,\n    year: null\n  });\n  const [enter, setEnter] = React.useReducer(state => !state, true);\n  let el = React.useRef();\n  let element = el.current;\n  React.useEffect(() => {\n    getUnreadCount();\n\n    if (element) {\n      setEnter();\n    }\n  }, [element]);\n  React.useEffect(() => {\n    let topics = sessionStorage.getItem('topicsAsString');\n    topics = topics.split(', ');\n    setUserTopics(topics);\n    document.title = 'Syncseq.xyz/home';\n  }, []);\n  /* \r\n    09. 16. 2025\r\n    Temporarily placed within BASE as it's necessary for home feed\r\n  */\n\n  let updateLog = async () => {\n    let posts = await accessAPI.pullUserLog({\n      type: 'customLog',\n      logNumber: current.log\n    });\n    setLog(posts);\n  };\n\n  React.useEffect(() => {\n    updateLog();\n    setCurrent({ ...current,\n      social: false\n    });\n  }, []);\n  React.useEffect(() => {\n    updateLog();\n  }, [current.modal, current.customizer]);\n  /*\r\n      09. 19. 2025\r\n      section refs should also be within UIC\r\n      temporary placement\r\n  */\n\n  let homeRef = React.useRef();\n  let macrosRef = React.useRef();\n  let socialRef = React.useRef();\n  /* \r\n    09. 20. 2025\r\n    For Scroll Tracking on div#sections\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"BASE\",\n    ref: el,\n    className: `${enter == true ? '_enter' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      cal: cal,\n      isPost: isPost,\n      setNotifList: setNotifList,\n      unreadCount: unreadCount,\n      children: /*#__PURE__*/_jsxDEV(Navbar, {\n        current: current,\n        setCurrent: setCurrent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this), current.navmenu && /*#__PURE__*/_jsxDEV(Navmenu, {\n      current: current,\n      setCurrent: setCurrent,\n      sectionClass: sectionClass,\n      setSectionClass: setSectionClass,\n      homeRef: homeRef,\n      macrosRef: macrosRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }, this), notifList && /*#__PURE__*/_jsxDEV(NotificationList, {\n      setNotifList: setNotifList,\n      unreadCount: unreadCount,\n      setUnreadCount: setUnreadCount,\n      setSocketMessage: setSocketMessage,\n      socketMessage: socketMessage,\n      accessID: accessID,\n      setAccessID: setAccessID,\n      setUserSettings: setUserSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(SectionWrapper, {\n      children: [current.section == 'social' && /*#__PURE__*/_jsxDEV(SocialLog, {\n        current: current,\n        setCurrent: setCurrent,\n        log: log,\n        setLog: setLog,\n        sectionClass: sectionClass\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this), current.section == 'home' && /*#__PURE__*/_jsxDEV(UserLog, {\n        current: current,\n        setCurrent: setCurrent,\n        log: log,\n        setLog: setLog,\n        sectionClass: sectionClass,\n        refe: homeRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this), current.section == 'macros' && /*#__PURE__*/_jsxDEV(Macros, {\n        current: current,\n        setCurrent: setCurrent,\n        tags: tags,\n        setTags: setTags,\n        userTopics: userTopics,\n        setUserTopics: setUserTopics,\n        sectionClass: sectionClass,\n        refe: macrosRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this), !current.map && current.modal && current.section == 1 && /*#__PURE__*/_jsxDEV(CreatePost, {\n      setCurrent: setCurrent,\n      current: current,\n      socketMessage: socketMessage,\n      setSocketMessage: setSocketMessage,\n      selectedDate: selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 11\n    }, this), !current.map && current.modal && current.section == 0 && /*#__PURE__*/_jsxDEV(ManageConnections, {\n      current: current,\n      setCurrent: setCurrent,\n      setSocketMessage: setSocketMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }, this), !current.map && current.modal && current.section == 2 && /*#__PURE__*/_jsxDEV(ManageMacros, {\n      current: current,\n      setCurrent: setCurrent,\n      socketMessage: socketMessage,\n      setSocketMessage: setSocketMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"sectionOptions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }, this), current.gallery.length > 0 && /*#__PURE__*/_jsxDEV(DragSlider, {\n      current: current,\n      setCurrent: setCurrent,\n      siteLocation: 'home'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }, this), current.calendar && /*#__PURE__*/_jsxDEV(Calendar, {\n      setCurrent: setCurrent,\n      current: current,\n      cal: cal,\n      set_dateInView: set_dateInView,\n      selectedDate: selectedDate,\n      setSelectedDate: setSelectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 11\n    }, this), current.map && /*#__PURE__*/_jsxDEV(MapComponent, {\n      setCurrent: setCurrent,\n      current: current,\n      log: log,\n      selectedDate: selectedDate,\n      setSelectedDate: setSelectedDate,\n      cal: cal,\n      setSocketMessage: setSocketMessage,\n      userDocumentSettings: userDocumentSettings,\n      setUserDocumentSettings: setUserDocumentSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 11\n    }, this), current.customizer && /*#__PURE__*/_jsxDEV(CustomLogEditor, {\n      current: current,\n      setCurrent: setCurrent,\n      setSocketMessage: setSocketMessage,\n      socketMessage: setSocketMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Instant, {\n      socketMessage: socketMessage,\n      setSocketMessage: setSocketMessage,\n      sendMessage: sendMessage,\n      isActive: isActive,\n      setActive: setActive,\n      accessID: accessID,\n      setAccessID: setAccessID,\n      getUnreadCount: getUnreadCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Home, \"0AT8igMPjJhIB3nyaD+gOGZsj4I=\", false, function () {\n  return [useNavigate, useUIC];\n});\n\n_c2 = Home;\nexport default function Main() {\n  _s3();\n\n  /**\r\n   * W e b  S o c k e t\r\n   * A n d\r\n   * N o t i f i c a t i o n s\r\n   */\n  const {\n    authed,\n    userDocumentSettings,\n    setUserDocumentSettings\n  } = useUIC();\n  let userID = sessionStorage.getItem('userID');\n  /***\r\n   * S O C K E T  S T U F F\r\n  ***/\n\n  const [socketURL, setSocketURL] = React.useState(``);\n  const {\n    sendMessage,\n    lastMessage,\n    readyState\n  } = useWebSocket(socketURL);\n  const [socketMessage, setSocketMessage] = React.useState({\n    type: null,\n    message: null\n  });\n  const [accessID, setAccessID] = React.useState({});\n  const [isActive, setActive] = React.useState({\n    type: null,\n    //type of popUp notif to appear\n    state: null //set class for it to popUp \n\n  });\n  /**\r\n   * Connects to webSocket server upon verifying user log in\r\n   * & gets unreadNotif count\r\n   */\n\n  React.useEffect(() => {\n    if (authed == true) {\n      setSocketURL(`ws://172.20.22.241:3333/?${userID}`);\n      getUnreadCount();\n    }\n  }, [authed]); // need to implement reconnect redundancy here\n\n  React.useEffect(() => {\n    if (readyState === ReadyState.OPEN) {\n      console.log('Websocket connection established');\n    } else if (readyState === ReadyState.CLOSED) {\n      console.log('socket connection has closed');\n    }\n  }, [readyState]);\n  /**\r\n   * when socket connection R E C I E V E S messages\r\n   */\n\n  useWebSocket(socketURL, {\n    onMessage: e => {\n      let data = JSON.parse(e.data);\n      let details;\n\n      if (data.details) {\n        details = JSON.parse(data.details);\n      }\n\n      console.log(data); // if(data.recipients.includes(userID) {\n      //need to implement\n      // })\n\n      if (data.type == 'request' && data.message == 'connectionRequestRecieved') {\n        setSocketMessage(data);\n        setAccessID({ ...accessID,\n          accept: data.senderID,\n          notifID: data.originalID\n        });\n        setActive({\n          type: 3,\n          state: true\n        });\n        console.log(data);\n        console.log(accessID);\n      } else if (data.type == 'request' && data.message == 'connectionAcceptedRecieved') {\n        setSocketMessage({\n          senderUsername: data.senderUsername,\n          type: 'request',\n          message: 'connectionAcceptedRecieved'\n        });\n        setActive({\n          type: 1,\n          state: true\n        });\n      } else if (data.type == 'comment' && data.message == 'initial-recieved') {\n        setSocketMessage({\n          senderUsername: data.senderUsername,\n          type: 'comment',\n          message: 'initial-recieved',\n          postTitle: data.postTitle\n        });\n        setActive({\n          type: 2,\n          state: true\n        }); // setAccessID({ postURL: data.postURL, notifID: data._id, commentID: details.commentID });\n\n        setAccessID({\n          postURL: data.postURL,\n          notifID: data._id\n        });\n        console.log(data);\n      } else if (data.type == 'comment' && data.message == 'response-recieved') {\n        setSocketMessage({\n          senderUsername: data.senderUsername,\n          type: 'comment',\n          message: 'response-recieved',\n          postTitle: data.postTitle\n        });\n        setActive({\n          type: 2,\n          state: true\n        }); // setAccessID({ postURL: data.postURL, notifID: data._id, commentID: details.commentID });\n\n        setAccessID({\n          postURL: data.postURL,\n          notifID: data._id\n        });\n        console.log(data);\n      } else if (data.type == 'tagging' && data.message == 'recieved') {\n        setSocketMessage(data);\n        setActive({\n          type: 2,\n          state: true\n        });\n        setAccessID({\n          postURL: data.url,\n          notifID: data._id\n        });\n      } else if (data.type == 'request' && data.message == 'subscriptionRequestRecieved') {\n        setSocketMessage({\n          //create text in instants for subscription request notif\n          //need requester username, message type and message...\n          senderUsername: data.senderUsername,\n          message: 'subscriptionRequestRecieved',\n          type: 'request',\n          data: data\n        });\n        setAccessID({ ...accessID,\n          accept: data.senderID,\n          notifID: data.originalID\n        });\n        setActive({\n          type: 3,\n          state: true\n        });\n      } else if (data.type == 'request' && data.message == 'subscriptionAccepted') {\n        setSocketMessage({\n          //create text in instants for subscription request notif\n          //need requester username, message type and message...\n          senderUsername: data.senderUsername,\n          message: 'subscriptionAccepted',\n          type: 'request'\n        });\n        setAccessID({ ...accessID,\n          accept: data.senderID,\n          notifID: data.originalID\n        });\n        setActive({\n          type: 1,\n          state: true\n        });\n      } else if (data.type == 'request' && data.message == 'subscribed') {\n        setSocketMessage({\n          //create text in instants for subscription request notif\n          //need requester username, message type and message...\n          senderUsername: data.senderUsername,\n          message: 'subscribed',\n          type: 'request'\n        });\n        setAccessID({ ...accessID,\n          accept: data.senderID,\n          notifID: data.originalID\n        });\n        setActive({\n          type: 1,\n          state: true\n        });\n      } else if (data.type == 'updateNotifs') {\n        getUnreadCount();\n        setSocketMessage({\n          type: 'simpleNotif',\n          message: `New notifications!`\n        });\n      }\n    },\n    shouldReconnect: event => true,\n    reconnectAttempts: 10\n  });\n  const [sectionClass, setSectionClass] = React.useState({\n    profile: 'enter',\n    social: 'enter',\n    home: 'enter',\n    macros: 'enter',\n    settings: 'enter'\n  });\n  const [current, setCurrent] = React.useState({\n    section: 'home',\n    //0, 1, 2, 3, 4\n    social: false,\n    //true, false or social\n    calendar: false,\n    //true or false\n    map: false,\n    scrollTo: null,\n    currentLog: null,\n    modal: false,\n    //for <UserProfile>, when user leaves page via a fullList, ensures modal is still up\n    customizer: false,\n    transition: false,\n    //for components mounted dependant on this stateVar, indicates before unmount\n    gallery: [],\n    //for dragslider. should be an array of links\n    log: 0,\n    navmenu: false\n  });\n  const cal = CalInfo();\n  const hajime = new Date(),\n        kyou = hajime.getDate(),\n        kongetsu = hajime.getMonth(),\n        kotoshi = hajime.getFullYear();\n  const [selectedDate, setSelectedDate] = React.useState({\n    day: null,\n    month: null,\n    year: null\n  });\n  const [mapData, setMapData] = React.useState({\n    currentCity: 'NY',\n    currentState: 'NYC'\n  });\n  let [initialLogin, setInitialLogin] = React.useState(true);\n\n  if (initialLogin == true) {\n    setCurrent({ ...current,\n      section: 'home'\n    });\n    setInitialLogin(false);\n  }\n\n  const [unreadCount, setUnreadCount] = React.useState('');\n  /**\r\n   * Fetches unread count of interactions on initial load\r\n   * and when new interactions occur\r\n   */\n\n  let getUnreadCount = async () => {\n    let count = await accessAPI.getInteractions('count');\n\n    if (count > 99) {\n      count = '99';\n    }\n\n    setUnreadCount(count);\n  };\n\n  React.useEffect(() => {\n    getUnreadCount();\n  }, [socketMessage]);\n  /*\r\n    Top level state array to house log of posts\r\n    Changes whenever a new section becomes active\r\n  */\n\n  const [log, setLog] = React.useState([]);\n  /* Top Level state for tags */\n\n  const [tags, setTags] = React.useState([]);\n  /*\r\n    For macrospage to discern whether a user already has a topic saved to their profile\r\n  */\n\n  const [userTopics, setUserTopics] = React.useState([]);\n  /*\r\n      State array for keeping track of current section in carousel nav\r\n      top level, so it's maintained across pages\r\n  */\n\n  const [navOptions, setNavOptions] = React.useState([{\n    name: \"Social\",\n    active: false,\n    key: 1\n  }, {\n    name: \"User\",\n    active: true,\n    key: 2\n  }, //middle is default\n  {\n    name: \"Macros\",\n    active: false,\n    key: 3\n  }]);\n  const routerObject = createBrowserRouter([// E N T R Y \n  {\n    path: \"/entry\",\n    element: /*#__PURE__*/_jsxDEV(Entry, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 16\n    }, this)\n  }, // R O O T\n  {\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(HomeOrEntry, {\n      children: /*#__PURE__*/_jsxDEV(Home, {\n        userDocumentSettings: userDocumentSettings,\n        setUserDocumentSettings: setUserDocumentSettings // socket & notif stuff \n        ,\n        socketURL: socketURL,\n        socketMessage: socketMessage,\n        setSocketMessage: setSocketMessage,\n        sendMessage: sendMessage,\n        isActive: isActive,\n        setActive: setActive,\n        accessID: accessID,\n        setAccessID: setAccessID,\n        unreadCount: unreadCount,\n        setUnreadCount: setUnreadCount,\n        getUnreadCount: getUnreadCount,\n        lastMessage: lastMessage // socket & notif stuff\n        ,\n        cal: cal,\n        current: current,\n        setCurrent: setCurrent,\n        selectedDate: selectedDate,\n        setSelectedDate: setSelectedDate,\n        mapData: mapData,\n        setMapData: setMapData,\n        log: log,\n        setLog: setLog,\n        tags: tags,\n        setTags: setTags,\n        userTopics: userTopics,\n        setUserTopics: setUserTopics,\n        navOptions: navOptions,\n        setNavOptions: setNavOptions,\n        sectionClass: sectionClass,\n        setSectionClass: setSectionClass\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 9\n    }, this)\n  }, // H O M E\n  {\n    path: '/home',\n    element: /*#__PURE__*/_jsxDEV(HomeOrEntry, {\n      children: /*#__PURE__*/_jsxDEV(Home // socket & notif stuff\n      , {\n        socketURL: socketURL,\n        socketMessage: socketMessage,\n        setSocketMessage: setSocketMessage,\n        sendMessage: sendMessage,\n        isActive: isActive,\n        setActive: setActive,\n        accessID: accessID,\n        setAccessID: setAccessID,\n        unreadCount: unreadCount,\n        setUnreadCount: setUnreadCount,\n        getUnreadCount: getUnreadCount,\n        lastMessage: lastMessage // socket & notif stuff\n        ,\n        cal: cal,\n        current: current,\n        setCurrent: setCurrent,\n        selectedDate: selectedDate,\n        setSelectedDate: setSelectedDate,\n        mapData: mapData,\n        setMapData: setMapData,\n        log: log,\n        setLog: setLog,\n        tags: tags,\n        setTags: setTags,\n        userTopics: userTopics,\n        setUserTopics: setUserTopics,\n        navOptions: navOptions,\n        setNavOptions: setNavOptions,\n        sectionClass: sectionClass,\n        setSectionClass: setSectionClass\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 705,\n      columnNumber: 9\n    }, this)\n  }, // P O S T\n  {\n    path: '/post/:postID',\n    loader: async _ref3 => {\n      let {\n        params\n      } = _ref3;\n      let request = await accessAPI.getBlogPost(params.postID);\n      return request;\n    },\n    element: /*#__PURE__*/_jsxDEV(HomeOrEntry, {\n      children: /*#__PURE__*/_jsxDEV(Post // socket stuff\n      , {\n        socketURL: socketURL,\n        socketMessage: socketMessage,\n        setSocketMessage: setSocketMessage,\n        sendMessage: sendMessage,\n        isActive: isActive,\n        setActive: setActive,\n        accessID: accessID,\n        setAccessID: setAccessID,\n        unreadCount: unreadCount,\n        setUnreadCount: setUnreadCount,\n        getUnreadCount: getUnreadCount,\n        lastMessage: lastMessage,\n        current: current,\n        setCurrent: setCurrent,\n        selectedDate: selectedDate,\n        setSelectedDate: setSelectedDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 9\n    }, this)\n  }, //M A C R O S P A G E\n  {\n    path: '/macros/:macroname/:macroid',\n    loader: async _ref4 => {\n      let {\n        params\n      } = _ref4;\n      let macroInfo = await accessAPI.getTagData(params.macroid, params.macroname);\n      let macroPosts = await accessAPI.groupPosts({\n        action: 'getPosts',\n        groupID: params.macroid,\n        groupName: params.macroname\n      });\n      let doesHaveAccess;\n\n      if (macroInfo.response == 'topic') {\n        macroInfo.userHasAccess = macroInfo.hasAccess; // macroInfo._id = 'topic';\n      } // else if(macroInfo.hasAccess) {\n      else {\n        doesHaveAccess = macroInfo.hasAccess.filter(el => el == userID);\n        doesHaveAccess = doesHaveAccess.length > 0 ? true : false;\n        macroInfo.userHasAccess = doesHaveAccess;\n      }\n\n      macroInfo.name = macroInfo.name ? macroInfo.name : params.macroname;\n      macroInfo.ownerUsername = macroInfo.adminUsernames ? macroInfo.adminUsernames[0] : null;\n      macroInfo.ownerID = macroInfo.admins ? macroInfo.admins[0] : null;\n      macroInfo.type = macroInfo.type == undefined ? 'topic' : macroInfo.type;\n      macroInfo.userCount = macroInfo.hasAccess ? macroInfo.hasAccess.length : null;\n      macroInfo.postCount = macroPosts.length ? macroPosts.length : 0;\n      return {\n        macroInfo,\n        macroPosts\n      };\n    },\n    element: /*#__PURE__*/_jsxDEV(HomeOrEntry, {\n      children: /*#__PURE__*/_jsxDEV(Macrospage // socket stuff\n      , {\n        socketURL: socketURL,\n        socketMessage: socketMessage,\n        setSocketMessage: setSocketMessage,\n        sendMessage: sendMessage,\n        isActive: isActive,\n        setActive: setActive,\n        accessID: accessID,\n        setAccessID: setAccessID,\n        unreadCount: unreadCount,\n        setUnreadCount: setUnreadCount,\n        getUnreadCount: getUnreadCount,\n        lastMessage: lastMessage,\n        current: current,\n        setCurrent: setCurrent // socket stuff\n        ,\n        selectedDate: selectedDate,\n        setSelectedDate: setSelectedDate,\n        tags: tags,\n        setTags: setTags,\n        userTopics: userTopics,\n        setUserTopics: setUserTopics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 805,\n      columnNumber: 9\n    }, this)\n  }, //U S E R  P R O F I L E\n  {\n    path: '/user/:username/:userid',\n    loader: async _ref5 => {\n      let {\n        params\n      } = _ref5;\n      let data = await accessAPI.getSingleUser(params.userid);\n      return data;\n    },\n    element: /*#__PURE__*/_jsxDEV(HomeOrEntry, {\n      children: /*#__PURE__*/_jsxDEV(UserProfile // socket stuff\n      , {\n        socketURL: socketURL,\n        socketMessage: socketMessage,\n        setSocketMessage: setSocketMessage,\n        sendMessage: sendMessage,\n        isActive: isActive,\n        setActive: setActive,\n        accessID: accessID,\n        setAccessID: setAccessID,\n        unreadCount: unreadCount,\n        setUnreadCount: setUnreadCount,\n        getUnreadCount: getUnreadCount,\n        lastMessage: lastMessage,\n        current: current,\n        setCurrent: setCurrent // socket stuff\n        ,\n        selectedDate: selectedDate,\n        setSelectedDate: setSelectedDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 840,\n      columnNumber: 9\n    }, this)\n  }, //U S E R  S E T T I N G S\n  {\n    path: '/:username/settings',\n    loader: async _ref6 => {\n      let {\n        params\n      } = _ref6;\n      let data = await accessAPI.userSettings({\n        option: 'getUserSettings'\n      });\n      return data;\n    },\n    element: /*#__PURE__*/_jsxDEV(HomeOrEntry, {\n      children: /*#__PURE__*/_jsxDEV(UserSettings, {\n        setSocketMessage: setSocketMessage,\n        socketURL: socketURL,\n        socketMessage: socketMessage,\n        sendMessage: sendMessage,\n        isActive: isActive,\n        setActive: setActive,\n        setAccessID: setAccessID,\n        accessID: accessID,\n        getUnreadCount: getUnreadCount,\n        current: current,\n        setCurrent: setCurrent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 871,\n      columnNumber: 9\n    }, this)\n  }, //A B O U T \n  {\n    path: '/about',\n    loader: async _ref7 => {\n      let {\n        params\n      } = _ref7;\n      let data = await accessAPI.getProjectPublicStats();\n      return data;\n    },\n    element: /*#__PURE__*/_jsxDEV(AboutPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 895,\n      columnNumber: 9\n    }, this)\n  }]);\n  return /*#__PURE__*/_jsxDEV(UIContextProvider, {\n    children: /*#__PURE__*/_jsxDEV(RouterProvider, {\n      router: routerObject\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 901,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 900,\n    columnNumber: 7\n  }, this);\n}\n\n_s3(Main, \"MVyyeF1WrW7z1SfMRQiKMKim8+E=\", false, function () {\n  return [useUIC, useWebSocket, useWebSocket];\n});\n\n_c3 = Main;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"HomeOrEntry\");\n$RefreshReg$(_c2, \"Home\");\n$RefreshReg$(_c3, \"Main\");","map":{"version":3,"names":["React","ReactDOM","useNavigate","createBrowserRouter","RouterProvider","Navigate","useLocation","useWebSocket","ReadyState","UIContextProvider","useUIC","APIaccess","CalInfo","Entry","Header","NotificationList","Navbar","Navmenu","SectionWrapper","ButtonBar","SectionsWrapper","Macrospage","Post","Instant","UserSettings","UserProfile","AboutPage","UserLog","SocialLog","Macros","CreatePost","ManageConnections","ManageMacros","Calendar","MapComponent","MapPage","DragSlider","CustomLogEditor","accessAPI","HomeOrEntry","children","authed","location","path","pathname","Home","userDocumentSettings","setUserDocumentSettings","socketURL","socketMessage","setSocketMessage","sendMessage","isActive","setActive","accessID","setAccessID","unreadCount","setUnreadCount","getUnreadCount","current","setCurrent","cal","selectedDate","setSelectedDate","mapData","setMapData","log","setLog","navOptions","setNavOptions","tags","setTags","userTopics","setUserTopics","sectionClass","setSectionClass","navigate","logout","notifList","setNotifList","useReducer","state","userSettings","setUserSettings","isLogout","setLogout","isPost","dateInView","set_dateInView","useState","month","day","year","enter","setEnter","el","useRef","element","useEffect","topics","sessionStorage","getItem","split","document","title","updateLog","posts","pullUserLog","type","logNumber","social","modal","customizer","homeRef","macrosRef","socialRef","navmenu","section","map","gallery","length","calendar","Main","userID","setSocketURL","lastMessage","readyState","message","OPEN","console","CLOSED","onMessage","e","data","JSON","parse","details","accept","senderID","notifID","originalID","senderUsername","postTitle","postURL","_id","url","shouldReconnect","event","reconnectAttempts","profile","home","macros","settings","scrollTo","currentLog","transition","hajime","Date","kyou","getDate","kongetsu","getMonth","kotoshi","getFullYear","currentCity","currentState","initialLogin","setInitialLogin","count","getInteractions","name","active","key","routerObject","loader","params","request","getBlogPost","postID","macroInfo","getTagData","macroid","macroname","macroPosts","groupPosts","action","groupID","groupName","doesHaveAccess","response","userHasAccess","hasAccess","filter","ownerUsername","adminUsernames","ownerID","admins","undefined","userCount","postCount","getSingleUser","userid","option","getProjectPublicStats"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/src/Base.jsx"],"sourcesContent":["/* * * B a s e  L a y e r * * */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {\r\n  createBrowserRouter,\r\n  RouterProvider,\r\n  Navigate,\r\n  useLocation\r\n} from \"react-router-dom\";\r\nimport useWebSocket, {ReadyState} from 'react-use-websocket';\r\nimport { UIContextProvider, useUIC } from './UIcontext';\r\nimport APIaccess from './apiaccess';\r\nimport CalInfo from './components/calInfo'\r\n// import {UIContextProvider, UIContext} from './UIcontext';\r\n\r\nimport './Base.css';\r\nimport './components/base/home.css';\r\n\r\n/* * * C o m p o n e n t s * * */\r\nimport Entry from './components/entry/entry';\r\nimport Header from './cmpnts/Header/Header';\r\nimport NotificationList from './components/notifs/notifsList';\r\nimport { Navbar, Navmenu } from './cmpnts/Nav/Nav';\r\nimport SectionWrapper from './cmpnts/SectionWrapper/SectionWrapper';\r\nimport ButtonBar from './components/base/buttonBar';\r\nimport SectionsWrapper from './components/sections/sectionsWrapper';\r\nimport Macrospage from './components/macrospage/macrospage';\r\nimport Post from './components/blog/post';\r\nimport Instant from './components/notifs/instant';\r\nimport UserSettings from './components/base/userSettings';\r\nimport UserProfile from './components/base/userProfile';\r\nimport AboutPage from './components/base/aboutPage';\r\n\r\n\r\n/*\r\n  09. 16. 2025\r\n  These will technically be temporary\r\n*/\r\nimport UserLog from './components/sections/userLog';\r\nimport SocialLog from './components/sections/socialLog';\r\nimport Macros from './components/sections//macros';\r\n\r\n/*** Sub Sections ***/\r\nimport { CreatePost } from './components/sections/userLog';\r\nimport { ManageConnections } from './components/sections/socialLog';\r\nimport { ManageMacros } from './components/sections/macros';\r\nimport Calendar from './components/calendar/calendar';\r\nimport MapComponent from './components/map/map';\r\nimport { MapPage } from './components/map/map';\r\nimport DragSlider from './components/base/dragSlider';\r\nimport './components/sections/sections.css';\r\nimport CustomLogEditor from './components/base/customLogEditor/customLogEditor';\r\n\r\n\r\n/* * * I n i t i a l i z e * * */\r\nconst accessAPI = APIaccess();\r\n\r\n\r\n\r\n\r\n/* * * Supporting Functions * * */\r\nfunction HomeOrEntry({ children }) {\r\n\r\n  const { authed } = useUIC();\r\n  const location = useLocation();\r\n\r\n  return authed === true ? ( children ) : <Navigate to=\"/entry\" replace state={{ path: location.pathname }} />\r\n}\r\n\r\n/* * * H O M E  C o m p o n e n t * * */\r\nfunction Home({\r\n  userDocumentSettings,\r\n  setUserDocumentSettings,\r\n  socketURL, \r\n  socketMessage, \r\n  setSocketMessage, \r\n  sendMessage, \r\n  isActive, \r\n  setActive, \r\n  accessID, \r\n  setAccessID, \r\n  unreadCount, \r\n  setUnreadCount,\r\n  getUnreadCount,\r\n  current,\r\n  setCurrent,\r\n  cal,\r\n  selectedDate,\r\n  setSelectedDate,\r\n  mapData,\r\n  setMapData,\r\n  log,\r\n  setLog,\r\n  navOptions,\r\n  setNavOptions,\r\n  tags,\r\n  setTags,\r\n  userTopics,\r\n  setUserTopics,\r\n  sectionClass,\r\n  setSectionClass\r\n}) {\r\n\r\n  const navigate = useNavigate();\r\n  const { logout } = useUIC();\r\n  const [notifList, setNotifList] = React.useReducer(state => !state, false);\r\n  const [userSettings, setUserSettings] = React.useReducer(state => !state, false);\r\n  const [isLogout, setLogout] = React.useReducer(state => !state, false);\r\n  const isPost = false;\r\n  const [dateInView, set_dateInView] = React.useState({\r\n    month: null,\r\n    day: null,\r\n    year: null,\r\n  })\r\n\r\n  const [enter, setEnter] = React.useReducer(state => !state, true);\r\n  \r\n  let el = React.useRef();\r\n  let element = el.current\r\n\r\n  React.useEffect(()=> {\r\n    getUnreadCount();\r\n    if(element) {\r\n      setEnter();\r\n    }\r\n  }, [element]);\r\n\r\n  React.useEffect(()=> {\r\n      let topics = sessionStorage.getItem('topicsAsString');\r\n      topics = topics.split(', ');\r\n      setUserTopics(topics);\r\n\r\n      document.title = 'Syncseq.xyz/home'\r\n  }, [])\r\n\r\n  /* \r\n    09. 16. 2025\r\n    Temporarily placed within BASE as it's necessary for home feed\r\n  */\r\n  let updateLog = async() => {\r\n\r\n    let posts = await accessAPI.pullUserLog({type: 'customLog', logNumber: current.log})\r\n    setLog(posts);\r\n  } \r\n\r\n  React.useEffect(()=> {\r\n    updateLog()\r\n    setCurrent({\r\n      ...current,\r\n      social: false\r\n    })\r\n  }, [])\r\n\r\n  React.useEffect(()=> {\r\n    updateLog()\r\n  }, [current.modal, current.customizer])\r\n\r\n  /*\r\n      09. 19. 2025\r\n      section refs should also be within UIC\r\n      temporary placement\r\n  */\r\n  let homeRef = React.useRef();\r\n  let macrosRef = React.useRef();\r\n  let socialRef = React.useRef();\r\n\r\n\r\n\r\n  /* \r\n    09. 20. 2025\r\n    For Scroll Tracking on div#sections\r\n  */ \r\n\r\n\r\n\r\n  return (\r\n    <section id=\"BASE\" ref={el} className={`${enter == true ? '_enter' : ''}`}>  \r\n        <Header \r\n          cal={cal} \r\n          isPost={isPost} \r\n          setNotifList={setNotifList} \r\n          unreadCount={unreadCount}> \r\n          \r\n\r\n          <Navbar current={current} \r\n                  setCurrent={setCurrent}/>\r\n        </Header>\r\n\r\n        \r\n\r\n        {current.navmenu &&\r\n          <Navmenu current={current}\r\n                   setCurrent={setCurrent}\r\n                   sectionClass={sectionClass}\r\n                   setSectionClass={setSectionClass}\r\n                   homeRef={homeRef}\r\n                   macrosRef={macrosRef}/>\r\n        }\r\n\r\n        {notifList &&\r\n          <NotificationList \r\n            setNotifList={setNotifList} \r\n            unreadCount={unreadCount}\r\n            setUnreadCount={setUnreadCount}\r\n            setSocketMessage={setSocketMessage}\r\n            socketMessage={socketMessage}\r\n            accessID={accessID}\r\n            setAccessID={setAccessID}\r\n            setUserSettings={setUserSettings}/>\r\n        }\r\n\r\n        <SectionWrapper>\r\n          {current.section == 'social' &&\r\n            <SocialLog\r\n                  current={current}\r\n                  setCurrent={setCurrent} \r\n                  log={log}\r\n                  setLog={setLog}\r\n                  sectionClass={sectionClass}/>\r\n          }\r\n          {current.section == 'home' &&\r\n            <UserLog  \r\n                current={current} \r\n                setCurrent={setCurrent} \r\n                log={log}\r\n                setLog={setLog}\r\n                sectionClass={sectionClass}\r\n                refe={homeRef}/>\r\n          }\r\n          {current.section == 'macros' &&\r\n            <Macros  \r\n                current={current} \r\n                setCurrent={setCurrent}\r\n                tags={tags}\r\n                setTags={setTags} \r\n                userTopics={userTopics}\r\n                setUserTopics={setUserTopics}\r\n                sectionClass={sectionClass}\r\n                refe={macrosRef}/>\r\n          }\r\n        </SectionWrapper>\r\n\r\n        {(!current.map &&( current.modal && current.section == 1)) &&\r\n          <CreatePost setCurrent={setCurrent}\r\n                      current={current} \r\n                      socketMessage={socketMessage}\r\n                      setSocketMessage={setSocketMessage} \r\n                      selectedDate={selectedDate}/>\r\n        }\r\n        {(!current.map &&( current.modal && current.section == 0)) &&\r\n          <ManageConnections current={current} \r\n                             setCurrent={setCurrent} \r\n                             setSocketMessage={setSocketMessage}/>\r\n        }\r\n\r\n        {(!current.map &&( current.modal && current.section == 2)) &&\r\n          <ManageMacros current={current} \r\n                        setCurrent={setCurrent} \r\n                        socketMessage={socketMessage}\r\n                        setSocketMessage={setSocketMessage}/>\r\n        }\r\n\r\n        {/*<ButtonBar cal={cal} \r\n                   current={current} \r\n                   setCurrent={setCurrent}\r\n                   dateInView={dateInView}\r\n                   set_dateInView={set_dateInView}\r\n                   current={current}\r\n                   setCurrent={setCurrent}\r\n                   selectedDate={selectedDate}\r\n                   setSelectedDate={setSelectedDate}\r\n                   mapData={mapData}\r\n                   setMapData={setMapData}/>*/}\r\n\r\n        {/*\r\n          09. 18. 2025\r\n          Temporary placement for sectionOptions button\r\n        */}\r\n        <button id=\"sectionOptions\"></button>\r\n\r\n        {current.gallery.length > 0 &&\r\n          <DragSlider current={current} setCurrent={setCurrent} siteLocation={'home'}/>\r\n        }\r\n        {/*<DragSlider current={current} setCurrent={setCurrent} />*/}\r\n\r\n\r\n        {current.calendar &&\r\n          <Calendar \r\n            setCurrent={setCurrent} \r\n            current={current}\r\n            cal={cal} \r\n            set_dateInView={set_dateInView}\r\n            selectedDate={selectedDate}\r\n            setSelectedDate={setSelectedDate}/>\r\n        }\r\n        {current.map && \r\n          <MapComponent \r\n            setCurrent={setCurrent}\r\n            current={current}\r\n            log={log}\r\n            selectedDate={selectedDate}\r\n            setSelectedDate={setSelectedDate}\r\n            cal={cal}\r\n            setSocketMessage={setSocketMessage}\r\n            userDocumentSettings={userDocumentSettings}\r\n            setUserDocumentSettings={setUserDocumentSettings}/>\r\n        }\r\n        {current.customizer &&\r\n          <CustomLogEditor\r\n            current={current}\r\n            setCurrent={setCurrent} \r\n            setSocketMessage={setSocketMessage}\r\n            socketMessage={setSocketMessage}\r\n          />\r\n        }\r\n\r\n          <Instant \r\n            socketMessage={socketMessage} \r\n            setSocketMessage={setSocketMessage}\r\n            sendMessage={sendMessage}\r\n            isActive={isActive}\r\n            setActive={setActive}\r\n            accessID={accessID}\r\n            setAccessID={setAccessID}\r\n            getUnreadCount={getUnreadCount}\r\n          />\r\n        \r\n    </section>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function Main() {\r\n\r\n  /**\r\n   * W e b  S o c k e t\r\n   * A n d\r\n   * N o t i f i c a t i o n s\r\n   */\r\n  const { authed, userDocumentSettings, setUserDocumentSettings } = useUIC();\r\n  let userID = sessionStorage.getItem('userID');\r\n  \r\n\r\n\r\n  /***\r\n   * S O C K E T  S T U F F\r\n  ***/\r\n  const [socketURL, setSocketURL] = React.useState(``);\r\n  const {sendMessage, lastMessage, readyState} = useWebSocket(socketURL);\r\n  const [socketMessage, setSocketMessage] = React.useState({\r\n    type: null,\r\n    message: null\r\n  });\r\n  const [accessID, setAccessID] = React.useState({})\r\n  const [isActive, setActive] = React.useState({\r\n    type: null,   //type of popUp notif to appear\r\n    state: null,  //set class for it to popUp \r\n  })\r\n  /**\r\n   * Connects to webSocket server upon verifying user log in\r\n   * & gets unreadNotif count\r\n   */\r\n  React.useEffect(()=> {\r\n    if(authed == true) {\r\n      setSocketURL(`ws://172.20.22.241:3333/?${userID}`);\r\n      getUnreadCount();\r\n    }\r\n  }, [authed])\r\n\r\n\r\n  // need to implement reconnect redundancy here\r\n  React.useEffect(() => { \r\n    if(readyState === ReadyState.OPEN) {\r\n      console.log('Websocket connection established')\r\n    } else if (readyState === ReadyState.CLOSED) {\r\n      console.log('socket connection has closed')\r\n    }\r\n  }, [readyState])\r\n\r\n  /**\r\n   * when socket connection R E C I E V E S messages\r\n   */\r\n  useWebSocket(socketURL, {\r\n    onMessage: (e)=> {\r\n      let data = JSON.parse(e.data);\r\n      let details;\r\n      if(data.details) {\r\n        details = JSON.parse(data.details)\r\n      }\r\n      console.log(data);\r\n\r\n      // if(data.recipients.includes(userID) {\r\n        //need to implement\r\n      // })\r\n\r\n      if(data.type == 'request' && data.message == 'connectionRequestRecieved') {\r\n        setSocketMessage(data);\r\n        setAccessID({\r\n          ...accessID,\r\n          accept: data.senderID,\r\n          notifID: data.originalID,\r\n        });\r\n        setActive({\r\n          type: 3,\r\n          state: true\r\n        })\r\n        console.log(data);\r\n        console.log(accessID);\r\n      }\r\n\r\n      else if (data.type == 'request' && data.message == 'connectionAcceptedRecieved') {\r\n        setSocketMessage({\r\n          senderUsername: data.senderUsername,\r\n          type: 'request',\r\n          message: 'connectionAcceptedRecieved'\r\n        });\r\n        setActive({\r\n          type: 1,\r\n          state: true\r\n        })\r\n      }\r\n\r\n      else if(data.type == 'comment' && data.message == 'initial-recieved') {\r\n        setSocketMessage({\r\n          senderUsername: data.senderUsername,\r\n          type: 'comment',\r\n          message: 'initial-recieved',\r\n          postTitle: data.postTitle,\r\n        });\r\n        setActive({\r\n          type: 2,\r\n          state: true\r\n        })\r\n        // setAccessID({ postURL: data.postURL, notifID: data._id, commentID: details.commentID });\r\n        setAccessID({ postURL: data.postURL, notifID: data._id });\r\n        console.log(data);\r\n      }\r\n\r\n      else if(data.type == 'comment' && data.message == 'response-recieved') {\r\n        setSocketMessage({\r\n          senderUsername: data.senderUsername,\r\n          type: 'comment',\r\n          message: 'response-recieved',\r\n          postTitle: data.postTitle,\r\n        });\r\n        setActive({\r\n          type: 2,\r\n          state: true\r\n        })\r\n        // setAccessID({ postURL: data.postURL, notifID: data._id, commentID: details.commentID });\r\n        setAccessID({ postURL: data.postURL, notifID: data._id });\r\n        console.log(data);\r\n      }\r\n\r\n      else if(data.type == 'tagging' && data.message == 'recieved') {\r\n        setSocketMessage(data)\r\n        setActive({\r\n          type: 2,\r\n          state: true\r\n        })\r\n        setAccessID({ postURL: data.url, notifID: data._id });\r\n      }\r\n\r\n      else if(data.type == 'request' && data.message == 'subscriptionRequestRecieved') {\r\n        setSocketMessage({\r\n          //create text in instants for subscription request notif\r\n          //need requester username, message type and message...\r\n          senderUsername: data.senderUsername,\r\n          message: 'subscriptionRequestRecieved',\r\n          type: 'request',\r\n          data: data\r\n        })\r\n\r\n        setAccessID({\r\n          ...accessID,\r\n          accept: data.senderID,\r\n          notifID: data.originalID,\r\n        });\r\n\r\n        setActive({\r\n          type: 3,\r\n          state: true\r\n        })\r\n      }\r\n\r\n      else if(data.type == 'request' && data.message == 'subscriptionAccepted') {\r\n        setSocketMessage({\r\n          //create text in instants for subscription request notif\r\n          //need requester username, message type and message...\r\n          senderUsername: data.senderUsername,\r\n          message: 'subscriptionAccepted',\r\n          type: 'request'\r\n        })\r\n\r\n        setAccessID({\r\n          ...accessID,\r\n          accept: data.senderID,\r\n          notifID: data.originalID,\r\n        });\r\n\r\n        setActive({\r\n          type: 1,\r\n          state: true\r\n        })\r\n      }\r\n\r\n      else if(data.type == 'request' && data.message == 'subscribed') {\r\n        setSocketMessage({\r\n          //create text in instants for subscription request notif\r\n          //need requester username, message type and message...\r\n          senderUsername: data.senderUsername,\r\n          message: 'subscribed',\r\n          type: 'request'\r\n        })\r\n\r\n        setAccessID({\r\n          ...accessID,\r\n          accept: data.senderID,\r\n          notifID: data.originalID,\r\n        });\r\n\r\n        setActive({\r\n          type: 1,\r\n          state: true\r\n        })\r\n      }\r\n\r\n      else if(data.type == 'updateNotifs') {\r\n        getUnreadCount();\r\n\r\n        setSocketMessage({\r\n          type: 'simpleNotif',\r\n          message: `New notifications!`\r\n        })\r\n      }\r\n    },\r\n    shouldReconnect: (event) => true,\r\n    reconnectAttempts: 10,\r\n  })\r\n\r\n  \r\n  const [sectionClass, setSectionClass] = React.useState({\r\n      profile: 'enter',\r\n      social: 'enter',\r\n      home: 'enter',\r\n      macros: 'enter',\r\n      settings: 'enter'\r\n  })\r\n  \r\n  const [current, setCurrent] = React.useState({\r\n    section: 'home', //0, 1, 2, 3, 4\r\n    social: false, //true, false or social\r\n    calendar: false, //true or false\r\n    map: false,\r\n    scrollTo: null,\r\n    currentLog: null,\r\n    modal: false, //for <UserProfile>, when user leaves page via a fullList, ensures modal is still up\r\n    customizer: false,\r\n    transition: false, //for components mounted dependant on this stateVar, indicates before unmount\r\n    gallery: [], //for dragslider. should be an array of links\r\n    log: 0,\r\n    navmenu: false\r\n  });\r\n\r\n  const cal = CalInfo();\r\n\r\n  const hajime = new Date(),\r\n      kyou = hajime.getDate(),\r\n      kongetsu = hajime.getMonth(),\r\n      kotoshi = hajime.getFullYear();\r\n  const [selectedDate, setSelectedDate] = React.useState({\r\n    day: null,\r\n    month: null,\r\n    year: null\r\n  })\r\n\r\n\r\n\r\n  const [mapData, setMapData] = React.useState({\r\n    currentCity: 'NY',\r\n    currentState: 'NYC'\r\n  })\r\n\r\n\r\n  let [initialLogin, setInitialLogin] = React.useState(true);\r\n  if(initialLogin == true) {\r\n\r\n    setCurrent({\r\n        ...current,\r\n        section: 'home'\r\n    })\r\n    setInitialLogin(false);\r\n  }\r\n\r\n  const [unreadCount, setUnreadCount] = React.useState('');\r\n  /**\r\n   * Fetches unread count of interactions on initial load\r\n   * and when new interactions occur\r\n   */\r\n  let getUnreadCount = async() => {\r\n    let count = await accessAPI.getInteractions('count');\r\n    if (count > 99) {\r\n      count = '99';\r\n    }\r\n    setUnreadCount(count);\r\n  }\r\n\r\n  React.useEffect(()=> {\r\n    getUnreadCount();\r\n  }, [socketMessage])\r\n\r\n  /*\r\n    Top level state array to house log of posts\r\n    Changes whenever a new section becomes active\r\n  */\r\n  const [log, setLog] = React.useState([]);\r\n\r\n\r\n  /* Top Level state for tags */\r\n  const [tags, setTags] = React.useState([]);\r\n\r\n  /*\r\n    For macrospage to discern whether a user already has a topic saved to their profile\r\n  */\r\n  const [userTopics, setUserTopics] = React.useState([]);\r\n\r\n  /*\r\n      State array for keeping track of current section in carousel nav\r\n      top level, so it's maintained across pages\r\n  */\r\n  const [navOptions, setNavOptions] = React.useState([\r\n    {name: \"Social\", active: false, key: 1},\r\n    {name: \"User\", active: true, key: 2}, //middle is default\r\n    {name: \"Macros\", active: false, key: 3},\r\n  ]);\r\n  \r\n\r\n  const routerObject = createBrowserRouter([\r\n    \r\n    // E N T R Y \r\n    { \r\n      path: \"/entry\",\r\n      element: <Entry />\r\n    },\r\n    // R O O T\r\n    {\r\n      path: \"/\",\r\n      element:\r\n        <HomeOrEntry>\r\n          <Home \r\n                  userDocumentSettings={userDocumentSettings}\r\n                  setUserDocumentSettings={setUserDocumentSettings} \r\n                  // socket & notif stuff \r\n                  socketURL={socketURL}\r\n                  socketMessage={socketMessage}\r\n                  setSocketMessage={setSocketMessage}\r\n                  sendMessage={sendMessage}\r\n                  isActive={isActive}\r\n                  setActive={setActive}\r\n                  accessID={accessID}\r\n                  setAccessID={setAccessID}\r\n                  unreadCount={unreadCount}\r\n                  setUnreadCount={setUnreadCount}\r\n                  getUnreadCount={getUnreadCount}\r\n                  lastMessage={lastMessage}\r\n                  // socket & notif stuff\r\n                  cal={cal}\r\n                  current={current}\r\n                  setCurrent={setCurrent}\r\n                  selectedDate={selectedDate}\r\n                  setSelectedDate={setSelectedDate}\r\n\r\n                  mapData={mapData}\r\n                  setMapData={setMapData}\r\n\r\n                  log={log}\r\n                  setLog={setLog}\r\n                  tags={tags}\r\n                  setTags={setTags}\r\n                  userTopics={userTopics}\r\n                  setUserTopics={setUserTopics}\r\n\r\n                  navOptions={navOptions}\r\n                  setNavOptions={setNavOptions}\r\n\r\n\r\n                  sectionClass={sectionClass}\r\n                  setSectionClass={setSectionClass}\r\n          />\r\n        </HomeOrEntry>\r\n      ,\r\n    },\r\n    // H O M E\r\n    {\r\n      path: '/home',\r\n      element:\r\n        <HomeOrEntry>\r\n            <Home \r\n                  // socket & notif stuff\r\n                  socketURL={socketURL}\r\n                  socketMessage={socketMessage}\r\n                  setSocketMessage={setSocketMessage}\r\n                  sendMessage={sendMessage}\r\n                  isActive={isActive}\r\n                  setActive={setActive}\r\n                  accessID={accessID}\r\n                  setAccessID={setAccessID}\r\n                  unreadCount={unreadCount}\r\n                  setUnreadCount={setUnreadCount}\r\n                  getUnreadCount={getUnreadCount}\r\n                  lastMessage={lastMessage}\r\n                  // socket & notif stuff\r\n                  cal={cal}\r\n                  current={current}\r\n                  setCurrent={setCurrent}\r\n                  selectedDate={selectedDate}\r\n                  setSelectedDate={setSelectedDate}\r\n\r\n                  mapData={mapData}\r\n                  setMapData={setMapData}\r\n\r\n                  log={log}\r\n                  setLog={setLog}\r\n                  tags={tags}\r\n                  setTags={setTags}\r\n                  userTopics={userTopics}\r\n                  setUserTopics={setUserTopics}\r\n\r\n                  navOptions={navOptions}\r\n                  setNavOptions={setNavOptions}\r\n\r\n                  sectionClass={sectionClass}\r\n                  setSectionClass={setSectionClass}\r\n            />\r\n        </HomeOrEntry>\r\n    },\r\n    // P O S T\r\n    {\r\n      path: '/post/:postID',\r\n      loader: async({ params }) => {\r\n        let request = await accessAPI.getBlogPost(params.postID);\r\n        return request;\r\n      },\r\n      element:\r\n        <HomeOrEntry>\r\n          <Post \r\n            // socket stuff\r\n                  socketURL={socketURL}\r\n                  socketMessage={socketMessage}\r\n                  setSocketMessage={setSocketMessage}\r\n                  sendMessage={sendMessage}\r\n                  isActive={isActive}\r\n                  setActive={setActive}\r\n                  accessID={accessID}\r\n                  setAccessID={setAccessID}\r\n                  unreadCount={unreadCount}\r\n                  setUnreadCount={setUnreadCount}\r\n                  getUnreadCount={getUnreadCount}\r\n                  lastMessage={lastMessage}\r\n                  current={current}\r\n                  setCurrent={setCurrent}\r\n                 \r\n                  selectedDate={selectedDate}\r\n                  setSelectedDate={setSelectedDate}\r\n          />\r\n        </HomeOrEntry>\r\n    },\r\n    //M A C R O S P A G E\r\n    {\r\n      path: '/macros/:macroname/:macroid',\r\n      loader: async({ params }) => {\r\n        let macroInfo = await accessAPI.getTagData(params.macroid, params.macroname);\r\n        let macroPosts = await accessAPI.groupPosts({action: 'getPosts', groupID: params.macroid, groupName: params.macroname});\r\n         \r\n        let doesHaveAccess;\r\n        if(macroInfo.response == 'topic') {\r\n          macroInfo.userHasAccess = macroInfo.hasAccess;\r\n          // macroInfo._id = 'topic';\r\n        }\r\n        // else if(macroInfo.hasAccess) {\r\n        else {\r\n          doesHaveAccess = macroInfo.hasAccess.filter(el => el == userID);\r\n          doesHaveAccess = doesHaveAccess.length > 0 ? true : false;\r\n          macroInfo.userHasAccess = doesHaveAccess;\r\n        }\r\n         \r\n        macroInfo.name = macroInfo.name ? macroInfo.name : params.macroname;\r\n        macroInfo.ownerUsername = macroInfo.adminUsernames ? macroInfo.adminUsernames[0] : null;\r\n        macroInfo.ownerID = macroInfo.admins ? macroInfo.admins[0] : null;\r\n        macroInfo.type = macroInfo.type == undefined ? 'topic' : macroInfo.type;\r\n        macroInfo.userCount = macroInfo.hasAccess ? macroInfo.hasAccess.length : null;\r\n        macroInfo.postCount = macroPosts.length ? macroPosts.length : 0\r\n\r\n        return {macroInfo, macroPosts}\r\n      },\r\n      element: \r\n        <HomeOrEntry>\r\n          <Macrospage\r\n                  // socket stuff\r\n                  socketURL={socketURL}\r\n                  socketMessage={socketMessage}\r\n                  setSocketMessage={setSocketMessage}\r\n                  sendMessage={sendMessage}\r\n                  isActive={isActive}\r\n                  setActive={setActive}\r\n                  accessID={accessID}\r\n                  setAccessID={setAccessID}\r\n                  unreadCount={unreadCount}\r\n                  setUnreadCount={setUnreadCount}\r\n                  getUnreadCount={getUnreadCount}\r\n                  lastMessage={lastMessage}\r\n                  current={current}\r\n                  setCurrent={setCurrent}\r\n                  // socket stuff\r\n                  selectedDate={selectedDate}\r\n                  setSelectedDate={setSelectedDate}\r\n                  tags={tags}\r\n                  setTags={setTags}\r\n                  userTopics={userTopics}\r\n                  setUserTopics={setUserTopics}\r\n          />\r\n        </HomeOrEntry>\r\n    },\r\n    //U S E R  P R O F I L E\r\n    {\r\n      path: '/user/:username/:userid',\r\n      loader: async({ params }) => {\r\n        let data = await accessAPI.getSingleUser(params.userid);\r\n        return data;\r\n      },\r\n      element: \r\n        <HomeOrEntry>\r\n          <UserProfile\r\n                  // socket stuff\r\n                  socketURL={socketURL}\r\n                  socketMessage={socketMessage}\r\n                  setSocketMessage={setSocketMessage}\r\n                  sendMessage={sendMessage}\r\n                  isActive={isActive}\r\n                  setActive={setActive}\r\n                  accessID={accessID}\r\n                  setAccessID={setAccessID}\r\n                  unreadCount={unreadCount}\r\n                  setUnreadCount={setUnreadCount}\r\n                  getUnreadCount={getUnreadCount}\r\n                  lastMessage={lastMessage}\r\n                  current={current}\r\n                  setCurrent={setCurrent}\r\n                  // socket stuff\r\n                  selectedDate={selectedDate}\r\n                  setSelectedDate={setSelectedDate}\r\n          />\r\n        </HomeOrEntry>\r\n    },\r\n    //U S E R  S E T T I N G S\r\n    {\r\n      path: '/:username/settings',\r\n      loader: async({ params }) => {\r\n        let data = await accessAPI.userSettings({option: 'getUserSettings'});\r\n        return data;\r\n      },\r\n      element: \r\n        <HomeOrEntry>\r\n          <UserSettings\r\n                  setSocketMessage={setSocketMessage}\r\n                  socketURL={socketURL}\r\n                  socketMessage={socketMessage}\r\n                  sendMessage={sendMessage}\r\n                  isActive={isActive}\r\n                  setActive={setActive}\r\n                  setAccessID={setAccessID}\r\n                  accessID={accessID}\r\n                  getUnreadCount={getUnreadCount}\r\n                  current={current}\r\n                  setCurrent={setCurrent}\r\n          />\r\n        </HomeOrEntry>\r\n    },\r\n    //A B O U T \r\n    {\r\n      path: '/about',\r\n      loader: async({ params }) => {\r\n        let data = await accessAPI.getProjectPublicStats();\r\n        return data;\r\n      },\r\n      element: \r\n        <AboutPage />\r\n    }\r\n  ])\r\n\r\n  return (\r\n      <UIContextProvider>\r\n        <RouterProvider router={routerObject} />\r\n      </UIContextProvider>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}