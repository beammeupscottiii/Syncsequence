{"ast":null,"code":"/**\n * @module ol/render/canvas/Immediate\n */\n// FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\nimport VectorContext from '../VectorContext.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { defaultFillStyle, defaultFont, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle, defaultTextAlign, defaultTextBaseline } from '../canvas.js';\nimport { equals } from '../../array.js';\nimport { intersects } from '../../extent.js';\nimport { toFixed } from '../../math.js';\nimport { transform2D } from '../../geom/flat/transform.js';\nimport { transformGeom2D } from '../../geom/SimpleGeometry.js';\n/**\n * @classdesc\n * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements\n * direct rendering of features and geometries to an HTML5 Canvas context.\n * Instances of this class are created internally by the library and\n * provided to application code as vectorContext member of the\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\n * render events emitted by layers and maps.\n */\n\nclass CanvasImmediateRenderer extends VectorContext {\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.\n   * @param {import(\"../../proj.js\").TransformFunction} [userTransform] Transform from user to view projection.\n   */\n  constructor(context, pixelRatio, extent, transform, viewRotation, squaredTolerance, userTransform) {\n    super();\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n\n    this.context_ = context;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.pixelRatio_ = pixelRatio;\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n\n    this.extent_ = extent;\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.transform_ = transform;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.transformRotation_ = transform ? toFixed(Math.atan2(transform[1], transform[0]), 10) : 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.viewRotation_ = viewRotation;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.squaredTolerance_ = squaredTolerance;\n    /**\n     * @private\n     * @type {import(\"../../proj.js\").TransformFunction}\n     */\n\n    this.userTransform_ = userTransform;\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n\n    this.contextFillState_ = null;\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n\n    this.contextStrokeState_ = null;\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n\n    this.contextTextState_ = null;\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n\n    this.fillState_ = null;\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n\n    this.strokeState_ = null;\n    /**\n     * @private\n     * @type {import('../../DataTile.js').ImageLike}\n     */\n\n    this.image_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageAnchorX_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageAnchorY_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageHeight_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageOpacity_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageOriginX_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageOriginY_ = 0;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.imageRotateWithView_ = false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageRotation_ = 0;\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size}\n     */\n\n    this.imageScale_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageWidth_ = 0;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.text_ = '';\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.textOffsetX_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.textOffsetY_ = 0;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.textRotateWithView_ = false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.textRotation_ = 0;\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size}\n     */\n\n    this.textScale_ = [0, 0];\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n\n    this.textFillState_ = null;\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n\n    this.textStrokeState_ = null;\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n\n    this.textState_ = null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.pixelCoordinates_ = [];\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.tmpLocalTransform_ = createTransform();\n  }\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n\n\n  drawImages_(flatCoordinates, offset, end, stride) {\n    if (!this.image_) {\n      return;\n    }\n\n    const pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n    const context = this.context_;\n    const localTransform = this.tmpLocalTransform_;\n    const alpha = context.globalAlpha;\n\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha * this.imageOpacity_;\n    }\n\n    let rotation = this.imageRotation_;\n\n    if (this.transformRotation_ === 0) {\n      rotation -= this.viewRotation_;\n    }\n\n    if (this.imageRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n\n    for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\n      const x = pixelCoordinates[i] - this.imageAnchorX_;\n      const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\n\n      if (rotation !== 0 || this.imageScale_[0] != 1 || this.imageScale_[1] != 1) {\n        const centerX = x + this.imageAnchorX_;\n        const centerY = y + this.imageAnchorY_;\n        composeTransform(localTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);\n        context.save();\n        context.transform.apply(context, localTransform);\n        context.translate(centerX, centerY);\n        context.scale(this.imageScale_[0], this.imageScale_[1]);\n        context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, -this.imageAnchorX_, -this.imageAnchorY_, this.imageWidth_, this.imageHeight_);\n        context.restore();\n      } else {\n        context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, x, y, this.imageWidth_, this.imageHeight_);\n      }\n    }\n\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha;\n    }\n  }\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n\n\n  drawText_(flatCoordinates, offset, end, stride) {\n    if (!this.textState_ || this.text_ === '') {\n      return;\n    }\n\n    if (this.textFillState_) {\n      this.setContextFillState_(this.textFillState_);\n    }\n\n    if (this.textStrokeState_) {\n      this.setContextStrokeState_(this.textStrokeState_);\n    }\n\n    this.setContextTextState_(this.textState_);\n    const pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n    const context = this.context_;\n    let rotation = this.textRotation_;\n\n    if (this.transformRotation_ === 0) {\n      rotation -= this.viewRotation_;\n    }\n\n    if (this.textRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n\n    for (; offset < end; offset += stride) {\n      const x = pixelCoordinates[offset] + this.textOffsetX_;\n      const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\n\n      if (rotation !== 0 || this.textScale_[0] != 1 || this.textScale_[1] != 1) {\n        context.save();\n        context.translate(x - this.textOffsetX_, y - this.textOffsetY_);\n        context.rotate(rotation);\n        context.translate(this.textOffsetX_, this.textOffsetY_);\n        context.scale(this.textScale_[0], this.textScale_[1]);\n\n        if (this.textStrokeState_) {\n          context.strokeText(this.text_, 0, 0);\n        }\n\n        if (this.textFillState_) {\n          context.fillText(this.text_, 0, 0);\n        }\n\n        context.restore();\n      } else {\n        if (this.textStrokeState_) {\n          context.strokeText(this.text_, x, y);\n        }\n\n        if (this.textFillState_) {\n          context.fillText(this.text_, x, y);\n        }\n      }\n    }\n  }\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} close Close.\n   * @private\n   * @return {number} end End.\n   */\n\n\n  moveToLineTo_(flatCoordinates, offset, end, stride, close) {\n    const context = this.context_;\n    const pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n    let length = pixelCoordinates.length;\n\n    if (close) {\n      length -= 2;\n    }\n\n    for (let i = 2; i < length; i += 2) {\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n    }\n\n    if (close) {\n      context.closePath();\n    }\n\n    return end;\n  }\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n\n\n  drawRings_(flatCoordinates, offset, ends, stride) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);\n    }\n\n    return offset;\n  }\n  /**\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\n   * the current fill and stroke styles.\n   *\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\n   * @api\n   */\n\n\n  drawCircle(geometry) {\n    if (this.squaredTolerance_) {\n      geometry =\n      /** @type {import(\"../../geom/Circle.js\").default} */\n      geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n    }\n\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n\n    if (this.fillState_ || this.strokeState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n\n      const pixelCoordinates = transformGeom2D(geometry, this.transform_, this.pixelCoordinates_);\n      const dx = pixelCoordinates[2] - pixelCoordinates[0];\n      const dy = pixelCoordinates[3] - pixelCoordinates[1];\n      const radius = Math.sqrt(dx * dx + dy * dy);\n      const context = this.context_;\n      context.beginPath();\n      context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);\n\n      if (this.fillState_) {\n        context.fill();\n      }\n\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n\n    if (this.text_ !== '') {\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\n    }\n  }\n  /**\n   * Set the rendering style.  Note that since this is an immediate rendering API,\n   * any `zIndex` on the provided style will be ignored.\n   *\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\n   * @api\n   */\n\n\n  setStyle(style) {\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\n    this.setImageStyle(style.getImage());\n    this.setTextStyle(style.getText());\n  }\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n\n\n  setTransform(transform) {\n    this.transform_ = transform;\n  }\n  /**\n   * Render a geometry into the canvas.  Call\n   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.\n   *\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\n   * @api\n   */\n\n\n  drawGeometry(geometry) {\n    const type = geometry.getType();\n\n    switch (type) {\n      case 'Point':\n        this.drawPoint(\n        /** @type {import(\"../../geom/Point.js\").default} */\n        geometry);\n        break;\n\n      case 'LineString':\n        this.drawLineString(\n        /** @type {import(\"../../geom/LineString.js\").default} */\n        geometry);\n        break;\n\n      case 'Polygon':\n        this.drawPolygon(\n        /** @type {import(\"../../geom/Polygon.js\").default} */\n        geometry);\n        break;\n\n      case 'MultiPoint':\n        this.drawMultiPoint(\n        /** @type {import(\"../../geom/MultiPoint.js\").default} */\n        geometry);\n        break;\n\n      case 'MultiLineString':\n        this.drawMultiLineString(\n        /** @type {import(\"../../geom/MultiLineString.js\").default} */\n        geometry);\n        break;\n\n      case 'MultiPolygon':\n        this.drawMultiPolygon(\n        /** @type {import(\"../../geom/MultiPolygon.js\").default} */\n        geometry);\n        break;\n\n      case 'GeometryCollection':\n        this.drawGeometryCollection(\n        /** @type {import(\"../../geom/GeometryCollection.js\").default} */\n        geometry);\n        break;\n\n      case 'Circle':\n        this.drawCircle(\n        /** @type {import(\"../../geom/Circle.js\").default} */\n        geometry);\n        break;\n\n      default:\n    }\n  }\n  /**\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\n   * style will be ignored - features are rendered immediately in the order that\n   * this method is called.  If you need `zIndex` support, you should be using an\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\n   *\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {import(\"../../style/Style.js\").default} style Style.\n   * @api\n   */\n\n\n  drawFeature(feature, style) {\n    const geometry = style.getGeometryFunction()(feature);\n\n    if (!geometry) {\n      return;\n    }\n\n    this.setStyle(style);\n    this.drawGeometry(geometry);\n  }\n  /**\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\n   * uses the current styles appropriate for each geometry in the collection.\n   *\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\n   */\n\n\n  drawGeometryCollection(geometry) {\n    const geometries = geometry.getGeometriesArray();\n\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      this.drawGeometry(geometries[i]);\n    }\n  }\n  /**\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\n   */\n\n\n  drawPoint(geometry) {\n    if (this.squaredTolerance_) {\n      geometry =\n      /** @type {import(\"../../geom/Point.js\").default} */\n      geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n    }\n\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n  /**\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\n   * uses the current style.\n   *\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\n   */\n\n\n  drawMultiPoint(geometry) {\n    if (this.squaredTolerance_) {\n      geometry =\n      /** @type {import(\"../../geom/MultiPoint.js\").default} */\n      geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n    }\n\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n  /**\n   * Render a LineString into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\n   */\n\n\n  drawLineString(geometry) {\n    if (this.squaredTolerance_) {\n      geometry =\n      /** @type {import(\"../../geom/LineString.js\").default} */\n      geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n    }\n\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      context.beginPath();\n      this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);\n      context.stroke();\n    }\n\n    if (this.text_ !== '') {\n      const flatMidpoint = geometry.getFlatMidpoint();\n      this.drawText_(flatMidpoint, 0, 2, 2);\n    }\n  }\n  /**\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\n   * and uses the current style.\n   *\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\n   */\n\n\n  drawMultiLineString(geometry) {\n    if (this.squaredTolerance_) {\n      geometry =\n      /** @type {import(\"../../geom/MultiLineString.js\").default} */\n      geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n    }\n\n    const geometryExtent = geometry.getExtent();\n\n    if (!intersects(this.extent_, geometryExtent)) {\n      return;\n    }\n\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      let offset = 0;\n      const ends =\n      /** @type {Array<number>} */\n      geometry.getEnds();\n      const stride = geometry.getStride();\n      context.beginPath();\n\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);\n      }\n\n      context.stroke();\n    }\n\n    if (this.text_ !== '') {\n      const flatMidpoints = geometry.getFlatMidpoints();\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n    }\n  }\n  /**\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\n   */\n\n\n  drawPolygon(geometry) {\n    if (this.squaredTolerance_) {\n      geometry =\n      /** @type {import(\"../../geom/Polygon.js\").default} */\n      geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n    }\n\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n\n      const context = this.context_;\n      context.beginPath();\n      this.drawRings_(geometry.getOrientedFlatCoordinates(), 0,\n      /** @type {Array<number>} */\n      geometry.getEnds(), geometry.getStride());\n\n      if (this.fillState_) {\n        context.fill();\n      }\n\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n\n    if (this.text_ !== '') {\n      const flatInteriorPoint = geometry.getFlatInteriorPoint();\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\n    }\n  }\n  /**\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\n   * uses the current style.\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   */\n\n\n  drawMultiPolygon(geometry) {\n    if (this.squaredTolerance_) {\n      geometry =\n      /** @type {import(\"../../geom/MultiPolygon.js\").default} */\n      geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n    }\n\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n\n      const context = this.context_;\n      const flatCoordinates = geometry.getOrientedFlatCoordinates();\n      let offset = 0;\n      const endss = geometry.getEndss();\n      const stride = geometry.getStride();\n      context.beginPath();\n\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\n        const ends = endss[i];\n        offset = this.drawRings_(flatCoordinates, offset, ends, stride);\n      }\n\n      if (this.fillState_) {\n        context.fill();\n      }\n\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n\n    if (this.text_ !== '') {\n      const flatInteriorPoints = geometry.getFlatInteriorPoints();\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n    }\n  }\n  /**\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\n   * @private\n   */\n\n\n  setContextFillState_(fillState) {\n    const context = this.context_;\n    const contextFillState = this.contextFillState_;\n\n    if (!contextFillState) {\n      context.fillStyle = fillState.fillStyle;\n      this.contextFillState_ = {\n        fillStyle: fillState.fillStyle\n      };\n    } else {\n      if (contextFillState.fillStyle != fillState.fillStyle) {\n        contextFillState.fillStyle = fillState.fillStyle;\n        context.fillStyle = fillState.fillStyle;\n      }\n    }\n  }\n  /**\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\n   * @private\n   */\n\n\n  setContextStrokeState_(strokeState) {\n    const context = this.context_;\n    const contextStrokeState = this.contextStrokeState_;\n\n    if (!contextStrokeState) {\n      context.lineCap = strokeState.lineCap;\n      context.setLineDash(strokeState.lineDash);\n      context.lineDashOffset = strokeState.lineDashOffset;\n      context.lineJoin = strokeState.lineJoin;\n      context.lineWidth = strokeState.lineWidth;\n      context.miterLimit = strokeState.miterLimit;\n      context.strokeStyle = strokeState.strokeStyle;\n      this.contextStrokeState_ = {\n        lineCap: strokeState.lineCap,\n        lineDash: strokeState.lineDash,\n        lineDashOffset: strokeState.lineDashOffset,\n        lineJoin: strokeState.lineJoin,\n        lineWidth: strokeState.lineWidth,\n        miterLimit: strokeState.miterLimit,\n        strokeStyle: strokeState.strokeStyle\n      };\n    } else {\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\n        contextStrokeState.lineCap = strokeState.lineCap;\n        context.lineCap = strokeState.lineCap;\n      }\n\n      if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\n        context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);\n      }\n\n      if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n        contextStrokeState.lineDashOffset = strokeState.lineDashOffset;\n        context.lineDashOffset = strokeState.lineDashOffset;\n      }\n\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n        contextStrokeState.lineJoin = strokeState.lineJoin;\n        context.lineJoin = strokeState.lineJoin;\n      }\n\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n        contextStrokeState.lineWidth = strokeState.lineWidth;\n        context.lineWidth = strokeState.lineWidth;\n      }\n\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n        contextStrokeState.miterLimit = strokeState.miterLimit;\n        context.miterLimit = strokeState.miterLimit;\n      }\n\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n        contextStrokeState.strokeStyle = strokeState.strokeStyle;\n        context.strokeStyle = strokeState.strokeStyle;\n      }\n    }\n  }\n  /**\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\n   * @private\n   */\n\n\n  setContextTextState_(textState) {\n    const context = this.context_;\n    const contextTextState = this.contextTextState_;\n    const textAlign = textState.textAlign ? textState.textAlign : defaultTextAlign;\n\n    if (!contextTextState) {\n      context.font = textState.font;\n      context.textAlign = textAlign;\n      context.textBaseline = textState.textBaseline;\n      this.contextTextState_ = {\n        font: textState.font,\n        textAlign: textAlign,\n        textBaseline: textState.textBaseline\n      };\n    } else {\n      if (contextTextState.font != textState.font) {\n        contextTextState.font = textState.font;\n        context.font = textState.font;\n      }\n\n      if (contextTextState.textAlign != textAlign) {\n        contextTextState.textAlign = textAlign;\n        context.textAlign = textAlign;\n      }\n\n      if (contextTextState.textBaseline != textState.textBaseline) {\n        contextTextState.textBaseline = textState.textBaseline;\n        context.textBaseline = textState.textBaseline;\n      }\n    }\n  }\n  /**\n   * Set the fill and stroke style for subsequent draw operations.  To clear\n   * either fill or stroke styles, pass null for the appropriate parameter.\n   *\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n\n\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    if (!fillStyle) {\n      this.fillState_ = null;\n    } else {\n      const fillStyleColor = fillStyle.getColor();\n      this.fillState_ = {\n        fillStyle: asColorLike(fillStyleColor ? fillStyleColor : defaultFillStyle)\n      };\n    }\n\n    if (!strokeStyle) {\n      this.strokeState_ = null;\n    } else {\n      const strokeStyleColor = strokeStyle.getColor();\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      const strokeStyleWidth = strokeStyle.getWidth();\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      const lineDash = strokeStyleLineDash ? strokeStyleLineDash : defaultLineDash;\n      this.strokeState_ = {\n        lineCap: strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap,\n        lineDash: this.pixelRatio_ === 1 ? lineDash : lineDash.map(n => n * this.pixelRatio_),\n        lineDashOffset: (strokeStyleLineDashOffset ? strokeStyleLineDashOffset : defaultLineDashOffset) * this.pixelRatio_,\n        lineJoin: strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : defaultLineJoin,\n        lineWidth: (strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth) * this.pixelRatio_,\n        miterLimit: strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : defaultMiterLimit,\n        strokeStyle: asColorLike(strokeStyleColor ? strokeStyleColor : defaultStrokeStyle)\n      };\n    }\n  }\n  /**\n   * Set the image style for subsequent draw operations.  Pass null to remove\n   * the image style.\n   *\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\n   */\n\n\n  setImageStyle(imageStyle) {\n    let imageSize;\n\n    if (!imageStyle || !(imageSize = imageStyle.getSize())) {\n      this.image_ = null;\n      return;\n    }\n\n    const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);\n    const imageAnchor = imageStyle.getAnchor();\n    const imageOrigin = imageStyle.getOrigin();\n    this.image_ = imageStyle.getImage(this.pixelRatio_);\n    this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;\n    this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;\n    this.imageHeight_ = imageSize[1] * imagePixelRatio;\n    this.imageOpacity_ = imageStyle.getOpacity();\n    this.imageOriginX_ = imageOrigin[0];\n    this.imageOriginY_ = imageOrigin[1];\n    this.imageRotateWithView_ = imageStyle.getRotateWithView();\n    this.imageRotation_ = imageStyle.getRotation();\n    const imageScale = imageStyle.getScaleArray();\n    this.imageScale_ = [imageScale[0] * this.pixelRatio_ / imagePixelRatio, imageScale[1] * this.pixelRatio_ / imagePixelRatio];\n    this.imageWidth_ = imageSize[0] * imagePixelRatio;\n  }\n  /**\n   * Set the text style for subsequent draw operations.  Pass null to\n   * remove the text style.\n   *\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   */\n\n\n  setTextStyle(textStyle) {\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n\n      if (!textFillStyle) {\n        this.textFillState_ = null;\n      } else {\n        const textFillStyleColor = textFillStyle.getColor();\n        this.textFillState_ = {\n          fillStyle: asColorLike(textFillStyleColor ? textFillStyleColor : defaultFillStyle)\n        };\n      }\n\n      const textStrokeStyle = textStyle.getStroke();\n\n      if (!textStrokeStyle) {\n        this.textStrokeState_ = null;\n      } else {\n        const textStrokeStyleColor = textStrokeStyle.getColor();\n        const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n        const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n        const textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();\n        const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n        const textStrokeStyleWidth = textStrokeStyle.getWidth();\n        const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n        this.textStrokeState_ = {\n          lineCap: textStrokeStyleLineCap !== undefined ? textStrokeStyleLineCap : defaultLineCap,\n          lineDash: textStrokeStyleLineDash ? textStrokeStyleLineDash : defaultLineDash,\n          lineDashOffset: textStrokeStyleLineDashOffset ? textStrokeStyleLineDashOffset : defaultLineDashOffset,\n          lineJoin: textStrokeStyleLineJoin !== undefined ? textStrokeStyleLineJoin : defaultLineJoin,\n          lineWidth: textStrokeStyleWidth !== undefined ? textStrokeStyleWidth : defaultLineWidth,\n          miterLimit: textStrokeStyleMiterLimit !== undefined ? textStrokeStyleMiterLimit : defaultMiterLimit,\n          strokeStyle: asColorLike(textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle)\n        };\n      }\n\n      const textFont = textStyle.getFont();\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      const textScale = textStyle.getScaleArray();\n      const textText = textStyle.getText();\n      const textTextAlign = textStyle.getTextAlign();\n      const textTextBaseline = textStyle.getTextBaseline();\n      this.textState_ = {\n        font: textFont !== undefined ? textFont : defaultFont,\n        textAlign: textTextAlign !== undefined ? textTextAlign : defaultTextAlign,\n        textBaseline: textTextBaseline !== undefined ? textTextBaseline : defaultTextBaseline\n      };\n      this.text_ = textText !== undefined ? Array.isArray(textText) ? textText.reduce((acc, t, i) => acc += i % 2 ? ' ' : t, '') : textText : '';\n      this.textOffsetX_ = textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\n      this.textOffsetY_ = textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\n      this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n      this.textScale_ = [this.pixelRatio_ * textScale[0], this.pixelRatio_ * textScale[1]];\n    }\n  }\n\n}\n\nexport default CanvasImmediateRenderer;","map":{"version":3,"names":["VectorContext","asColorLike","compose","composeTransform","create","createTransform","defaultFillStyle","defaultFont","defaultLineCap","defaultLineDash","defaultLineDashOffset","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","defaultTextAlign","defaultTextBaseline","equals","intersects","toFixed","transform2D","transformGeom2D","CanvasImmediateRenderer","constructor","context","pixelRatio","extent","transform","viewRotation","squaredTolerance","userTransform","context_","pixelRatio_","extent_","transform_","transformRotation_","Math","atan2","viewRotation_","squaredTolerance_","userTransform_","contextFillState_","contextStrokeState_","contextTextState_","fillState_","strokeState_","image_","imageAnchorX_","imageAnchorY_","imageHeight_","imageOpacity_","imageOriginX_","imageOriginY_","imageRotateWithView_","imageRotation_","imageScale_","imageWidth_","text_","textOffsetX_","textOffsetY_","textRotateWithView_","textRotation_","textScale_","textFillState_","textStrokeState_","textState_","pixelCoordinates_","tmpLocalTransform_","drawImages_","flatCoordinates","offset","end","stride","pixelCoordinates","localTransform","alpha","globalAlpha","rotation","i","ii","length","x","y","centerX","centerY","save","apply","translate","scale","drawImage","restore","drawText_","setContextFillState_","setContextStrokeState_","setContextTextState_","rotate","strokeText","fillText","moveToLineTo_","close","moveTo","lineTo","closePath","drawRings_","ends","drawCircle","geometry","simplifyTransformed","getExtent","dx","dy","radius","sqrt","beginPath","arc","PI","fill","stroke","getCenter","setStyle","style","setFillStrokeStyle","getFill","getStroke","setImageStyle","getImage","setTextStyle","getText","setTransform","drawGeometry","type","getType","drawPoint","drawLineString","drawPolygon","drawMultiPoint","drawMultiLineString","drawMultiPolygon","drawGeometryCollection","drawFeature","feature","getGeometryFunction","geometries","getGeometriesArray","getFlatCoordinates","getStride","flatMidpoint","getFlatMidpoint","geometryExtent","getEnds","flatMidpoints","getFlatMidpoints","getOrientedFlatCoordinates","flatInteriorPoint","getFlatInteriorPoint","endss","getEndss","flatInteriorPoints","getFlatInteriorPoints","fillState","contextFillState","fillStyle","strokeState","contextStrokeState","lineCap","setLineDash","lineDash","lineDashOffset","lineJoin","lineWidth","miterLimit","strokeStyle","textState","contextTextState","textAlign","font","textBaseline","fillStyleColor","getColor","strokeStyleColor","strokeStyleLineCap","getLineCap","strokeStyleLineDash","getLineDash","strokeStyleLineDashOffset","getLineDashOffset","strokeStyleLineJoin","getLineJoin","strokeStyleWidth","getWidth","strokeStyleMiterLimit","getMiterLimit","undefined","map","n","imageStyle","imageSize","getSize","imagePixelRatio","getPixelRatio","imageAnchor","getAnchor","imageOrigin","getOrigin","getOpacity","getRotateWithView","getRotation","imageScale","getScaleArray","textStyle","textFillStyle","textFillStyleColor","textStrokeStyle","textStrokeStyleColor","textStrokeStyleLineCap","textStrokeStyleLineDash","textStrokeStyleLineDashOffset","textStrokeStyleLineJoin","textStrokeStyleWidth","textStrokeStyleMiterLimit","textFont","getFont","textOffsetX","getOffsetX","textOffsetY","getOffsetY","textRotateWithView","textRotation","textScale","textText","textTextAlign","getTextAlign","textTextBaseline","getTextBaseline","Array","isArray","reduce","acc","t"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/render/canvas/Immediate.js"],"sourcesContent":["/**\n * @module ol/render/canvas/Immediate\n */\n// FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\n\nimport VectorContext from '../VectorContext.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {\n  defaultFillStyle,\n  defaultFont,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n  defaultTextAlign,\n  defaultTextBaseline,\n} from '../canvas.js';\nimport {equals} from '../../array.js';\nimport {intersects} from '../../extent.js';\nimport {toFixed} from '../../math.js';\nimport {transform2D} from '../../geom/flat/transform.js';\nimport {transformGeom2D} from '../../geom/SimpleGeometry.js';\n\n/**\n * @classdesc\n * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements\n * direct rendering of features and geometries to an HTML5 Canvas context.\n * Instances of this class are created internally by the library and\n * provided to application code as vectorContext member of the\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\n * render events emitted by layers and maps.\n */\nclass CanvasImmediateRenderer extends VectorContext {\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.\n   * @param {import(\"../../proj.js\").TransformFunction} [userTransform] Transform from user to view projection.\n   */\n  constructor(\n    context,\n    pixelRatio,\n    extent,\n    transform,\n    viewRotation,\n    squaredTolerance,\n    userTransform,\n  ) {\n    super();\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = context;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.transform_ = transform;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.transformRotation_ = transform\n      ? toFixed(Math.atan2(transform[1], transform[0]), 10)\n      : 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = viewRotation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.squaredTolerance_ = squaredTolerance;\n\n    /**\n     * @private\n     * @type {import(\"../../proj.js\").TransformFunction}\n     */\n    this.userTransform_ = userTransform;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.contextFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.contextStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n    this.contextTextState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.fillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.strokeState_ = null;\n\n    /**\n     * @private\n     * @type {import('../../DataTile.js').ImageLike}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorY_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageHeight_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOpacity_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.imageRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageRotation_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size}\n     */\n    this.imageScale_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageWidth_ = 0;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.textRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size}\n     */\n    this.textScale_ = [0, 0];\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = [];\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tmpLocalTransform_ = createTransform();\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  drawImages_(flatCoordinates, offset, end, stride) {\n    if (!this.image_) {\n      return;\n    }\n    const pixelCoordinates = transform2D(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_,\n    );\n    const context = this.context_;\n    const localTransform = this.tmpLocalTransform_;\n    const alpha = context.globalAlpha;\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha * this.imageOpacity_;\n    }\n    let rotation = this.imageRotation_;\n    if (this.transformRotation_ === 0) {\n      rotation -= this.viewRotation_;\n    }\n    if (this.imageRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\n      const x = pixelCoordinates[i] - this.imageAnchorX_;\n      const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\n      if (\n        rotation !== 0 ||\n        this.imageScale_[0] != 1 ||\n        this.imageScale_[1] != 1\n      ) {\n        const centerX = x + this.imageAnchorX_;\n        const centerY = y + this.imageAnchorY_;\n        composeTransform(\n          localTransform,\n          centerX,\n          centerY,\n          1,\n          1,\n          rotation,\n          -centerX,\n          -centerY,\n        );\n        context.save();\n        context.transform.apply(context, localTransform);\n        context.translate(centerX, centerY);\n        context.scale(this.imageScale_[0], this.imageScale_[1]);\n        context.drawImage(\n          this.image_,\n          this.imageOriginX_,\n          this.imageOriginY_,\n          this.imageWidth_,\n          this.imageHeight_,\n          -this.imageAnchorX_,\n          -this.imageAnchorY_,\n          this.imageWidth_,\n          this.imageHeight_,\n        );\n        context.restore();\n      } else {\n        context.drawImage(\n          this.image_,\n          this.imageOriginX_,\n          this.imageOriginY_,\n          this.imageWidth_,\n          this.imageHeight_,\n          x,\n          y,\n          this.imageWidth_,\n          this.imageHeight_,\n        );\n      }\n    }\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha;\n    }\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  drawText_(flatCoordinates, offset, end, stride) {\n    if (!this.textState_ || this.text_ === '') {\n      return;\n    }\n    if (this.textFillState_) {\n      this.setContextFillState_(this.textFillState_);\n    }\n    if (this.textStrokeState_) {\n      this.setContextStrokeState_(this.textStrokeState_);\n    }\n    this.setContextTextState_(this.textState_);\n    const pixelCoordinates = transform2D(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_,\n    );\n    const context = this.context_;\n    let rotation = this.textRotation_;\n    if (this.transformRotation_ === 0) {\n      rotation -= this.viewRotation_;\n    }\n    if (this.textRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (; offset < end; offset += stride) {\n      const x = pixelCoordinates[offset] + this.textOffsetX_;\n      const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\n      if (\n        rotation !== 0 ||\n        this.textScale_[0] != 1 ||\n        this.textScale_[1] != 1\n      ) {\n        context.save();\n        context.translate(x - this.textOffsetX_, y - this.textOffsetY_);\n        context.rotate(rotation);\n        context.translate(this.textOffsetX_, this.textOffsetY_);\n        context.scale(this.textScale_[0], this.textScale_[1]);\n        if (this.textStrokeState_) {\n          context.strokeText(this.text_, 0, 0);\n        }\n        if (this.textFillState_) {\n          context.fillText(this.text_, 0, 0);\n        }\n        context.restore();\n      } else {\n        if (this.textStrokeState_) {\n          context.strokeText(this.text_, x, y);\n        }\n        if (this.textFillState_) {\n          context.fillText(this.text_, x, y);\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} close Close.\n   * @private\n   * @return {number} end End.\n   */\n  moveToLineTo_(flatCoordinates, offset, end, stride, close) {\n    const context = this.context_;\n    const pixelCoordinates = transform2D(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_,\n    );\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n    let length = pixelCoordinates.length;\n    if (close) {\n      length -= 2;\n    }\n    for (let i = 2; i < length; i += 2) {\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n    }\n    if (close) {\n      context.closePath();\n    }\n    return end;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n  drawRings_(flatCoordinates, offset, ends, stride) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.moveToLineTo_(\n        flatCoordinates,\n        offset,\n        ends[i],\n        stride,\n        true,\n      );\n    }\n    return offset;\n  }\n\n  /**\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\n   * the current fill and stroke styles.\n   *\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\n   * @api\n   */\n  drawCircle(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/Circle.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_,\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.fillState_ || this.strokeState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const pixelCoordinates = transformGeom2D(\n        geometry,\n        this.transform_,\n        this.pixelCoordinates_,\n      );\n      const dx = pixelCoordinates[2] - pixelCoordinates[0];\n      const dy = pixelCoordinates[3] - pixelCoordinates[1];\n      const radius = Math.sqrt(dx * dx + dy * dy);\n      const context = this.context_;\n      context.beginPath();\n      context.arc(\n        pixelCoordinates[0],\n        pixelCoordinates[1],\n        radius,\n        0,\n        2 * Math.PI,\n      );\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\n    }\n  }\n\n  /**\n   * Set the rendering style.  Note that since this is an immediate rendering API,\n   * any `zIndex` on the provided style will be ignored.\n   *\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\n   * @api\n   */\n  setStyle(style) {\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\n    this.setImageStyle(style.getImage());\n    this.setTextStyle(style.getText());\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n  setTransform(transform) {\n    this.transform_ = transform;\n  }\n\n  /**\n   * Render a geometry into the canvas.  Call\n   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.\n   *\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\n   * @api\n   */\n  drawGeometry(geometry) {\n    const type = geometry.getType();\n    switch (type) {\n      case 'Point':\n        this.drawPoint(\n          /** @type {import(\"../../geom/Point.js\").default} */ (geometry),\n        );\n        break;\n      case 'LineString':\n        this.drawLineString(\n          /** @type {import(\"../../geom/LineString.js\").default} */ (geometry),\n        );\n        break;\n      case 'Polygon':\n        this.drawPolygon(\n          /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry),\n        );\n        break;\n      case 'MultiPoint':\n        this.drawMultiPoint(\n          /** @type {import(\"../../geom/MultiPoint.js\").default} */ (geometry),\n        );\n        break;\n      case 'MultiLineString':\n        this.drawMultiLineString(\n          /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n            geometry\n          ),\n        );\n        break;\n      case 'MultiPolygon':\n        this.drawMultiPolygon(\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ),\n        );\n        break;\n      case 'GeometryCollection':\n        this.drawGeometryCollection(\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\n            geometry\n          ),\n        );\n        break;\n      case 'Circle':\n        this.drawCircle(\n          /** @type {import(\"../../geom/Circle.js\").default} */ (geometry),\n        );\n        break;\n      default:\n    }\n  }\n\n  /**\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\n   * style will be ignored - features are rendered immediately in the order that\n   * this method is called.  If you need `zIndex` support, you should be using an\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\n   *\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {import(\"../../style/Style.js\").default} style Style.\n   * @api\n   */\n  drawFeature(feature, style) {\n    const geometry = style.getGeometryFunction()(feature);\n    if (!geometry) {\n      return;\n    }\n    this.setStyle(style);\n    this.drawGeometry(geometry);\n  }\n\n  /**\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\n   * uses the current styles appropriate for each geometry in the collection.\n   *\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\n   */\n  drawGeometryCollection(geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      this.drawGeometry(geometries[i]);\n    }\n  }\n\n  /**\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\n   */\n  drawPoint(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/Point.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_,\n        )\n      );\n    }\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n\n  /**\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\n   * uses the current style.\n   *\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\n   */\n  drawMultiPoint(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_,\n        )\n      );\n    }\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n\n  /**\n   * Render a LineString into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\n   */\n  drawLineString(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/LineString.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_,\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      context.beginPath();\n      this.moveToLineTo_(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        geometry.getStride(),\n        false,\n      );\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      const flatMidpoint = geometry.getFlatMidpoint();\n      this.drawText_(flatMidpoint, 0, 2, 2);\n    }\n  }\n\n  /**\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\n   * and uses the current style.\n   *\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\n   */\n  drawMultiLineString(geometry) {\n    if (this.squaredTolerance_) {\n      geometry =\n        /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n          geometry.simplifyTransformed(\n            this.squaredTolerance_,\n            this.userTransform_,\n          )\n        );\n    }\n    const geometryExtent = geometry.getExtent();\n    if (!intersects(this.extent_, geometryExtent)) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      let offset = 0;\n      const ends = /** @type {Array<number>} */ (geometry.getEnds());\n      const stride = geometry.getStride();\n      context.beginPath();\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        offset = this.moveToLineTo_(\n          flatCoordinates,\n          offset,\n          ends[i],\n          stride,\n          false,\n        );\n      }\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      const flatMidpoints = geometry.getFlatMidpoints();\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n    }\n  }\n\n  /**\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\n   */\n  drawPolygon(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/Polygon.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_,\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const context = this.context_;\n      context.beginPath();\n      this.drawRings_(\n        geometry.getOrientedFlatCoordinates(),\n        0,\n        /** @type {Array<number>} */ (geometry.getEnds()),\n        geometry.getStride(),\n      );\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      const flatInteriorPoint = geometry.getFlatInteriorPoint();\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\n    }\n  }\n\n  /**\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\n   * uses the current style.\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   */\n  drawMultiPolygon(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_,\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const context = this.context_;\n      const flatCoordinates = geometry.getOrientedFlatCoordinates();\n      let offset = 0;\n      const endss = geometry.getEndss();\n      const stride = geometry.getStride();\n      context.beginPath();\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\n        const ends = endss[i];\n        offset = this.drawRings_(flatCoordinates, offset, ends, stride);\n      }\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      const flatInteriorPoints = geometry.getFlatInteriorPoints();\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\n   * @private\n   */\n  setContextFillState_(fillState) {\n    const context = this.context_;\n    const contextFillState = this.contextFillState_;\n    if (!contextFillState) {\n      context.fillStyle = fillState.fillStyle;\n      this.contextFillState_ = {\n        fillStyle: fillState.fillStyle,\n      };\n    } else {\n      if (contextFillState.fillStyle != fillState.fillStyle) {\n        contextFillState.fillStyle = fillState.fillStyle;\n        context.fillStyle = fillState.fillStyle;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\n   * @private\n   */\n  setContextStrokeState_(strokeState) {\n    const context = this.context_;\n    const contextStrokeState = this.contextStrokeState_;\n    if (!contextStrokeState) {\n      context.lineCap = strokeState.lineCap;\n      context.setLineDash(strokeState.lineDash);\n      context.lineDashOffset = strokeState.lineDashOffset;\n      context.lineJoin = strokeState.lineJoin;\n      context.lineWidth = strokeState.lineWidth;\n      context.miterLimit = strokeState.miterLimit;\n      context.strokeStyle = strokeState.strokeStyle;\n      this.contextStrokeState_ = {\n        lineCap: strokeState.lineCap,\n        lineDash: strokeState.lineDash,\n        lineDashOffset: strokeState.lineDashOffset,\n        lineJoin: strokeState.lineJoin,\n        lineWidth: strokeState.lineWidth,\n        miterLimit: strokeState.miterLimit,\n        strokeStyle: strokeState.strokeStyle,\n      };\n    } else {\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\n        contextStrokeState.lineCap = strokeState.lineCap;\n        context.lineCap = strokeState.lineCap;\n      }\n      if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\n        context.setLineDash(\n          (contextStrokeState.lineDash = strokeState.lineDash),\n        );\n      }\n      if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n        contextStrokeState.lineDashOffset = strokeState.lineDashOffset;\n        context.lineDashOffset = strokeState.lineDashOffset;\n      }\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n        contextStrokeState.lineJoin = strokeState.lineJoin;\n        context.lineJoin = strokeState.lineJoin;\n      }\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n        contextStrokeState.lineWidth = strokeState.lineWidth;\n        context.lineWidth = strokeState.lineWidth;\n      }\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n        contextStrokeState.miterLimit = strokeState.miterLimit;\n        context.miterLimit = strokeState.miterLimit;\n      }\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n        contextStrokeState.strokeStyle = strokeState.strokeStyle;\n        context.strokeStyle = strokeState.strokeStyle;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\n   * @private\n   */\n  setContextTextState_(textState) {\n    const context = this.context_;\n    const contextTextState = this.contextTextState_;\n    const textAlign = textState.textAlign\n      ? textState.textAlign\n      : defaultTextAlign;\n    if (!contextTextState) {\n      context.font = textState.font;\n      context.textAlign = textAlign;\n      context.textBaseline = textState.textBaseline;\n      this.contextTextState_ = {\n        font: textState.font,\n        textAlign: textAlign,\n        textBaseline: textState.textBaseline,\n      };\n    } else {\n      if (contextTextState.font != textState.font) {\n        contextTextState.font = textState.font;\n        context.font = textState.font;\n      }\n      if (contextTextState.textAlign != textAlign) {\n        contextTextState.textAlign = textAlign;\n        context.textAlign = textAlign;\n      }\n      if (contextTextState.textBaseline != textState.textBaseline) {\n        contextTextState.textBaseline = textState.textBaseline;\n        context.textBaseline = textState.textBaseline;\n      }\n    }\n  }\n\n  /**\n   * Set the fill and stroke style for subsequent draw operations.  To clear\n   * either fill or stroke styles, pass null for the appropriate parameter.\n   *\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    if (!fillStyle) {\n      this.fillState_ = null;\n    } else {\n      const fillStyleColor = fillStyle.getColor();\n      this.fillState_ = {\n        fillStyle: asColorLike(\n          fillStyleColor ? fillStyleColor : defaultFillStyle,\n        ),\n      };\n    }\n    if (!strokeStyle) {\n      this.strokeState_ = null;\n    } else {\n      const strokeStyleColor = strokeStyle.getColor();\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      const strokeStyleWidth = strokeStyle.getWidth();\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      const lineDash = strokeStyleLineDash\n        ? strokeStyleLineDash\n        : defaultLineDash;\n      this.strokeState_ = {\n        lineCap:\n          strokeStyleLineCap !== undefined\n            ? strokeStyleLineCap\n            : defaultLineCap,\n        lineDash:\n          this.pixelRatio_ === 1\n            ? lineDash\n            : lineDash.map((n) => n * this.pixelRatio_),\n        lineDashOffset:\n          (strokeStyleLineDashOffset\n            ? strokeStyleLineDashOffset\n            : defaultLineDashOffset) * this.pixelRatio_,\n        lineJoin:\n          strokeStyleLineJoin !== undefined\n            ? strokeStyleLineJoin\n            : defaultLineJoin,\n        lineWidth:\n          (strokeStyleWidth !== undefined\n            ? strokeStyleWidth\n            : defaultLineWidth) * this.pixelRatio_,\n        miterLimit:\n          strokeStyleMiterLimit !== undefined\n            ? strokeStyleMiterLimit\n            : defaultMiterLimit,\n        strokeStyle: asColorLike(\n          strokeStyleColor ? strokeStyleColor : defaultStrokeStyle,\n        ),\n      };\n    }\n  }\n\n  /**\n   * Set the image style for subsequent draw operations.  Pass null to remove\n   * the image style.\n   *\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\n   */\n  setImageStyle(imageStyle) {\n    let imageSize;\n    if (!imageStyle || !(imageSize = imageStyle.getSize())) {\n      this.image_ = null;\n      return;\n    }\n    const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);\n    const imageAnchor = imageStyle.getAnchor();\n    const imageOrigin = imageStyle.getOrigin();\n    this.image_ = imageStyle.getImage(this.pixelRatio_);\n    this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;\n    this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;\n    this.imageHeight_ = imageSize[1] * imagePixelRatio;\n    this.imageOpacity_ = imageStyle.getOpacity();\n    this.imageOriginX_ = imageOrigin[0];\n    this.imageOriginY_ = imageOrigin[1];\n    this.imageRotateWithView_ = imageStyle.getRotateWithView();\n    this.imageRotation_ = imageStyle.getRotation();\n    const imageScale = imageStyle.getScaleArray();\n    this.imageScale_ = [\n      (imageScale[0] * this.pixelRatio_) / imagePixelRatio,\n      (imageScale[1] * this.pixelRatio_) / imagePixelRatio,\n    ];\n    this.imageWidth_ = imageSize[0] * imagePixelRatio;\n  }\n\n  /**\n   * Set the text style for subsequent draw operations.  Pass null to\n   * remove the text style.\n   *\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   */\n  setTextStyle(textStyle) {\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        this.textFillState_ = null;\n      } else {\n        const textFillStyleColor = textFillStyle.getColor();\n        this.textFillState_ = {\n          fillStyle: asColorLike(\n            textFillStyleColor ? textFillStyleColor : defaultFillStyle,\n          ),\n        };\n      }\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        this.textStrokeState_ = null;\n      } else {\n        const textStrokeStyleColor = textStrokeStyle.getColor();\n        const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n        const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n        const textStrokeStyleLineDashOffset =\n          textStrokeStyle.getLineDashOffset();\n        const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n        const textStrokeStyleWidth = textStrokeStyle.getWidth();\n        const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n        this.textStrokeState_ = {\n          lineCap:\n            textStrokeStyleLineCap !== undefined\n              ? textStrokeStyleLineCap\n              : defaultLineCap,\n          lineDash: textStrokeStyleLineDash\n            ? textStrokeStyleLineDash\n            : defaultLineDash,\n          lineDashOffset: textStrokeStyleLineDashOffset\n            ? textStrokeStyleLineDashOffset\n            : defaultLineDashOffset,\n          lineJoin:\n            textStrokeStyleLineJoin !== undefined\n              ? textStrokeStyleLineJoin\n              : defaultLineJoin,\n          lineWidth:\n            textStrokeStyleWidth !== undefined\n              ? textStrokeStyleWidth\n              : defaultLineWidth,\n          miterLimit:\n            textStrokeStyleMiterLimit !== undefined\n              ? textStrokeStyleMiterLimit\n              : defaultMiterLimit,\n          strokeStyle: asColorLike(\n            textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle,\n          ),\n        };\n      }\n      const textFont = textStyle.getFont();\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      const textScale = textStyle.getScaleArray();\n      const textText = textStyle.getText();\n      const textTextAlign = textStyle.getTextAlign();\n      const textTextBaseline = textStyle.getTextBaseline();\n      this.textState_ = {\n        font: textFont !== undefined ? textFont : defaultFont,\n        textAlign:\n          textTextAlign !== undefined ? textTextAlign : defaultTextAlign,\n        textBaseline:\n          textTextBaseline !== undefined\n            ? textTextBaseline\n            : defaultTextBaseline,\n      };\n      this.text_ =\n        textText !== undefined\n          ? Array.isArray(textText)\n            ? textText.reduce((acc, t, i) => (acc += i % 2 ? ' ' : t), '')\n            : textText\n          : '';\n      this.textOffsetX_ =\n        textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\n      this.textOffsetY_ =\n        textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\n      this.textRotateWithView_ =\n        textRotateWithView !== undefined ? textRotateWithView : false;\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n      this.textScale_ = [\n        this.pixelRatio_ * textScale[0],\n        this.pixelRatio_ * textScale[1],\n      ];\n    }\n  }\n}\n\nexport default CanvasImmediateRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}