{"ast":null,"code":"/**\n * @module ol/source/Vector\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RBush from '../structs/RBush.js';\nimport RenderFeature from '../render/Feature.js';\nimport Source from './Source.js';\nimport VectorEventType from './VectorEventType.js';\nimport { TRUE, VOID } from '../functions.js';\nimport { all as allStrategy } from '../loadingstrategy.js';\nimport { assert } from '../asserts.js';\nimport { containsExtent, equals, wrapAndSliceX } from '../extent.js';\nimport { extend } from '../array.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { xhr } from '../featureloader.js';\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number, import(\"../proj/Projection.js\").default): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this\n * type.\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureClass=import(\"../Feature.js\").default]\n */\n\nexport class VectorSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {FeatureClass} [feature] Feature.\n   * @param {Array<FeatureClass>} [features] Features.\n   */\n  constructor(type, feature, features) {\n    super(type);\n    /**\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\n     * @type {FeatureClass|undefined}\n     * @api\n     */\n\n    this.feature = feature;\n    /**\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\n     * @type {Array<FeatureClass>|undefined}\n     * @api\n     */\n\n    this.features = features;\n  }\n\n}\n/***\n * @template {import(\"../Feature.js\").FeatureLike} [T=import(\"../Feature.js\").default]\n * @typedef {T extends RenderFeature ? T|Array<T> : T} FeatureClassOrArrayOfRenderFeatures\n */\n\n/***\n * @template Return\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent<FeatureType>, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\n */\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} FeatureType\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<FeatureType>|Collection<FeatureType>} [features]\n * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default<import(\"../format/Feature.js\").FeatureToFeatureClass<FeatureType>>} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader<FeatureType>} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\n * will only fire if the `success` and `failure` callbacks are used.\n *\n * Example:\n *\n * ```js\n * import Vector from 'ol/source/Vector.js';\n * import GeoJSON from 'ol/format/GeoJSON.js';\n * import {bbox} from 'ol/loadingstrategy.js';\n *\n * const vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection, success, failure) {\n *      const proj = projection.getCode();\n *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      const xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      const onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *        failure();\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);\n *          vectorSource.addFeatures(features);\n *          success(features);\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox,\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy.all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection~Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\n */\n\nclass VectorSource extends Source {\n  /**\n   * @param {Options<FeatureType>} [options] Vector source options.\n   */\n  constructor(options) {\n    options = options || {};\n    super({\n      attributions: options.attributions,\n      interpolate: true,\n      projection: undefined,\n      state: 'ready',\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    });\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey, FeatureType>}\n     */\n\n    this.on;\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey, FeatureType>}\n     */\n\n    this.once;\n    /***\n     * @type {VectorSourceOnSignature<void>}\n     */\n\n    this.un;\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader<FeatureType>}\n     */\n\n    this.loader_ = VOID;\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default<import('../format/Feature.js').FeatureToFeatureClass<FeatureType>>|undefined}\n     */\n\n    this.format_ = options.format;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, '`format` must be set when `url` is set'); // create a XHR feature loader for \"url\" and \"format\"\n\n      this.loader_ = xhr(this.url_, this.format_);\n    }\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n\n\n    this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n    const useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n    /**\n     * @private\n     * @type {RBush<FeatureType>}\n     */\n\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n\n    this.loadedExtentsRtree_ = new RBush();\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.loadingExtentsCount_ = 0;\n    /**\n     * @private\n     * @type {!Object<string, FeatureType>}\n     */\n\n    this.nullGeometryFeatures_ = {};\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import('../Feature.js').FeatureLike|Array<import('../Feature.js').FeatureLike>>}\n     */\n\n    this.idIndex_ = {};\n    /**\n     * A lookup of features by uid (using getUid(feature)).\n     * @private\n     * @type {!Object<string, FeatureType>}\n     */\n\n    this.uidIndex_ = {};\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n\n    this.featureChangeKeys_ = {};\n    /**\n     * @private\n     * @type {Collection<FeatureType>|null}\n     */\n\n    this.featuresCollection_ = null;\n    /** @type {Collection<FeatureType>} */\n\n    let collection;\n    /** @type {Array<FeatureType>} */\n\n    let features;\n\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n  }\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,\n   * meaning that if a feature with a duplicate id is added in the collection, it will\n   * be removed from it right away.\n   * @param {FeatureType} feature Feature to add.\n   * @api\n   */\n\n\n  addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  }\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {FeatureType} feature Feature.\n   * @protected\n   */\n\n\n  addFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n\n    if (!this.addToIndex_(featureKey, feature)) {\n      if (this.featuresCollection_) {\n        this.featuresCollection_.remove(feature);\n      }\n\n      return;\n    }\n\n    this.setupChangeEvents_(featureKey, feature);\n    const geometry = feature.getGeometry();\n\n    if (geometry) {\n      const extent = geometry.getExtent();\n\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n  }\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {FeatureType} feature The feature.\n   * @private\n   */\n\n\n  setupChangeEvents_(featureKey, feature) {\n    if (feature instanceof RenderFeature) {\n      return;\n    }\n\n    this.featureChangeKeys_[featureKey] = [listen(feature, EventType.CHANGE, this.handleFeatureChange_, this), listen(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this)];\n  }\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {FeatureType} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n\n\n  addToIndex_(featureKey, feature) {\n    let valid = true;\n\n    if (feature.getId() !== undefined) {\n      const id = String(feature.getId());\n\n      if (!(id in this.idIndex_)) {\n        this.idIndex_[id] = feature;\n      } else if (feature instanceof RenderFeature) {\n        const indexedFeature = this.idIndex_[id];\n\n        if (!(indexedFeature instanceof RenderFeature)) {\n          valid = false;\n        } else {\n          if (!Array.isArray(indexedFeature)) {\n            this.idIndex_[id] = [indexedFeature, feature];\n          } else {\n            indexedFeature.push(feature);\n          }\n        }\n      } else {\n        valid = false;\n      }\n    }\n\n    if (valid) {\n      assert(!(featureKey in this.uidIndex_), 'The passed `feature` was already added to the source');\n      this.uidIndex_[featureKey] = feature;\n    }\n\n    return valid;\n  }\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<FeatureType>} features Features to add.\n   * @api\n   */\n\n\n  addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  }\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<FeatureType>} features Features.\n   * @protected\n   */\n\n\n  addFeaturesInternal(features) {\n    const extents = [];\n    /** @type {Array<FeatureType>} */\n\n    const newFeatures = [];\n    /** @type Array<FeatureType> */\n\n    const geometryFeatures = [];\n\n    for (let i = 0, length = features.length; i < length; i++) {\n      const feature = features[i];\n      const featureKey = getUid(feature);\n\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      const feature = newFeatures[i];\n      const featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n      const geometry = feature.getGeometry();\n\n      if (geometry) {\n        const extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n\n    if (this.hasListener(VectorEventType.ADDFEATURE)) {\n      for (let i = 0, length = newFeatures.length; i < length; i++) {\n        this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));\n      }\n    }\n  }\n  /**\n   * @param {!Collection<FeatureType>} collection Collection.\n   * @private\n   */\n\n\n  bindFeaturesCollection_(collection) {\n    let modifyingCollection = false;\n    this.addEventListener(VectorEventType.ADDFEATURE,\n    /**\n     * @param {VectorSourceEvent<FeatureType>} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.push(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    this.addEventListener(VectorEventType.REMOVEFEATURE,\n    /**\n     * @param {VectorSourceEvent<FeatureType>} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.remove(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    collection.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent<FeatureType>} evt The collection event\n     */\n    evt => {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.addFeature(evt.element);\n        modifyingCollection = false;\n      }\n    });\n    collection.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent<FeatureType>} evt The collection event\n     */\n    evt => {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.removeFeature(evt.element);\n        modifyingCollection = false;\n      }\n    });\n    this.featuresCollection_ = collection;\n  }\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.\n   * @api\n   */\n\n\n  clear(fast) {\n    if (fast) {\n      for (const featureId in this.featureChangeKeys_) {\n        const keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.uidIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        const removeAndIgnoreReturn = feature => {\n          this.removeFeatureInternal(feature);\n        };\n\n        this.featuresRtree_.forEach(removeAndIgnoreReturn);\n\n        for (const id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n\n    this.nullGeometryFeatures_ = {};\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  }\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(FeatureType): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n\n\n  forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    }\n\n    if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * For {@link module:ol/render/Feature~RenderFeature} features, the callback will be\n   * called for all features.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(FeatureType): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n\n\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      const geometry = feature.getGeometry();\n\n      if (geometry instanceof RenderFeature || geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      }\n\n      return undefined;\n    });\n  }\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(FeatureType): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n\n\n  forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    }\n\n    if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(FeatureType): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n\n\n  forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(extent,\n    /**\n     * @param {FeatureType} feature Feature.\n     * @return {T|undefined} The return value from the last call to the callback.\n     */\n    function (feature) {\n      const geometry = feature.getGeometry();\n\n      if (geometry instanceof RenderFeature || geometry.intersectsExtent(extent)) {\n        const result = callback(feature);\n\n        if (result) {\n          return result;\n        }\n      }\n    });\n  }\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection~Collection} as `features`.\n   * @return {Collection<FeatureType>|null} The collection of features.\n   * @api\n   */\n\n\n  getFeaturesCollection() {\n    return this.featuresCollection_;\n  }\n  /**\n   * Get a snapshot of the features currently on the source in random order. The returned array\n   * is a copy, the features are references to the features in the source.\n   * @return {Array<FeatureType>} Features.\n   * @api\n   */\n\n\n  getFeatures() {\n    let features;\n\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray().slice(0);\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, Object.values(this.nullGeometryFeatures_));\n      }\n    }\n\n    return features;\n  }\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n\n\n  getFeaturesAtCoordinate(coordinate) {\n    const features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  }\n  /**\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * When `useSpatialIndex` is set to false, this method will return all\n   * features.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Include features\n   * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.\n   * @return {Array<FeatureType>} Features.\n   * @api\n   */\n\n\n  getFeaturesInExtent(extent, projection) {\n    if (this.featuresRtree_) {\n      const multiWorld = projection && projection.canWrapX() && this.getWrapX();\n\n      if (!multiWorld) {\n        return this.featuresRtree_.getInExtent(extent);\n      }\n\n      const extents = wrapAndSliceX(extent, projection);\n      return [].concat(...extents.map(anExtent => this.featuresRtree_.getInExtent(anExtent)));\n    }\n\n    if (this.featuresCollection_) {\n      return this.featuresCollection_.getArray().slice(0);\n    }\n\n    return [];\n  }\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false` and the features in this source are of type\n   * {@link module:ol/Feature~Feature}.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(FeatureType):boolean} [filter] Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {FeatureType} Closest feature.\n   * @api\n   */\n\n\n  getClosestFeatureToCoordinate(coordinate, filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let closestFeature = null;\n    const closestPoint = [NaN, NaN];\n    let minSquaredDistance = Infinity;\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\n    filter = filter ? filter : TRUE;\n    this.featuresRtree_.forEachInExtent(extent,\n    /**\n     * @param {FeatureType} feature Feature.\n     */\n    function (feature) {\n      if (filter(feature)) {\n        const geometry = feature.getGeometry();\n        const previousMinSquaredDistance = minSquaredDistance;\n        minSquaredDistance = geometry instanceof RenderFeature ? 0 : geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n\n        if (minSquaredDistance < previousMinSquaredDistance) {\n          closestFeature = feature; // This is sneaky.  Reduce the extent that it is currently being\n          // searched while the R-Tree traversal using this same extent object\n          // is still in progress.  This is safe because the new extent is\n          // strictly contained by the old extent.\n\n          const minDistance = Math.sqrt(minSquaredDistance);\n          extent[0] = x - minDistance;\n          extent[1] = y - minDistance;\n          extent[2] = x + minDistance;\n          extent[3] = y + minDistance;\n        }\n      }\n    });\n    return closestFeature;\n  }\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} [extent] Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  getExtent(extent) {\n    return this.featuresRtree_.getExtent(extent);\n  }\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()). When `RenderFeature`s\n   * are used, `getFeatureById()` can return an array of `RenderFeature`s. This allows for handling\n   * of `GeometryCollection` geometries, where format readers create one `RenderFeature` per\n   * `GeometryCollection` member.\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {FeatureClassOrArrayOfRenderFeatures<FeatureType>|null} The feature (or `null` if not found).\n   * @api\n   */\n\n\n  getFeatureById(id) {\n    const feature = this.idIndex_[id.toString()];\n    return feature !== undefined ?\n    /** @type {FeatureClassOrArrayOfRenderFeatures<FeatureType>} */\n    feature : null;\n  }\n  /**\n   * Get a feature by its internal unique identifier (using `getUid`).\n   *\n   * @param {string} uid Feature identifier.\n   * @return {FeatureType|null} The feature (or `null` if not found).\n   */\n\n\n  getFeatureByUid(uid) {\n    const feature = this.uidIndex_[uid];\n    return feature !== undefined ? feature : null;\n  }\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default<import('../format/Feature.js').FeatureToFeatureClass<FeatureType>>|undefined} The feature format.\n   * @api\n   */\n\n\n  getFormat() {\n    return this.format_;\n  }\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n\n\n  getOverlaps() {\n    return this.overlaps_;\n  }\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n\n\n  getUrl() {\n    return this.url_;\n  }\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n\n\n  handleFeatureChange_(event) {\n    const feature =\n    /** @type {FeatureType} */\n    event.target;\n    const featureKey = getUid(feature);\n    const geometry = feature.getGeometry();\n\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      const extent = geometry.getExtent();\n\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n\n    const id = feature.getId();\n\n    if (id !== undefined) {\n      const sid = id.toString();\n\n      if (this.idIndex_[sid] !== feature) {\n        this.removeFromIdIndex_(feature);\n        this.idIndex_[sid] = feature;\n      }\n    } else {\n      this.removeFromIdIndex_(feature);\n      this.uidIndex_[featureKey] = feature;\n    }\n\n    this.changed();\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));\n  }\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {FeatureType} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n\n\n  hasFeature(feature) {\n    const id = feature.getId();\n\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    }\n\n    return getUid(feature) in this.uidIndex_;\n  }\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  isEmpty() {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n    }\n\n    if (this.featuresCollection_) {\n      return this.featuresCollection_.getLength() === 0;\n    }\n\n    return true;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  loadFeatures(extent, resolution, projection) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    const extentsToLoad = this.strategy_(extent, resolution, projection);\n\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      const extentToLoad = extentsToLoad[i];\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n      /**\n       * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n       * @return {boolean} Contains.\n       */\n      function (object) {\n        return containsExtent(object.extent, extentToLoad);\n      });\n\n      if (!alreadyLoaded) {\n        ++this.loadingExtentsCount_;\n        this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADSTART));\n        this.loader_.call(this, extentToLoad, resolution, projection, features => {\n          --this.loadingExtentsCount_;\n          this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADEND, undefined, features));\n        }, () => {\n          --this.loadingExtentsCount_;\n          this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADERROR));\n        });\n        loadedExtentsRtree.insert(extentToLoad, {\n          extent: extentToLoad.slice()\n        });\n      }\n    }\n\n    this.loading = this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\n  }\n\n  refresh() {\n    this.clear(true);\n    this.loadedExtentsRtree_.clear();\n    super.refresh();\n  }\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n\n\n  removeLoadedExtent(extent) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    let obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  }\n  /**\n   * Batch remove features from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {Array<FeatureType>} features Features to remove.\n   * @api\n   */\n\n\n  removeFeatures(features) {\n    const removedFeatures = [];\n\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      const feature = features[i];\n      const removedFeature = this.removeFeatureInternal(feature);\n\n      if (removedFeature) {\n        removedFeatures.push(removedFeature);\n      }\n    }\n\n    if (removedFeatures.length > 0) {\n      this.changed();\n    }\n  }\n  /**\n   * Remove a single feature from the source. If you want to batch remove\n   * features, use the {@link module:ol/source/Vector~VectorSource#removeFeatures #removeFeatures()} method\n   * instead.\n   * @param {FeatureType} feature Feature to remove.\n   * @api\n   */\n\n\n  removeFeature(feature) {\n    if (!feature) {\n      return;\n    }\n\n    const result = this.removeFeatureInternal(feature);\n\n    if (result) {\n      this.changed();\n    }\n  }\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {FeatureType} feature Feature.\n   * @return {FeatureType|undefined} The removed feature\n   *     (or undefined if the feature was not found).\n   * @protected\n   */\n\n\n  removeFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n\n    if (!(featureKey in this.uidIndex_)) {\n      return;\n    }\n\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n\n    const featureChangeKeys = this.featureChangeKeys_[featureKey];\n    featureChangeKeys?.forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    const id = feature.getId();\n\n    if (id !== undefined) {\n      const idString = id.toString();\n      const indexedFeature = this.idIndex_[idString];\n\n      if (indexedFeature === feature) {\n        delete this.idIndex_[idString];\n      } else if (Array.isArray(indexedFeature)) {\n        indexedFeature.splice(indexedFeature.indexOf(feature), 1);\n\n        if (indexedFeature.length === 1) {\n          this.idIndex_[idString] = indexedFeature[0];\n        }\n      }\n    }\n\n    delete this.uidIndex_[featureKey];\n\n    if (this.hasListener(VectorEventType.REMOVEFEATURE)) {\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));\n    }\n\n    return feature;\n  }\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {FeatureType} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n\n\n  removeFromIdIndex_(feature) {\n    let removed = false;\n\n    for (const id in this.idIndex_) {\n      const indexedFeature = this.idIndex_[id];\n\n      if (feature instanceof RenderFeature && Array.isArray(indexedFeature) && indexedFeature.includes(feature)) {\n        indexedFeature.splice(indexedFeature.indexOf(feature), 1);\n      } else if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n\n    return removed;\n  }\n  /**\n   * Set the new loader of the source. The next render cycle will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader<FeatureType>} loader The loader to set.\n   * @api\n   */\n\n\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n  /**\n   * Points the source to a new url. The next render cycle will use the new url.\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n   * @api\n   */\n\n\n  setUrl(url) {\n    assert(this.format_, '`format` must be set when `url` is set');\n    this.url_ = url;\n    this.setLoader(xhr(url, this.format_));\n  }\n\n}\n\nexport default VectorSource;","map":{"version":3,"names":["Collection","CollectionEventType","Event","EventType","ObjectEventType","RBush","RenderFeature","Source","VectorEventType","TRUE","VOID","all","allStrategy","assert","containsExtent","equals","wrapAndSliceX","extend","getUid","isEmpty","listen","unlistenByKey","xhr","VectorSourceEvent","constructor","type","feature","features","VectorSource","options","attributions","interpolate","projection","undefined","state","wrapX","on","once","un","loader_","format_","format","overlaps_","overlaps","url_","url","loader","strategy_","strategy","useSpatialIndex","featuresRtree_","loadedExtentsRtree_","loadingExtentsCount_","nullGeometryFeatures_","idIndex_","uidIndex_","featureChangeKeys_","featuresCollection_","collection","Array","isArray","getArray","addFeaturesInternal","bindFeaturesCollection_","addFeature","addFeatureInternal","changed","featureKey","addToIndex_","remove","setupChangeEvents_","geometry","getGeometry","extent","getExtent","insert","dispatchEvent","ADDFEATURE","CHANGE","handleFeatureChange_","PROPERTYCHANGE","valid","getId","id","String","indexedFeature","push","addFeatures","extents","newFeatures","geometryFeatures","i","length","load","hasListener","modifyingCollection","addEventListener","evt","REMOVEFEATURE","ADD","element","REMOVE","removeFeature","clear","fast","featureId","keys","forEach","removeAndIgnoreReturn","removeFeatureInternal","clearEvent","CLEAR","forEachFeature","callback","forEachFeatureAtCoordinateDirect","coordinate","forEachFeatureInExtent","intersectsCoordinate","forEachInExtent","forEachFeatureIntersectingExtent","intersectsExtent","result","getFeaturesCollection","getFeatures","slice","getAll","Object","values","getFeaturesAtCoordinate","getFeaturesInExtent","multiWorld","canWrapX","getWrapX","getInExtent","concat","map","anExtent","getClosestFeatureToCoordinate","filter","x","y","closestFeature","closestPoint","NaN","minSquaredDistance","Infinity","previousMinSquaredDistance","closestPointXY","minDistance","Math","sqrt","getFeatureById","toString","getFeatureByUid","uid","getFormat","getOverlaps","getUrl","event","target","update","sid","removeFromIdIndex_","CHANGEFEATURE","hasFeature","getLength","loadFeatures","resolution","loadedExtentsRtree","extentsToLoad","ii","extentToLoad","alreadyLoaded","object","FEATURESLOADSTART","call","FEATURESLOADEND","FEATURESLOADERROR","loading","refresh","removeLoadedExtent","obj","removeFeatures","removedFeatures","removedFeature","featureChangeKeys","idString","splice","indexOf","removed","includes","setLoader","setUrl"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/source/Vector.js"],"sourcesContent":["/**\n * @module ol/source/Vector\n */\n\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RBush from '../structs/RBush.js';\nimport RenderFeature from '../render/Feature.js';\nimport Source from './Source.js';\nimport VectorEventType from './VectorEventType.js';\nimport {TRUE, VOID} from '../functions.js';\nimport {all as allStrategy} from '../loadingstrategy.js';\nimport {assert} from '../asserts.js';\nimport {containsExtent, equals, wrapAndSliceX} from '../extent.js';\nimport {extend} from '../array.js';\nimport {getUid} from '../util.js';\nimport {isEmpty} from '../obj.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {xhr} from '../featureloader.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number, import(\"../proj/Projection.js\").default): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this\n * type.\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureClass=import(\"../Feature.js\").default]\n */\nexport class VectorSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {FeatureClass} [feature] Feature.\n   * @param {Array<FeatureClass>} [features] Features.\n   */\n  constructor(type, feature, features) {\n    super(type);\n\n    /**\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\n     * @type {FeatureClass|undefined}\n     * @api\n     */\n    this.feature = feature;\n\n    /**\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\n     * @type {Array<FeatureClass>|undefined}\n     * @api\n     */\n    this.features = features;\n  }\n}\n\n/***\n * @template {import(\"../Feature.js\").FeatureLike} [T=import(\"../Feature.js\").default]\n * @typedef {T extends RenderFeature ? T|Array<T> : T} FeatureClassOrArrayOfRenderFeatures\n */\n\n/***\n * @template Return\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent<FeatureType>, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\n */\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} FeatureType\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<FeatureType>|Collection<FeatureType>} [features]\n * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default<import(\"../format/Feature.js\").FeatureToFeatureClass<FeatureType>>} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader<FeatureType>} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\n * will only fire if the `success` and `failure` callbacks are used.\n *\n * Example:\n *\n * ```js\n * import Vector from 'ol/source/Vector.js';\n * import GeoJSON from 'ol/format/GeoJSON.js';\n * import {bbox} from 'ol/loadingstrategy.js';\n *\n * const vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection, success, failure) {\n *      const proj = projection.getCode();\n *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      const xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      const onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *        failure();\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);\n *          vectorSource.addFeatures(features);\n *          success(features);\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox,\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy.all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection~Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\n */\nclass VectorSource extends Source {\n  /**\n   * @param {Options<FeatureType>} [options] Vector source options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: true,\n      projection: undefined,\n      state: 'ready',\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    });\n\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey, FeatureType>}\n     */\n    this.on;\n\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey, FeatureType>}\n     */\n    this.once;\n\n    /***\n     * @type {VectorSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader<FeatureType>}\n     */\n    this.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default<import('../format/Feature.js').FeatureToFeatureClass<FeatureType>>|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, '`format` must be set when `url` is set');\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(this.url_, this.format_);\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    this.strategy_ =\n      options.strategy !== undefined ? options.strategy : allStrategy;\n\n    const useSpatialIndex =\n      options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<FeatureType>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.loadingExtentsCount_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, FeatureType>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import('../Feature.js').FeatureLike|Array<import('../Feature.js').FeatureLike>>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features by uid (using getUid(feature)).\n     * @private\n     * @type {!Object<string, FeatureType>}\n     */\n    this.uidIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<FeatureType>|null}\n     */\n    this.featuresCollection_ = null;\n\n    /** @type {Collection<FeatureType>} */\n    let collection;\n    /** @type {Array<FeatureType>} */\n    let features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n  }\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,\n   * meaning that if a feature with a duplicate id is added in the collection, it will\n   * be removed from it right away.\n   * @param {FeatureType} feature Feature to add.\n   * @api\n   */\n  addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  }\n\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {FeatureType} feature Feature.\n   * @protected\n   */\n  addFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n\n    if (!this.addToIndex_(featureKey, feature)) {\n      if (this.featuresCollection_) {\n        this.featuresCollection_.remove(feature);\n      }\n      return;\n    }\n\n    this.setupChangeEvents_(featureKey, feature);\n\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature),\n    );\n  }\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {FeatureType} feature The feature.\n   * @private\n   */\n  setupChangeEvents_(featureKey, feature) {\n    if (feature instanceof RenderFeature) {\n      return;\n    }\n    this.featureChangeKeys_[featureKey] = [\n      listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),\n      listen(\n        feature,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleFeatureChange_,\n        this,\n      ),\n    ];\n  }\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {FeatureType} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  addToIndex_(featureKey, feature) {\n    let valid = true;\n    if (feature.getId() !== undefined) {\n      const id = String(feature.getId());\n      if (!(id in this.idIndex_)) {\n        this.idIndex_[id] = feature;\n      } else if (feature instanceof RenderFeature) {\n        const indexedFeature = this.idIndex_[id];\n        if (!(indexedFeature instanceof RenderFeature)) {\n          valid = false;\n        } else {\n          if (!Array.isArray(indexedFeature)) {\n            this.idIndex_[id] = [indexedFeature, feature];\n          } else {\n            indexedFeature.push(feature);\n          }\n        }\n      } else {\n        valid = false;\n      }\n    }\n    if (valid) {\n      assert(\n        !(featureKey in this.uidIndex_),\n        'The passed `feature` was already added to the source',\n      );\n      this.uidIndex_[featureKey] = feature;\n    }\n    return valid;\n  }\n\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<FeatureType>} features Features to add.\n   * @api\n   */\n  addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  }\n\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<FeatureType>} features Features.\n   * @protected\n   */\n  addFeaturesInternal(features) {\n    const extents = [];\n    /** @type {Array<FeatureType>} */\n    const newFeatures = [];\n    /** @type Array<FeatureType> */\n    const geometryFeatures = [];\n\n    for (let i = 0, length = features.length; i < length; i++) {\n      const feature = features[i];\n      const featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      const feature = newFeatures[i];\n      const featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n\n      const geometry = feature.getGeometry();\n      if (geometry) {\n        const extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n\n    if (this.hasListener(VectorEventType.ADDFEATURE)) {\n      for (let i = 0, length = newFeatures.length; i < length; i++) {\n        this.dispatchEvent(\n          new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]),\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!Collection<FeatureType>} collection Collection.\n   * @private\n   */\n  bindFeaturesCollection_(collection) {\n    let modifyingCollection = false;\n    this.addEventListener(\n      VectorEventType.ADDFEATURE,\n      /**\n       * @param {VectorSourceEvent<FeatureType>} evt The vector source event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.push(evt.feature);\n          modifyingCollection = false;\n        }\n      },\n    );\n    this.addEventListener(\n      VectorEventType.REMOVEFEATURE,\n      /**\n       * @param {VectorSourceEvent<FeatureType>} evt The vector source event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.remove(evt.feature);\n          modifyingCollection = false;\n        }\n      },\n    );\n    collection.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent<FeatureType>} evt The collection event\n       */\n      (evt) => {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.addFeature(evt.element);\n          modifyingCollection = false;\n        }\n      },\n    );\n    collection.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent<FeatureType>} evt The collection event\n       */\n      (evt) => {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.removeFeature(evt.element);\n          modifyingCollection = false;\n        }\n      },\n    );\n    this.featuresCollection_ = collection;\n  }\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.\n   * @api\n   */\n  clear(fast) {\n    if (fast) {\n      for (const featureId in this.featureChangeKeys_) {\n        const keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.uidIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        const removeAndIgnoreReturn = (feature) => {\n          this.removeFeatureInternal(feature);\n        };\n        this.featuresRtree_.forEach(removeAndIgnoreReturn);\n        for (const id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.nullGeometryFeatures_ = {};\n\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  }\n\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(FeatureType): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * For {@link module:ol/render/Feature~RenderFeature} features, the callback will be\n   * called for all features.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(FeatureType): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      const geometry = feature.getGeometry();\n      if (\n        geometry instanceof RenderFeature ||\n        geometry.intersectsCoordinate(coordinate)\n      ) {\n        return callback(feature);\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(FeatureType): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(FeatureType): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(\n      extent,\n      /**\n       * @param {FeatureType} feature Feature.\n       * @return {T|undefined} The return value from the last call to the callback.\n       */\n      function (feature) {\n        const geometry = feature.getGeometry();\n        if (\n          geometry instanceof RenderFeature ||\n          geometry.intersectsExtent(extent)\n        ) {\n          const result = callback(feature);\n          if (result) {\n            return result;\n          }\n        }\n      },\n    );\n  }\n\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection~Collection} as `features`.\n   * @return {Collection<FeatureType>|null} The collection of features.\n   * @api\n   */\n  getFeaturesCollection() {\n    return this.featuresCollection_;\n  }\n\n  /**\n   * Get a snapshot of the features currently on the source in random order. The returned array\n   * is a copy, the features are references to the features in the source.\n   * @return {Array<FeatureType>} Features.\n   * @api\n   */\n  getFeatures() {\n    let features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray().slice(0);\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, Object.values(this.nullGeometryFeatures_));\n      }\n    }\n    return features;\n  }\n\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  getFeaturesAtCoordinate(coordinate) {\n    const features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  }\n\n  /**\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * When `useSpatialIndex` is set to false, this method will return all\n   * features.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Include features\n   * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.\n   * @return {Array<FeatureType>} Features.\n   * @api\n   */\n  getFeaturesInExtent(extent, projection) {\n    if (this.featuresRtree_) {\n      const multiWorld = projection && projection.canWrapX() && this.getWrapX();\n\n      if (!multiWorld) {\n        return this.featuresRtree_.getInExtent(extent);\n      }\n\n      const extents = wrapAndSliceX(extent, projection);\n\n      return [].concat(\n        ...extents.map((anExtent) => this.featuresRtree_.getInExtent(anExtent)),\n      );\n    }\n    if (this.featuresCollection_) {\n      return this.featuresCollection_.getArray().slice(0);\n    }\n    return [];\n  }\n\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false` and the features in this source are of type\n   * {@link module:ol/Feature~Feature}.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(FeatureType):boolean} [filter] Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {FeatureType} Closest feature.\n   * @api\n   */\n  getClosestFeatureToCoordinate(coordinate, filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let closestFeature = null;\n    const closestPoint = [NaN, NaN];\n    let minSquaredDistance = Infinity;\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\n    filter = filter ? filter : TRUE;\n    this.featuresRtree_.forEachInExtent(\n      extent,\n      /**\n       * @param {FeatureType} feature Feature.\n       */\n      function (feature) {\n        if (filter(feature)) {\n          const geometry = feature.getGeometry();\n          const previousMinSquaredDistance = minSquaredDistance;\n          minSquaredDistance =\n            geometry instanceof RenderFeature\n              ? 0\n              : geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n          if (minSquaredDistance < previousMinSquaredDistance) {\n            closestFeature = feature;\n            // This is sneaky.  Reduce the extent that it is currently being\n            // searched while the R-Tree traversal using this same extent object\n            // is still in progress.  This is safe because the new extent is\n            // strictly contained by the old extent.\n            const minDistance = Math.sqrt(minSquaredDistance);\n            extent[0] = x - minDistance;\n            extent[1] = y - minDistance;\n            extent[2] = x + minDistance;\n            extent[3] = y + minDistance;\n          }\n        }\n      },\n    );\n    return closestFeature;\n  }\n\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} [extent] Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent(extent) {\n    return this.featuresRtree_.getExtent(extent);\n  }\n\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()). When `RenderFeature`s\n   * are used, `getFeatureById()` can return an array of `RenderFeature`s. This allows for handling\n   * of `GeometryCollection` geometries, where format readers create one `RenderFeature` per\n   * `GeometryCollection` member.\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {FeatureClassOrArrayOfRenderFeatures<FeatureType>|null} The feature (or `null` if not found).\n   * @api\n   */\n  getFeatureById(id) {\n    const feature = this.idIndex_[id.toString()];\n    return feature !== undefined\n      ? /** @type {FeatureClassOrArrayOfRenderFeatures<FeatureType>} */ (\n          feature\n        )\n      : null;\n  }\n\n  /**\n   * Get a feature by its internal unique identifier (using `getUid`).\n   *\n   * @param {string} uid Feature identifier.\n   * @return {FeatureType|null} The feature (or `null` if not found).\n   */\n  getFeatureByUid(uid) {\n    const feature = this.uidIndex_[uid];\n    return feature !== undefined ? feature : null;\n  }\n\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default<import('../format/Feature.js').FeatureToFeatureClass<FeatureType>>|undefined} The feature format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  handleFeatureChange_(event) {\n    const feature = /** @type {FeatureType} */ (event.target);\n    const featureKey = getUid(feature);\n    const geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      const extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    const id = feature.getId();\n    if (id !== undefined) {\n      const sid = id.toString();\n      if (this.idIndex_[sid] !== feature) {\n        this.removeFromIdIndex_(feature);\n        this.idIndex_[sid] = feature;\n      }\n    } else {\n      this.removeFromIdIndex_(feature);\n      this.uidIndex_[featureKey] = feature;\n    }\n    this.changed();\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature),\n    );\n  }\n\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {FeatureType} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  hasFeature(feature) {\n    const id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    }\n    return getUid(feature) in this.uidIndex_;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    if (this.featuresRtree_) {\n      return (\n        this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_)\n      );\n    }\n    if (this.featuresCollection_) {\n      return this.featuresCollection_.getLength() === 0;\n    }\n    return true;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  loadFeatures(extent, resolution, projection) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    const extentsToLoad = this.strategy_(extent, resolution, projection);\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      const extentToLoad = extentsToLoad[i];\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(\n        extentToLoad,\n        /**\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n         * @return {boolean} Contains.\n         */\n        function (object) {\n          return containsExtent(object.extent, extentToLoad);\n        },\n      );\n      if (!alreadyLoaded) {\n        ++this.loadingExtentsCount_;\n        this.dispatchEvent(\n          new VectorSourceEvent(VectorEventType.FEATURESLOADSTART),\n        );\n        this.loader_.call(\n          this,\n          extentToLoad,\n          resolution,\n          projection,\n          (features) => {\n            --this.loadingExtentsCount_;\n            this.dispatchEvent(\n              new VectorSourceEvent(\n                VectorEventType.FEATURESLOADEND,\n                undefined,\n                features,\n              ),\n            );\n          },\n          () => {\n            --this.loadingExtentsCount_;\n            this.dispatchEvent(\n              new VectorSourceEvent(VectorEventType.FEATURESLOADERROR),\n            );\n          },\n        );\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\n      }\n    }\n    this.loading =\n      this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\n  }\n\n  refresh() {\n    this.clear(true);\n    this.loadedExtentsRtree_.clear();\n    super.refresh();\n  }\n\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  removeLoadedExtent(extent) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    let obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  }\n\n  /**\n   * Batch remove features from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {Array<FeatureType>} features Features to remove.\n   * @api\n   */\n  removeFeatures(features) {\n    const removedFeatures = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      const feature = features[i];\n      const removedFeature = this.removeFeatureInternal(feature);\n      if (removedFeature) {\n        removedFeatures.push(removedFeature);\n      }\n    }\n    if (removedFeatures.length > 0) {\n      this.changed();\n    }\n  }\n\n  /**\n   * Remove a single feature from the source. If you want to batch remove\n   * features, use the {@link module:ol/source/Vector~VectorSource#removeFeatures #removeFeatures()} method\n   * instead.\n   * @param {FeatureType} feature Feature to remove.\n   * @api\n   */\n  removeFeature(feature) {\n    if (!feature) {\n      return;\n    }\n    const result = this.removeFeatureInternal(feature);\n    if (result) {\n      this.changed();\n    }\n  }\n\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {FeatureType} feature Feature.\n   * @return {FeatureType|undefined} The removed feature\n   *     (or undefined if the feature was not found).\n   * @protected\n   */\n  removeFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n    if (!(featureKey in this.uidIndex_)) {\n      return;\n    }\n\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n\n    const featureChangeKeys = this.featureChangeKeys_[featureKey];\n    featureChangeKeys?.forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n\n    const id = feature.getId();\n    if (id !== undefined) {\n      const idString = id.toString();\n      const indexedFeature = this.idIndex_[idString];\n      if (indexedFeature === feature) {\n        delete this.idIndex_[idString];\n      } else if (Array.isArray(indexedFeature)) {\n        indexedFeature.splice(indexedFeature.indexOf(feature), 1);\n        if (indexedFeature.length === 1) {\n          this.idIndex_[idString] = indexedFeature[0];\n        }\n      }\n    }\n    delete this.uidIndex_[featureKey];\n    if (this.hasListener(VectorEventType.REMOVEFEATURE)) {\n      this.dispatchEvent(\n        new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature),\n      );\n    }\n    return feature;\n  }\n\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {FeatureType} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  removeFromIdIndex_(feature) {\n    let removed = false;\n    for (const id in this.idIndex_) {\n      const indexedFeature = this.idIndex_[id];\n      if (\n        feature instanceof RenderFeature &&\n        Array.isArray(indexedFeature) &&\n        indexedFeature.includes(feature)\n      ) {\n        indexedFeature.splice(indexedFeature.indexOf(feature), 1);\n      } else if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  }\n\n  /**\n   * Set the new loader of the source. The next render cycle will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader<FeatureType>} loader The loader to set.\n   * @api\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n  /**\n   * Points the source to a new url. The next render cycle will use the new url.\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n   * @api\n   */\n  setUrl(url) {\n    assert(this.format_, '`format` must be set when `url` is set');\n    this.url_ = url;\n    this.setLoader(xhr(url, this.format_));\n  }\n}\n\nexport default VectorSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}