{"ast":null,"code":"/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport ZIndexContext from '../../render/canvas/ZIndexContext.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform, makeInverse, toString as toTransformString } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\nimport { getBottomLeft, getBottomRight, getHeight, getTopLeft, getTopRight, getWidth } from '../../extent.js';\n/**\n * @type {Array<HTMLCanvasElement>}\n */\n\nexport const canvasPool = [];\n/**\n * @type {CanvasRenderingContext2D}\n */\n\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true\n  });\n}\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\n\n\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n    this.container = null;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.renderedResolution;\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.tempTransform = createTransform();\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.pixelTransform = createTransform();\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.inversePixelTransform = createTransform();\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n\n    this.context = null;\n    /**\n     * @private\n     * @type {ZIndexContext}\n     */\n\n    this.deferredContext_ = null;\n    /**\n     * @type {boolean}\n     */\n\n    this.containerReused = false;\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n\n    this.pixelContext_ = null;\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n\n    this.frameState = null;\n  }\n  /**\n   * @param {import('../../DataTile.js').ImageLike} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n\n\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n\n    pixelContext.clearRect(0, 0, 1, 1);\n    let data;\n\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n\n    return data;\n  }\n  /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n\n\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n\n    return background || undefined;\n  }\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */\n\n\n  useContainer(target, transform, backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n\n    if (target && target.className === layerClassName && (!backgroundColor || target && target.style.backgroundColor && equals(asArray(target.style.backgroundColor), asArray(backgroundColor)))) {\n      const canvas = target.firstElementChild;\n\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    } else if (this.container) {\n      this.container.style.backgroundColor = null;\n    }\n\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n\n    if (!this.containerReused && backgroundColor && !this.container.style.backgroundColor) {\n      this.container.style.backgroundColor = backgroundColor;\n    }\n  }\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n\n\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @protected\n   */\n\n\n  prepareContainer(frameState, target) {\n    const extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n    const width = Math.round(getWidth(extent) / resolution * pixelRatio);\n    const height = Math.round(getHeight(extent) / resolution * pixelRatio); // set forward and inverse pixel transforms\n\n    composeTransform(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n    const canvasTransform = toTransformString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n\n    if (!this.containerReused) {\n      const canvas = this.context.canvas;\n\n      if (canvas.width != width || canvas.height != height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        this.context.clearRect(0, 0, width, height);\n      }\n\n      if (canvasTransform !== canvas.style.transform) {\n        canvas.style.transform = canvasTransform;\n      }\n    }\n  }\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n      layer.dispatchEvent(event);\n    }\n  }\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  preRender(context, frameState) {\n    this.frameState = frameState;\n\n    if (frameState.declutter) {\n      return;\n    }\n\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  postRender(context, frameState) {\n    if (frameState.declutter) {\n      return;\n    }\n\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n\n\n  renderDeferredInternal(frameState) {}\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {import('../../render/canvas/ZIndexContext.js').ZIndexContextProxy} Context.\n   */\n\n\n  getRenderContext(frameState) {\n    if (frameState.declutter && !this.deferredContext_) {\n      this.deferredContext_ = new ZIndexContext();\n    }\n\n    return frameState.declutter ? this.deferredContext_.getContext() : this.context;\n  }\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @override\n   */\n\n\n  renderDeferred(frameState) {\n    if (!frameState.declutter) {\n      return;\n    }\n\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, this.context, frameState);\n\n    if (frameState.declutter && this.deferredContext_) {\n      this.deferredContext_.draw(this.context);\n      this.deferredContext_.clear();\n    }\n\n    this.renderDeferredInternal(frameState);\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, this.context, frameState);\n  }\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n\n\n  getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n  }\n  /**\n   * Clean up.\n   */\n\n\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n\n}\n\nexport default CanvasLayerRenderer;","map":{"version":3,"names":["LayerRenderer","RenderEvent","RenderEventType","ZIndexContext","apply","applyTransform","compose","composeTransform","create","createTransform","makeInverse","toString","toTransformString","asArray","createCanvasContext2D","equals","getBottomLeft","getBottomRight","getHeight","getTopLeft","getTopRight","getWidth","canvasPool","pixelContext","createPixelContext","undefined","willReadFrequently","CanvasLayerRenderer","constructor","layer","container","renderedResolution","tempTransform","pixelTransform","inversePixelTransform","context","deferredContext_","containerReused","pixelContext_","frameState","getImageData","image","col","row","clearRect","data","drawImage","err","getBackground","getLayer","background","viewState","resolution","useContainer","target","transform","backgroundColor","layerClassName","getClassName","className","style","canvas","firstElementChild","HTMLCanvasElement","getContext","document","createElement","position","width","height","appendChild","left","transformOrigin","clipUnrotated","extent","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","inverted","save","beginPath","moveTo","Math","round","lineTo","clip","prepareContainer","rotation","pixelRatio","size","canvasTransform","dispatchRenderEvent_","type","hasListener","event","dispatchEvent","preRender","declutter","PRERENDER","postRender","POSTRENDER","renderDeferredInternal","getRenderContext","renderDeferred","draw","clear","getRenderTransform","center","offsetX","dx1","dy1","sx","sy","dx2","dy2","disposeInternal"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/renderer/canvas/Layer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport ZIndexContext from '../../render/canvas/ZIndexContext.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n  makeInverse,\n  toString as toTransformString,\n} from '../../transform.js';\nimport {asArray} from '../../color.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {equals} from '../../array.js';\nimport {\n  getBottomLeft,\n  getBottomRight,\n  getHeight,\n  getTopLeft,\n  getTopRight,\n  getWidth,\n} from '../../extent.js';\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @private\n     * @type {ZIndexContext}\n     */\n    this.deferredContext_ = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.pixelContext_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n  }\n\n  /**\n   * @param {import('../../DataTile.js').ImageLike} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    let data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */\n  useContainer(target, transform, backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.className === layerClassName &&\n      (!backgroundColor ||\n        (target &&\n          target.style.backgroundColor &&\n          equals(\n            asArray(target.style.backgroundColor),\n            asArray(backgroundColor),\n          )))\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    } else if (this.container) {\n      this.container.style.backgroundColor = null;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n    if (\n      !this.containerReused &&\n      backgroundColor &&\n      !this.container.style.backgroundColor\n    ) {\n      this.container.style.backgroundColor = backgroundColor;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @protected\n   */\n  prepareContainer(frameState, target) {\n    const extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2,\n    );\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n\n    if (!this.containerReused) {\n      const canvas = this.context.canvas;\n      if (canvas.width != width || canvas.height != height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        this.context.clearRect(0, 0, width, height);\n      }\n      if (canvasTransform !== canvas.style.transform) {\n        canvas.style.transform = canvasTransform;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context,\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.frameState = frameState;\n    if (frameState.declutter) {\n      return;\n    }\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    if (frameState.declutter) {\n      return;\n    }\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeferredInternal(frameState) {}\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {import('../../render/canvas/ZIndexContext.js').ZIndexContextProxy} Context.\n   */\n  getRenderContext(frameState) {\n    if (frameState.declutter && !this.deferredContext_) {\n      this.deferredContext_ = new ZIndexContext();\n    }\n    return frameState.declutter\n      ? this.deferredContext_.getContext()\n      : this.context;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @override\n   */\n  renderDeferred(frameState) {\n    if (!frameState.declutter) {\n      return;\n    }\n    this.dispatchRenderEvent_(\n      RenderEventType.PRERENDER,\n      this.context,\n      frameState,\n    );\n    if (frameState.declutter && this.deferredContext_) {\n      this.deferredContext_.draw(this.context);\n      this.deferredContext_.clear();\n    }\n    this.renderDeferredInternal(frameState);\n    this.dispatchRenderEvent_(\n      RenderEventType.POSTRENDER,\n      this.context,\n      frameState,\n    );\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX,\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2,\n    );\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n}\n\nexport default CanvasLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}