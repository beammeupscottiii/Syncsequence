{"ast":null,"code":"/**\n * @module ol/style/IconImage\n */\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport { asString } from '../color.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { decodeFallback } from '../Image.js';\nimport { shared as iconImageCache } from './IconImageCache.js';\n/**\n * @type {CanvasRenderingContext2D}\n */\n\nlet taintedTestContext = null;\n\nclass IconImage extends EventTarget {\n  /**\n   * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null} image Image.\n   * @param {string|undefined} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../ImageState.js\").default|undefined} imageState Image state.\n   * @param {import(\"../color.js\").Color|string|null} color Color.\n   */\n  constructor(image, src, crossOrigin, imageState, color) {\n    super();\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap}\n     */\n\n    this.hitDetectionImage_ = null;\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null}\n     */\n\n    this.image_ = image;\n    /**\n     * @private\n     * @type {string|null}\n     */\n\n    this.crossOrigin_ = crossOrigin;\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n\n    this.canvas_ = {};\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|string|null}\n     */\n\n    this.color_ = color;\n    /**\n     * @private\n     * @type {import(\"../ImageState.js\").default}\n     */\n\n    this.imageState_ = imageState === undefined ? ImageState.IDLE : imageState;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size|null}\n     */\n\n    this.size_ = image && image.width && image.height ? [image.width, image.height] : null;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.src_ = src;\n    /**\n     * @private\n     */\n\n    this.tainted_;\n    /**\n     * @private\n     * @type {Promise<void>|null}\n     */\n\n    this.ready_ = null;\n  }\n  /**\n   * @private\n   */\n\n\n  initializeImage_() {\n    this.image_ = new Image();\n\n    if (this.crossOrigin_ !== null) {\n      this.image_.crossOrigin = this.crossOrigin_;\n    }\n  }\n  /**\n   * @private\n   * @return {boolean} The image canvas is tainted.\n   */\n\n\n  isTainted_() {\n    if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\n      if (!taintedTestContext) {\n        taintedTestContext = createCanvasContext2D(1, 1, undefined, {\n          willReadFrequently: true\n        });\n      }\n\n      taintedTestContext.drawImage(this.image_, 0, 0);\n\n      try {\n        taintedTestContext.getImageData(0, 0, 1, 1);\n        this.tainted_ = false;\n      } catch (e) {\n        taintedTestContext = null;\n        this.tainted_ = true;\n      }\n    }\n\n    return this.tainted_ === true;\n  }\n  /**\n   * @private\n   */\n\n\n  dispatchChangeEvent_() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n  /**\n   * @private\n   */\n\n\n  handleImageError_() {\n    this.imageState_ = ImageState.ERROR;\n    this.dispatchChangeEvent_();\n  }\n  /**\n   * @private\n   */\n\n\n  handleImageLoad_() {\n    this.imageState_ = ImageState.LOADED;\n    this.size_ = [this.image_.width, this.image_.height];\n    this.dispatchChangeEvent_();\n  }\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element or image bitmap.\n   */\n\n\n  getImage(pixelRatio) {\n    if (!this.image_) {\n      this.initializeImage_();\n    }\n\n    this.replaceColor_(pixelRatio);\n    return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;\n  }\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Image or Canvas element.\n   */\n\n\n  getPixelRatio(pixelRatio) {\n    this.replaceColor_(pixelRatio);\n    return this.canvas_[pixelRatio] ? pixelRatio : 1;\n  }\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n\n\n  getImageState() {\n    return this.imageState_;\n  }\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\n   */\n\n\n  getHitDetectionImage() {\n    if (!this.image_) {\n      this.initializeImage_();\n    }\n\n    if (!this.hitDetectionImage_) {\n      if (this.isTainted_()) {\n        const width = this.size_[0];\n        const height = this.size_[1];\n        const context = createCanvasContext2D(width, height);\n        context.fillRect(0, 0, width, height);\n        this.hitDetectionImage_ = context.canvas;\n      } else {\n        this.hitDetectionImage_ = this.image_;\n      }\n    }\n\n    return this.hitDetectionImage_;\n  }\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n\n\n  getSize() {\n    return this.size_;\n  }\n  /**\n   * @return {string|undefined} Image src.\n   */\n\n\n  getSrc() {\n    return this.src_;\n  }\n  /**\n   * Load not yet loaded URI.\n   */\n\n\n  load() {\n    if (this.imageState_ !== ImageState.IDLE) {\n      return;\n    }\n\n    if (!this.image_) {\n      this.initializeImage_();\n    }\n\n    this.imageState_ = ImageState.LOADING;\n\n    try {\n      if (this.src_ !== undefined) {\n        /** @type {HTMLImageElement} */\n        this.image_.src = this.src_;\n      }\n    } catch (e) {\n      this.handleImageError_();\n    }\n\n    if (this.image_ instanceof HTMLImageElement) {\n      decodeFallback(this.image_, this.src_).then(image => {\n        this.image_ = image;\n        this.handleImageLoad_();\n      }).catch(this.handleImageError_.bind(this));\n    }\n  }\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @private\n   */\n\n\n  replaceColor_(pixelRatio) {\n    if (!this.color_ || this.canvas_[pixelRatio] || this.imageState_ !== ImageState.LOADED) {\n      return;\n    }\n\n    const image = this.image_;\n    const canvas = document.createElement('canvas');\n    canvas.width = Math.ceil(image.width * pixelRatio);\n    canvas.height = Math.ceil(image.height * pixelRatio);\n    const ctx = canvas.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.drawImage(image, 0, 0);\n    ctx.globalCompositeOperation = 'multiply';\n    ctx.fillStyle = asString(this.color_);\n    ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\n    ctx.globalCompositeOperation = 'destination-in';\n    ctx.drawImage(image, 0, 0);\n    this.canvas_[pixelRatio] = canvas;\n  }\n  /**\n   * @return {Promise<void>} Promise that resolves when the image is loaded.\n   */\n\n\n  ready() {\n    if (!this.ready_) {\n      this.ready_ = new Promise(resolve => {\n        if (this.imageState_ === ImageState.LOADED || this.imageState_ === ImageState.ERROR) {\n          resolve();\n        } else {\n          this.addEventListener(EventType.CHANGE, function onChange() {\n            if (this.imageState_ === ImageState.LOADED || this.imageState_ === ImageState.ERROR) {\n              this.removeEventListener(EventType.CHANGE, onChange);\n              resolve();\n            }\n          });\n        }\n      });\n    }\n\n    return this.ready_;\n  }\n\n}\n/**\n * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null} image Image.\n * @param {string|undefined} cacheKey Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../ImageState.js\").default|undefined} imageState Image state.\n * @param {import(\"../color.js\").Color|string|null} color Color.\n * @param {boolean} [pattern] Also cache a `repeat` pattern with the icon image.\n * @return {IconImage} Icon image.\n */\n\n\nexport function get(image, cacheKey, crossOrigin, imageState, color, pattern) {\n  let iconImage = cacheKey === undefined ? undefined : iconImageCache.get(cacheKey, crossOrigin, color);\n\n  if (!iconImage) {\n    iconImage = new IconImage(image, image && 'src' in image ? image.src || undefined : cacheKey, crossOrigin, imageState, color);\n    iconImageCache.set(cacheKey, crossOrigin, color, iconImage, pattern);\n  }\n\n  if (pattern && iconImage && !iconImageCache.getPattern(cacheKey, crossOrigin, color)) {\n    iconImageCache.set(cacheKey, crossOrigin, color, iconImage, pattern);\n  }\n\n  return iconImage;\n}\nexport default IconImage;","map":{"version":3,"names":["EventTarget","EventType","ImageState","asString","createCanvasContext2D","decodeFallback","shared","iconImageCache","taintedTestContext","IconImage","constructor","image","src","crossOrigin","imageState","color","hitDetectionImage_","image_","crossOrigin_","canvas_","color_","imageState_","undefined","IDLE","size_","width","height","src_","tainted_","ready_","initializeImage_","Image","isTainted_","LOADED","willReadFrequently","drawImage","getImageData","e","dispatchChangeEvent_","dispatchEvent","CHANGE","handleImageError_","ERROR","handleImageLoad_","getImage","pixelRatio","replaceColor_","getPixelRatio","getImageState","getHitDetectionImage","context","fillRect","canvas","getSize","getSrc","load","LOADING","HTMLImageElement","then","catch","bind","document","createElement","Math","ceil","ctx","getContext","scale","globalCompositeOperation","fillStyle","ready","Promise","resolve","addEventListener","onChange","removeEventListener","get","cacheKey","pattern","iconImage","set","getPattern"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/style/IconImage.js"],"sourcesContent":["/**\n * @module ol/style/IconImage\n */\n\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport {asString} from '../color.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {decodeFallback} from '../Image.js';\nimport {shared as iconImageCache} from './IconImageCache.js';\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet taintedTestContext = null;\n\nclass IconImage extends EventTarget {\n  /**\n   * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null} image Image.\n   * @param {string|undefined} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../ImageState.js\").default|undefined} imageState Image state.\n   * @param {import(\"../color.js\").Color|string|null} color Color.\n   */\n  constructor(image, src, crossOrigin, imageState, color) {\n    super();\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap}\n     */\n    this.hitDetectionImage_ = null;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null}\n     */\n    this.image_ = image;\n\n    /**\n     * @private\n     * @type {string|null}\n     */\n    this.crossOrigin_ = crossOrigin;\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvas_ = {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|string|null}\n     */\n    this.color_ = color;\n\n    /**\n     * @private\n     * @type {import(\"../ImageState.js\").default}\n     */\n    this.imageState_ = imageState === undefined ? ImageState.IDLE : imageState;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size|null}\n     */\n    this.size_ =\n      image && image.width && image.height ? [image.width, image.height] : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     */\n    this.tainted_;\n\n    /**\n     * @private\n     * @type {Promise<void>|null}\n     */\n    this.ready_ = null;\n  }\n\n  /**\n   * @private\n   */\n  initializeImage_() {\n    this.image_ = new Image();\n    if (this.crossOrigin_ !== null) {\n      this.image_.crossOrigin = this.crossOrigin_;\n    }\n  }\n\n  /**\n   * @private\n   * @return {boolean} The image canvas is tainted.\n   */\n  isTainted_() {\n    if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\n      if (!taintedTestContext) {\n        taintedTestContext = createCanvasContext2D(1, 1, undefined, {\n          willReadFrequently: true,\n        });\n      }\n      taintedTestContext.drawImage(this.image_, 0, 0);\n      try {\n        taintedTestContext.getImageData(0, 0, 1, 1);\n        this.tainted_ = false;\n      } catch (e) {\n        taintedTestContext = null;\n        this.tainted_ = true;\n      }\n    }\n    return this.tainted_ === true;\n  }\n\n  /**\n   * @private\n   */\n  dispatchChangeEvent_() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * @private\n   */\n  handleImageError_() {\n    this.imageState_ = ImageState.ERROR;\n    this.dispatchChangeEvent_();\n  }\n\n  /**\n   * @private\n   */\n  handleImageLoad_() {\n    this.imageState_ = ImageState.LOADED;\n    this.size_ = [this.image_.width, this.image_.height];\n    this.dispatchChangeEvent_();\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element or image bitmap.\n   */\n  getImage(pixelRatio) {\n    if (!this.image_) {\n      this.initializeImage_();\n    }\n    this.replaceColor_(pixelRatio);\n    return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Image or Canvas element.\n   */\n  getPixelRatio(pixelRatio) {\n    this.replaceColor_(pixelRatio);\n    return this.canvas_[pixelRatio] ? pixelRatio : 1;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.imageState_;\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.image_) {\n      this.initializeImage_();\n    }\n    if (!this.hitDetectionImage_) {\n      if (this.isTainted_()) {\n        const width = this.size_[0];\n        const height = this.size_[1];\n        const context = createCanvasContext2D(width, height);\n        context.fillRect(0, 0, width, height);\n        this.hitDetectionImage_ = context.canvas;\n      } else {\n        this.hitDetectionImage_ = this.image_;\n      }\n    }\n    return this.hitDetectionImage_;\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {string|undefined} Image src.\n   */\n  getSrc() {\n    return this.src_;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.imageState_ !== ImageState.IDLE) {\n      return;\n    }\n    if (!this.image_) {\n      this.initializeImage_();\n    }\n\n    this.imageState_ = ImageState.LOADING;\n    try {\n      if (this.src_ !== undefined) {\n        /** @type {HTMLImageElement} */ (this.image_).src = this.src_;\n      }\n    } catch (e) {\n      this.handleImageError_();\n    }\n    if (this.image_ instanceof HTMLImageElement) {\n      decodeFallback(this.image_, this.src_)\n        .then((image) => {\n          this.image_ = image;\n          this.handleImageLoad_();\n        })\n        .catch(this.handleImageError_.bind(this));\n    }\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @private\n   */\n  replaceColor_(pixelRatio) {\n    if (\n      !this.color_ ||\n      this.canvas_[pixelRatio] ||\n      this.imageState_ !== ImageState.LOADED\n    ) {\n      return;\n    }\n\n    const image = this.image_;\n    const canvas = document.createElement('canvas');\n    canvas.width = Math.ceil(image.width * pixelRatio);\n    canvas.height = Math.ceil(image.height * pixelRatio);\n\n    const ctx = canvas.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.drawImage(image, 0, 0);\n\n    ctx.globalCompositeOperation = 'multiply';\n    ctx.fillStyle = asString(this.color_);\n    ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\n\n    ctx.globalCompositeOperation = 'destination-in';\n    ctx.drawImage(image, 0, 0);\n\n    this.canvas_[pixelRatio] = canvas;\n  }\n\n  /**\n   * @return {Promise<void>} Promise that resolves when the image is loaded.\n   */\n  ready() {\n    if (!this.ready_) {\n      this.ready_ = new Promise((resolve) => {\n        if (\n          this.imageState_ === ImageState.LOADED ||\n          this.imageState_ === ImageState.ERROR\n        ) {\n          resolve();\n        } else {\n          this.addEventListener(EventType.CHANGE, function onChange() {\n            if (\n              this.imageState_ === ImageState.LOADED ||\n              this.imageState_ === ImageState.ERROR\n            ) {\n              this.removeEventListener(EventType.CHANGE, onChange);\n              resolve();\n            }\n          });\n        }\n      });\n    }\n    return this.ready_;\n  }\n}\n\n/**\n * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null} image Image.\n * @param {string|undefined} cacheKey Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../ImageState.js\").default|undefined} imageState Image state.\n * @param {import(\"../color.js\").Color|string|null} color Color.\n * @param {boolean} [pattern] Also cache a `repeat` pattern with the icon image.\n * @return {IconImage} Icon image.\n */\nexport function get(image, cacheKey, crossOrigin, imageState, color, pattern) {\n  let iconImage =\n    cacheKey === undefined\n      ? undefined\n      : iconImageCache.get(cacheKey, crossOrigin, color);\n  if (!iconImage) {\n    iconImage = new IconImage(\n      image,\n      image && 'src' in image ? image.src || undefined : cacheKey,\n      crossOrigin,\n      imageState,\n      color,\n    );\n    iconImageCache.set(cacheKey, crossOrigin, color, iconImage, pattern);\n  }\n  if (\n    pattern &&\n    iconImage &&\n    !iconImageCache.getPattern(cacheKey, crossOrigin, color)\n  ) {\n    iconImageCache.set(cacheKey, crossOrigin, color, iconImage, pattern);\n  }\n  return iconImage;\n}\n\nexport default IconImage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}