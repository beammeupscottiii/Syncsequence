{"ast":null,"code":"/**\n * @module ol/layer/BaseVector\n */\nimport Layer from './Layer.js';\nimport RBush from 'rbush';\nimport Style, { createDefaultStyle, toFunction as toStyleFunction } from '../style/Style.js';\nimport { flatStylesToStyleFunction, rulesToStyleFunction } from '../render/canvas/style.js';\n/**\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>|import(\"../source/VectorTile.js\").default<import('../Feature').FeatureLike>} VectorSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {VectorSourceType} [source] Source.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable\n * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the\n * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the\n * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct\n * layers or groups of layers separately, use different truthy values for `declutter`.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\n * which will be used if this is not set.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\n * be recreated during animations. This means that no vectors will be shown clipped, but the\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\n * batches will be recreated when no animation is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\n * be recreated during interactions. See also `updateWhileAnimating`.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\n\nconst Property = {\n  RENDER_ORDER: 'renderOrder'\n};\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>|import(\"../source/VectorTile.js\").default<import('../Feature').FeatureLike>} VectorSourceType\n * @template {import(\"../renderer/canvas/VectorLayer.js\").default|import(\"../renderer/canvas/VectorTileLayer.js\").default|import(\"../renderer/canvas/VectorImageLayer.js\").default|import(\"../renderer/webgl/PointsLayer.js\").default} RendererType\n * @extends {Layer<VectorSourceType, RendererType>}\n * @api\n */\n\nclass BaseVectorLayer extends Layer {\n  /**\n   * @param {Options<VectorSourceType>} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.style;\n    delete baseOptions.renderBuffer;\n    delete baseOptions.updateWhileAnimating;\n    delete baseOptions.updateWhileInteracting;\n    super(baseOptions);\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.declutter_ = options.declutter ? String(options.declutter) : undefined;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.renderBuffer_ = options.renderBuffer !== undefined ? options.renderBuffer : 100;\n    /**\n     * User provided style.\n     * @type {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike}\n     * @private\n     */\n\n    this.style_ = null;\n    /**\n     * Style function for use within the library.\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\n     * @private\n     */\n\n    this.styleFunction_ = undefined;\n    this.setStyle(options.style);\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ? options.updateWhileAnimating : false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ? options.updateWhileInteracting : false;\n  }\n  /**\n   * @return {string} Declutter group.\n   */\n\n\n  getDeclutter() {\n    return this.declutter_;\n  }\n  /**\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\n   * that resolves with an array of features. The array will either contain the topmost feature\n   * when a hit was detected, or it will be empty.\n   *\n   * The hit detection algorithm used for this method is optimized for performance, but is less\n   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\n   * Text is not considered, and icons are only represented by their bounding box instead of the exact\n   * image.\n   *\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\n   * @api\n   */\n\n\n  getFeatures(pixel) {\n    return super.getFeatures(pixel);\n  }\n  /**\n   * @return {number|undefined} Render buffer.\n   */\n\n\n  getRenderBuffer() {\n    return this.renderBuffer_;\n  }\n  /**\n   * @return {function(import(\"../Feature.js\").default, import(\"../Feature.js\").default): number|null|undefined} Render\n   *     order.\n   */\n\n\n  getRenderOrder() {\n    return (\n      /** @type {import(\"../render.js\").OrderFunction|null|undefined} */\n      this.get(Property.RENDER_ORDER)\n    );\n  }\n  /**\n   * Get the style for features.  This returns whatever was passed to the `style`\n   * option at construction or to the `setStyle` method.\n   * @return {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null|undefined} Layer style.\n   * @api\n   */\n\n\n  getStyle() {\n    return this.style_;\n  }\n  /**\n   * Get the style function.\n   * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\n   * @api\n   */\n\n\n  getStyleFunction() {\n    return this.styleFunction_;\n  }\n  /**\n   * @return {boolean} Whether the rendered layer should be updated while\n   *     animating.\n   */\n\n\n  getUpdateWhileAnimating() {\n    return this.updateWhileAnimating_;\n  }\n  /**\n   * @return {boolean} Whether the rendered layer should be updated while\n   *     interacting.\n   */\n\n\n  getUpdateWhileInteracting() {\n    return this.updateWhileInteracting_;\n  }\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../layer/Layer.js\").State} layerState Layer state.\n   */\n\n\n  renderDeclutter(frameState, layerState) {\n    const declutterGroup = this.getDeclutter();\n\n    if (declutterGroup in frameState.declutter === false) {\n      frameState.declutter[declutterGroup] = new RBush(9);\n    }\n\n    this.getRenderer().renderDeclutter(frameState, layerState);\n  }\n  /**\n   * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\n   *     Render order.\n   */\n\n\n  setRenderOrder(renderOrder) {\n    this.set(Property.RENDER_ORDER, renderOrder);\n  }\n  /**\n   * Set the style for features.  This can be a single style object, an array\n   * of styles, or a function that takes a feature and resolution and returns\n   * an array of styles. If set to `null`, the layer has no style (a `null` style),\n   * so only features that have their own styles will be rendered in the layer. Call\n   * `setStyle()` without arguments to reset to the default style. See\n   * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.\n   *\n   * If your layer has a static style, you can use [flat style]{@link module:ol/style/flat~FlatStyle} object\n   * literals instead of using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.):\n   * ```js\n   * vectorLayer.setStyle({\n   *   \"fill-color\": \"yellow\",\n   *   \"stroke-color\": \"black\",\n   *   \"stroke-width\": 4\n   * })\n   * ```\n   *\n   * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\n   * @api\n   */\n\n\n  setStyle(style) {\n    this.style_ = style === undefined ? createDefaultStyle : style;\n    const styleLike = toStyleLike(style);\n    this.styleFunction_ = style === null ? undefined : toStyleFunction(styleLike);\n    this.changed();\n  }\n\n}\n/**\n * Coerce the allowed style types into a shorter list of types.  Flat styles, arrays of flat\n * styles, and arrays of rules are converted into style functions.\n *\n * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\n * @return {import(\"../style/Style.js\").StyleLike|null} The style.\n */\n\n\nfunction toStyleLike(style) {\n  if (style === undefined) {\n    return createDefaultStyle;\n  }\n\n  if (!style) {\n    return null;\n  }\n\n  if (typeof style === 'function') {\n    return style;\n  }\n\n  if (style instanceof Style) {\n    return style;\n  }\n\n  if (!Array.isArray(style)) {\n    return flatStylesToStyleFunction([style]);\n  }\n\n  if (style.length === 0) {\n    return [];\n  }\n\n  const length = style.length;\n  const first = style[0];\n\n  if (first instanceof Style) {\n    /**\n     * @type {Array<Style>}\n     */\n    const styles = new Array(length);\n\n    for (let i = 0; i < length; ++i) {\n      const candidate = style[i];\n\n      if (!(candidate instanceof Style)) {\n        throw new Error('Expected a list of style instances');\n      }\n\n      styles[i] = candidate;\n    }\n\n    return styles;\n  }\n\n  if ('style' in first) {\n    /**\n     * @type Array<import(\"../style/flat.js\").Rule>\n     */\n    const rules = new Array(length);\n\n    for (let i = 0; i < length; ++i) {\n      const candidate = style[i];\n\n      if (!('style' in candidate)) {\n        throw new Error('Expected a list of rules with a style property');\n      }\n\n      rules[i] = candidate;\n    }\n\n    return rulesToStyleFunction(rules);\n  }\n\n  const flatStyles =\n  /** @type {Array<import(\"../style/flat.js\").FlatStyle>} */\n  style;\n  return flatStylesToStyleFunction(flatStyles);\n}\n\nexport default BaseVectorLayer;","map":{"version":3,"names":["Layer","RBush","Style","createDefaultStyle","toFunction","toStyleFunction","flatStylesToStyleFunction","rulesToStyleFunction","Property","RENDER_ORDER","BaseVectorLayer","constructor","options","baseOptions","Object","assign","style","renderBuffer","updateWhileAnimating","updateWhileInteracting","declutter_","declutter","String","undefined","renderBuffer_","style_","styleFunction_","setStyle","updateWhileAnimating_","updateWhileInteracting_","getDeclutter","getFeatures","pixel","getRenderBuffer","getRenderOrder","get","getStyle","getStyleFunction","getUpdateWhileAnimating","getUpdateWhileInteracting","renderDeclutter","frameState","layerState","declutterGroup","getRenderer","setRenderOrder","renderOrder","set","styleLike","toStyleLike","changed","Array","isArray","length","first","styles","i","candidate","Error","rules","flatStyles"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/layer/BaseVector.js"],"sourcesContent":["/**\n * @module ol/layer/BaseVector\n */\nimport Layer from './Layer.js';\nimport RBush from 'rbush';\nimport Style, {\n  createDefaultStyle,\n  toFunction as toStyleFunction,\n} from '../style/Style.js';\nimport {\n  flatStylesToStyleFunction,\n  rulesToStyleFunction,\n} from '../render/canvas/style.js';\n\n/**\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>|import(\"../source/VectorTile.js\").default<import('../Feature').FeatureLike>} VectorSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {VectorSourceType} [source] Source.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable\n * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the\n * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the\n * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct\n * layers or groups of layers separately, use different truthy values for `declutter`.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\n * which will be used if this is not set.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\n * be recreated during animations. This means that no vectors will be shown clipped, but the\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\n * batches will be recreated when no animation is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\n * be recreated during interactions. See also `updateWhileAnimating`.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  RENDER_ORDER: 'renderOrder',\n};\n\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>|import(\"../source/VectorTile.js\").default<import('../Feature').FeatureLike>} VectorSourceType\n * @template {import(\"../renderer/canvas/VectorLayer.js\").default|import(\"../renderer/canvas/VectorTileLayer.js\").default|import(\"../renderer/canvas/VectorImageLayer.js\").default|import(\"../renderer/webgl/PointsLayer.js\").default} RendererType\n * @extends {Layer<VectorSourceType, RendererType>}\n * @api\n */\nclass BaseVectorLayer extends Layer {\n  /**\n   * @param {Options<VectorSourceType>} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    delete baseOptions.style;\n    delete baseOptions.renderBuffer;\n    delete baseOptions.updateWhileAnimating;\n    delete baseOptions.updateWhileInteracting;\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.declutter_ = options.declutter ? String(options.declutter) : undefined;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderBuffer_ =\n      options.renderBuffer !== undefined ? options.renderBuffer : 100;\n\n    /**\n     * User provided style.\n     * @type {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike}\n     * @private\n     */\n    this.style_ = null;\n\n    /**\n     * Style function for use within the library.\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\n     * @private\n     */\n    this.styleFunction_ = undefined;\n\n    this.setStyle(options.style);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.updateWhileAnimating_ =\n      options.updateWhileAnimating !== undefined\n        ? options.updateWhileAnimating\n        : false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.updateWhileInteracting_ =\n      options.updateWhileInteracting !== undefined\n        ? options.updateWhileInteracting\n        : false;\n  }\n\n  /**\n   * @return {string} Declutter group.\n   */\n  getDeclutter() {\n    return this.declutter_;\n  }\n\n  /**\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\n   * that resolves with an array of features. The array will either contain the topmost feature\n   * when a hit was detected, or it will be empty.\n   *\n   * The hit detection algorithm used for this method is optimized for performance, but is less\n   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\n   * Text is not considered, and icons are only represented by their bounding box instead of the exact\n   * image.\n   *\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\n   * @api\n   */\n  getFeatures(pixel) {\n    return super.getFeatures(pixel);\n  }\n\n  /**\n   * @return {number|undefined} Render buffer.\n   */\n  getRenderBuffer() {\n    return this.renderBuffer_;\n  }\n\n  /**\n   * @return {function(import(\"../Feature.js\").default, import(\"../Feature.js\").default): number|null|undefined} Render\n   *     order.\n   */\n  getRenderOrder() {\n    return /** @type {import(\"../render.js\").OrderFunction|null|undefined} */ (\n      this.get(Property.RENDER_ORDER)\n    );\n  }\n\n  /**\n   * Get the style for features.  This returns whatever was passed to the `style`\n   * option at construction or to the `setStyle` method.\n   * @return {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null|undefined} Layer style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Get the style function.\n   * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\n   * @api\n   */\n  getStyleFunction() {\n    return this.styleFunction_;\n  }\n\n  /**\n   * @return {boolean} Whether the rendered layer should be updated while\n   *     animating.\n   */\n  getUpdateWhileAnimating() {\n    return this.updateWhileAnimating_;\n  }\n\n  /**\n   * @return {boolean} Whether the rendered layer should be updated while\n   *     interacting.\n   */\n  getUpdateWhileInteracting() {\n    return this.updateWhileInteracting_;\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../layer/Layer.js\").State} layerState Layer state.\n   */\n  renderDeclutter(frameState, layerState) {\n    const declutterGroup = this.getDeclutter();\n    if (declutterGroup in frameState.declutter === false) {\n      frameState.declutter[declutterGroup] = new RBush(9);\n    }\n    this.getRenderer().renderDeclutter(frameState, layerState);\n  }\n\n  /**\n   * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\n   *     Render order.\n   */\n  setRenderOrder(renderOrder) {\n    this.set(Property.RENDER_ORDER, renderOrder);\n  }\n\n  /**\n   * Set the style for features.  This can be a single style object, an array\n   * of styles, or a function that takes a feature and resolution and returns\n   * an array of styles. If set to `null`, the layer has no style (a `null` style),\n   * so only features that have their own styles will be rendered in the layer. Call\n   * `setStyle()` without arguments to reset to the default style. See\n   * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.\n   *\n   * If your layer has a static style, you can use [flat style]{@link module:ol/style/flat~FlatStyle} object\n   * literals instead of using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.):\n   * ```js\n   * vectorLayer.setStyle({\n   *   \"fill-color\": \"yellow\",\n   *   \"stroke-color\": \"black\",\n   *   \"stroke-width\": 4\n   * })\n   * ```\n   *\n   * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\n   * @api\n   */\n  setStyle(style) {\n    this.style_ = style === undefined ? createDefaultStyle : style;\n    const styleLike = toStyleLike(style);\n    this.styleFunction_ =\n      style === null ? undefined : toStyleFunction(styleLike);\n    this.changed();\n  }\n}\n\n/**\n * Coerce the allowed style types into a shorter list of types.  Flat styles, arrays of flat\n * styles, and arrays of rules are converted into style functions.\n *\n * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\n * @return {import(\"../style/Style.js\").StyleLike|null} The style.\n */\nfunction toStyleLike(style) {\n  if (style === undefined) {\n    return createDefaultStyle;\n  }\n  if (!style) {\n    return null;\n  }\n  if (typeof style === 'function') {\n    return style;\n  }\n  if (style instanceof Style) {\n    return style;\n  }\n  if (!Array.isArray(style)) {\n    return flatStylesToStyleFunction([style]);\n  }\n  if (style.length === 0) {\n    return [];\n  }\n\n  const length = style.length;\n  const first = style[0];\n\n  if (first instanceof Style) {\n    /**\n     * @type {Array<Style>}\n     */\n    const styles = new Array(length);\n    for (let i = 0; i < length; ++i) {\n      const candidate = style[i];\n      if (!(candidate instanceof Style)) {\n        throw new Error('Expected a list of style instances');\n      }\n      styles[i] = candidate;\n    }\n    return styles;\n  }\n\n  if ('style' in first) {\n    /**\n     * @type Array<import(\"../style/flat.js\").Rule>\n     */\n    const rules = new Array(length);\n    for (let i = 0; i < length; ++i) {\n      const candidate = style[i];\n      if (!('style' in candidate)) {\n        throw new Error('Expected a list of rules with a style property');\n      }\n      rules[i] = candidate;\n    }\n    return rulesToStyleFunction(rules);\n  }\n\n  const flatStyles =\n    /** @type {Array<import(\"../style/flat.js\").FlatStyle>} */ (style);\n  return flatStylesToStyleFunction(flatStyles);\n}\n\nexport default BaseVectorLayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}