{"ast":null,"code":"/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, { canvasPool } from './Layer.js';\nimport ExecutorGroup, { ALL, DECLUTTER, NON_DECLUTTER } from '../../render/canvas/ExecutorGroup.js';\nimport RenderEventType from '../../render/EventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { buffer, containsExtent, createEmpty, getHeight, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX } from '../../extent.js';\nimport { createCanvasContext2D, releaseCanvas } from '../../dom.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\n\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n    /** @private */\n\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n    /**\n     * @type {boolean}\n     */\n\n    this.animatingOrInteracting_;\n    /**\n     * @type {ImageData|null}\n     */\n\n    this.hitDetectionImageData_ = null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.clipped_ = false;\n    /**\n     * @private\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n\n    this.renderedFeatures_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedResolution_ = NaN;\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n\n    this.renderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n\n    this.wrappedRenderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedRotation_;\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n\n    this.renderedCenter_ = null;\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n\n    this.renderedProjection_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedPixelRatio_ = 1;\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n\n    this.renderedRenderOrder_ = null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.renderedFrameDeclutter_;\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n\n    this.replayGroup_ = null;\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n\n    this.replayGroupChanged = true;\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n\n    this.clipping = true;\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n\n    this.targetContext_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.opacity_ = 1;\n  }\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {boolean} [declutterable] `true` to only render declutterable items,\n   *     `false` to only render non-declutterable items, `undefined` to render all.\n   */\n\n\n  renderWorlds(executorGroup, frameState, declutterable) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const declutter = this.getLayer().getDeclutter();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    const context = this.context;\n    const width = Math.round(getWidth(extent) / resolution * pixelRatio);\n    const height = Math.round(getHeight(extent) / resolution * pixelRatio);\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n    let world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n\n    do {\n      let transform = this.getRenderTransform(center, resolution, 0, pixelRatio, width, height, world * worldWidth);\n\n      if (frameState.declutter) {\n        transform = transform.slice(0);\n      }\n\n      executorGroup.execute(context, [context.canvas.width, context.canvas.height], transform, rotation, snapToPixel, declutterable === undefined ? ALL : declutterable ? DECLUTTER : NON_DECLUTTER, declutterable ? declutter && frameState.declutter[declutter] : undefined);\n    } while (++world < endWorld);\n  }\n  /**\n   * @private\n   */\n\n\n  setDrawContext_() {\n    if (this.opacity_ !== 1) {\n      this.targetContext_ = this.context;\n      this.context = createCanvasContext2D(this.context.canvas.width, this.context.canvas.height, canvasPool);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  resetDrawContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.targetContext_.globalAlpha;\n      this.targetContext_.globalAlpha = this.opacity_;\n      this.targetContext_.drawImage(this.context.canvas, 0, 0);\n      this.targetContext_.globalAlpha = alpha;\n      releaseCanvas(this.context);\n      canvasPool.push(this.context.canvas);\n      this.context = this.targetContext_;\n      this.targetContext_ = null;\n    }\n  }\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n\n\n  renderDeclutter(frameState) {\n    if (!this.replayGroup_ || !this.getLayer().getDeclutter()) {\n      return;\n    }\n\n    this.renderWorlds(this.replayGroup_, frameState, true);\n  }\n  /**\n   * Render deferred instructions.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n\n\n  renderDeferredInternal(frameState) {\n    if (!this.replayGroup_) {\n      return;\n    }\n\n    this.replayGroup_.renderDeferred();\n\n    if (this.clipped_) {\n      this.context.restore();\n    }\n\n    this.resetDrawContext_();\n  }\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement|null} target Target that may be used to render content to.\n   * @return {HTMLElement|null} The rendered element.\n   */\n\n\n  renderFrame(frameState, target) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    this.opacity_ = layerState.opacity;\n    const viewState = frameState.viewState;\n    this.prepareContainer(frameState, target);\n    const context = this.context;\n    const replayGroup = this.replayGroup_;\n    let render = replayGroup && !replayGroup.isEmpty();\n\n    if (!render) {\n      const hasRenderListeners = this.getLayer().hasListener(RenderEventType.PRERENDER) || this.getLayer().hasListener(RenderEventType.POSTRENDER);\n\n      if (!hasRenderListeners) {\n        return null;\n      }\n    }\n\n    this.setDrawContext_();\n    this.preRender(context, frameState);\n    const projection = viewState.projection; // clipped rendering if layer extent is set\n\n    this.clipped_ = false;\n\n    if (render && layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      this.clipped_ = render && !containsExtent(layerExtent, frameState.extent);\n\n      if (this.clipped_) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(replayGroup, frameState, this.getLayer().getDeclutter() ? false : undefined);\n    }\n\n    if (!frameState.declutter && this.clipped_) {\n      context.restore();\n    }\n\n    this.postRender(context, frameState);\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n\n    if (!frameState.declutter) {\n      this.resetDrawContext_();\n    }\n\n    return this.container;\n  }\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\n   * that resolves with an array of features.\n   */\n\n\n  getFeatures(pixel) {\n    return new Promise(resolve => {\n      if (this.frameState && !this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        const size = this.frameState.size.slice();\n        const center = this.renderedCenter_;\n        const resolution = this.renderedResolution_;\n        const rotation = this.renderedRotation_;\n        const projection = this.renderedProjection_;\n        const extent = this.wrappedRenderedExtent_;\n        const layer = this.getLayer();\n        const transforms = [];\n        const width = size[0] * HIT_DETECT_RESOLUTION;\n        const height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n        const source = layer.getSource();\n        const projectionExtent = projection.getExtent();\n\n        if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n          let startX = extent[0];\n          const worldWidth = getWidth(projectionExtent);\n          let world = 0;\n          let offsetX;\n\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX += worldWidth;\n          }\n\n          world = 0;\n          startX = extent[2];\n\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX -= worldWidth;\n          }\n        }\n\n        const userProjection = getUserProjection();\n        this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation, getSquaredRenderTolerance(resolution, this.renderedPixelRatio_), userProjection ? projection : null);\n      }\n\n      resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n    });\n  }\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n\n\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n\n    const features = {};\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n\n        matches.push(features[key] = {\n          feature: feature,\n          layer: layer,\n          geometry: geometry,\n          distanceSq: distanceSq,\n          callback: callback\n        });\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n\n      return undefined;\n    };\n\n    let result;\n    const executorGroups = [this.replayGroup_];\n    const declutter = this.getLayer().getDeclutter();\n    executorGroups.some(executorGroup => {\n      return result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, declutter && frameState.declutter[declutter] ? frameState.declutter[declutter].all().map(item => item.value) : null);\n    });\n    return result;\n  }\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n\n\n  handleFontsChanged() {\n    const layer = this.getLayer();\n\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n\n\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n\n\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (this.ready && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n\n    this.animatingOrInteracting_ = false;\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, frameState.extent)) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection); // If the extent crosses the date line, we load data for both edges of the worlds\n\n      if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] + worldWidth, loadExtent[1], loadExtent[2] + worldWidth, loadExtent[3]]);\n      } else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] - worldWidth, loadExtent[1], loadExtent[2] - worldWidth, loadExtent[3]]);\n      }\n    }\n\n    if (this.ready && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && this.renderedFrameDeclutter_ === !!frameState.declutter && containsExtent(this.wrappedRenderedExtent_, extent)) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n    const replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    const userProjection = getUserProjection();\n    let userTransform;\n\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = toUserExtent(extent, projection);\n        vectorSource.loadFeatures(userExtent, toUserResolution(resolution, projection), userProjection);\n      }\n\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    let ready = true;\n\n    const render =\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @param {number} index Index.\n     */\n    (feature, index) => {\n      let styles;\n      const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n\n      if (styles) {\n        const dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, this.getLayer().getDeclutter(), index);\n        ready = ready && !dirty;\n      }\n    };\n\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i], i);\n    }\n\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer(), !!frameState.declutter);\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedFrameDeclutter_ = !!frameState.declutter;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.renderedPixelRatio_ = pixelRatio;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n    this.replayGroupChanged = true;\n    return true;\n  }\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n   * @param {boolean} [declutter] Enable decluttering.\n   * @param {number} [index] Render order index.\n   * @return {boolean} `true` if an image is loading.\n   */\n\n\n  renderFeature(feature, squaredTolerance, styles, builderGroup, transform, declutter, index) {\n    if (!styles) {\n      return false;\n    }\n\n    let loading = false;\n\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, transform, declutter, index) || loading;\n      }\n    } else {\n      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, transform, declutter, index);\n    }\n\n    return loading;\n  }\n\n}\n\nexport default CanvasVectorLayerRenderer;","map":{"version":3,"names":["CanvasBuilderGroup","CanvasLayerRenderer","canvasPool","ExecutorGroup","ALL","DECLUTTER","NON_DECLUTTER","RenderEventType","ViewHint","HIT_DETECT_RESOLUTION","createHitDetectionImageData","hitDetect","buffer","containsExtent","createEmpty","getHeight","getWidth","intersects","intersectsExtent","wrapX","wrapExtentX","createCanvasContext2D","releaseCanvas","defaultOrder","defaultRenderOrder","getTolerance","getRenderTolerance","getSquaredTolerance","getSquaredRenderTolerance","renderFeature","equals","fromUserExtent","getTransformFromProjections","getUserProjection","toUserExtent","toUserResolution","getUid","wrapCoordinateX","CanvasVectorLayerRenderer","constructor","vectorLayer","boundHandleStyleImageChange_","handleStyleImageChange_","bind","animatingOrInteracting_","hitDetectionImageData_","clipped_","renderedFeatures_","renderedRevision_","renderedResolution_","NaN","renderedExtent_","wrappedRenderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedPixelRatio_","renderedRenderOrder_","renderedFrameDeclutter_","replayGroup_","replayGroupChanged","clipping","targetContext_","opacity_","renderWorlds","executorGroup","frameState","declutterable","extent","viewState","center","resolution","projection","rotation","projectionExtent","getExtent","vectorSource","getLayer","getSource","declutter","getDeclutter","pixelRatio","viewHints","snapToPixel","ANIMATING","INTERACTING","context","width","Math","round","height","multiWorld","getWrapX","canWrapX","worldWidth","endWorld","ceil","world","floor","transform","getRenderTransform","slice","execute","canvas","undefined","setDrawContext_","resetDrawContext_","alpha","globalAlpha","drawImage","push","renderDeclutter","renderDeferredInternal","renderDeferred","restore","renderFrame","target","layerState","layerStatesArray","layerIndex","opacity","prepareContainer","replayGroup","render","isEmpty","hasRenderListeners","hasListener","PRERENDER","POSTRENDER","preRender","layerExtent","clipUnrotated","postRender","container","getFeatures","pixel","Promise","resolve","size","layer","transforms","source","startX","offsetX","userProjection","getStyleFunction","forEachFeatureAtCoordinate","coordinate","hitTolerance","callback","matches","features","featureCallback","feature","geometry","distanceSq","key","match","splice","lastIndexOf","result","executorGroups","some","all","map","item","value","handleFontsChanged","getVisible","changed","event","renderIfReadyAndVisible","prepareFrame","animating","interacting","updateWhileAnimating","getUpdateWhileAnimating","updateWhileInteracting","getUpdateWhileInteracting","ready","frameStateExtent","vectorLayerRevision","getRevision","vectorLayerRenderBuffer","getRenderBuffer","vectorLayerRenderOrder","getRenderOrder","renderedExtent","loadExtents","gutter","max","loadExtent","userTransform","i","ii","length","userExtent","loadFeatures","squaredTolerance","index","styles","styleFunction","dirty","getFeaturesInExtent","sort","replayGroupInstructions","finish","getOverlaps","builderGroup","loading","Array","isArray"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/renderer/canvas/VectorLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, {canvasPool} from './Layer.js';\nimport ExecutorGroup, {\n  ALL,\n  DECLUTTER,\n  NON_DECLUTTER,\n} from '../../render/canvas/ExecutorGroup.js';\nimport RenderEventType from '../../render/EventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  HIT_DETECT_RESOLUTION,\n  createHitDetectionImageData,\n  hitDetect,\n} from '../../render/canvas/hitdetect.js';\nimport {\n  buffer,\n  containsExtent,\n  createEmpty,\n  getHeight,\n  getWidth,\n  intersects as intersectsExtent,\n  wrapX as wrapExtentX,\n} from '../../extent.js';\nimport {createCanvasContext2D, releaseCanvas} from '../../dom.js';\nimport {\n  defaultOrder as defaultRenderOrder,\n  getTolerance as getRenderTolerance,\n  getSquaredTolerance as getSquaredRenderTolerance,\n  renderFeature,\n} from '../vector.js';\nimport {equals} from '../../array.js';\nimport {\n  fromUserExtent,\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n  toUserResolution,\n} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @type {ImageData|null}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.clipped_ = false;\n\n    /**\n     * @private\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedPixelRatio_ = 1;\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedFrameDeclutter_;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.targetContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = 1;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {boolean} [declutterable] `true` to only render declutterable items,\n   *     `false` to only render non-declutterable items, `undefined` to render all.\n   */\n  renderWorlds(executorGroup, frameState, declutterable) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const declutter = this.getLayer().getDeclutter();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    const context = this.context;\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n      : 1;\n    let world = multiWorld\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n      : 0;\n    do {\n      let transform = this.getRenderTransform(\n        center,\n        resolution,\n        0,\n        pixelRatio,\n        width,\n        height,\n        world * worldWidth,\n      );\n      if (frameState.declutter) {\n        transform = transform.slice(0);\n      }\n      executorGroup.execute(\n        context,\n        [context.canvas.width, context.canvas.height],\n        transform,\n        rotation,\n        snapToPixel,\n        declutterable === undefined\n          ? ALL\n          : declutterable\n            ? DECLUTTER\n            : NON_DECLUTTER,\n        declutterable\n          ? declutter && frameState.declutter[declutter]\n          : undefined,\n      );\n    } while (++world < endWorld);\n  }\n\n  /**\n   * @private\n   */\n  setDrawContext_() {\n    if (this.opacity_ !== 1) {\n      this.targetContext_ = this.context;\n      this.context = createCanvasContext2D(\n        this.context.canvas.width,\n        this.context.canvas.height,\n        canvasPool,\n      );\n    }\n  }\n\n  /**\n   * @private\n   */\n  resetDrawContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.targetContext_.globalAlpha;\n      this.targetContext_.globalAlpha = this.opacity_;\n      this.targetContext_.drawImage(this.context.canvas, 0, 0);\n      this.targetContext_.globalAlpha = alpha;\n      releaseCanvas(this.context);\n      canvasPool.push(this.context.canvas);\n      this.context = this.targetContext_;\n      this.targetContext_ = null;\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (!this.replayGroup_ || !this.getLayer().getDeclutter()) {\n      return;\n    }\n    this.renderWorlds(this.replayGroup_, frameState, true);\n  }\n\n  /**\n   * Render deferred instructions.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeferredInternal(frameState) {\n    if (!this.replayGroup_) {\n      return;\n    }\n    this.replayGroup_.renderDeferred();\n    if (this.clipped_) {\n      this.context.restore();\n    }\n    this.resetDrawContext_();\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement|null} target Target that may be used to render content to.\n   * @return {HTMLElement|null} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    this.opacity_ = layerState.opacity;\n    const viewState = frameState.viewState;\n\n    this.prepareContainer(frameState, target);\n    const context = this.context;\n\n    const replayGroup = this.replayGroup_;\n    let render = replayGroup && !replayGroup.isEmpty();\n    if (!render) {\n      const hasRenderListeners =\n        this.getLayer().hasListener(RenderEventType.PRERENDER) ||\n        this.getLayer().hasListener(RenderEventType.POSTRENDER);\n      if (!hasRenderListeners) {\n        return null;\n      }\n    }\n\n    this.setDrawContext_();\n\n    this.preRender(context, frameState);\n\n    const projection = viewState.projection;\n\n    // clipped rendering if layer extent is set\n    this.clipped_ = false;\n    if (render && layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      this.clipped_ = render && !containsExtent(layerExtent, frameState.extent);\n      if (this.clipped_) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(\n        replayGroup,\n        frameState,\n        this.getLayer().getDeclutter() ? false : undefined,\n      );\n    }\n\n    if (!frameState.declutter && this.clipped_) {\n      context.restore();\n    }\n\n    this.postRender(context, frameState);\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    if (!frameState.declutter) {\n      this.resetDrawContext_();\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\n   * that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise((resolve) => {\n      if (\n        this.frameState &&\n        !this.hitDetectionImageData_ &&\n        !this.animatingOrInteracting_\n      ) {\n        const size = this.frameState.size.slice();\n        const center = this.renderedCenter_;\n        const resolution = this.renderedResolution_;\n        const rotation = this.renderedRotation_;\n        const projection = this.renderedProjection_;\n        const extent = this.wrappedRenderedExtent_;\n        const layer = this.getLayer();\n        const transforms = [];\n        const width = size[0] * HIT_DETECT_RESOLUTION;\n        const height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(\n          this.getRenderTransform(\n            center,\n            resolution,\n            rotation,\n            HIT_DETECT_RESOLUTION,\n            width,\n            height,\n            0,\n          ).slice(),\n        );\n        const source = layer.getSource();\n        const projectionExtent = projection.getExtent();\n        if (\n          source.getWrapX() &&\n          projection.canWrapX() &&\n          !containsExtent(projectionExtent, extent)\n        ) {\n          let startX = extent[0];\n          const worldWidth = getWidth(projectionExtent);\n          let world = 0;\n          let offsetX;\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                HIT_DETECT_RESOLUTION,\n                width,\n                height,\n                offsetX,\n              ).slice(),\n            );\n            startX += worldWidth;\n          }\n          world = 0;\n          startX = extent[2];\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                HIT_DETECT_RESOLUTION,\n                width,\n                height,\n                offsetX,\n              ).slice(),\n            );\n            startX -= worldWidth;\n          }\n        }\n        const userProjection = getUserProjection();\n        this.hitDetectionImageData_ = createHitDetectionImageData(\n          size,\n          transforms,\n          this.renderedFeatures_,\n          layer.getStyleFunction(),\n          extent,\n          resolution,\n          rotation,\n          getSquaredRenderTolerance(resolution, this.renderedPixelRatio_),\n          userProjection ? projection : null,\n        );\n      }\n      resolve(\n        hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_),\n      );\n    });\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches,\n  ) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(\n          (features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback,\n          }),\n        );\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n\n    let result;\n    const executorGroups = [this.replayGroup_];\n    const declutter = this.getLayer().getDeclutter();\n    executorGroups.some((executorGroup) => {\n      return (result = executorGroup.forEachFeatureAtCoordinate(\n        coordinate,\n        resolution,\n        rotation,\n        hitTolerance,\n        featureCallback,\n        declutter && frameState.declutter[declutter]\n          ? frameState.declutter[declutter].all().map((item) => item.value)\n          : null,\n      ));\n    });\n\n    return result;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (\n      (this.ready && !updateWhileAnimating && animating) ||\n      (!updateWhileInteracting && interacting)\n    ) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = buffer(\n      frameStateExtent,\n      vectorLayerRenderBuffer * resolution,\n    );\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (\n      vectorSource.getWrapX() &&\n      projection.canWrapX() &&\n      !containsExtent(projectionExtent, frameState.extent)\n    ) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (\n        loadExtent[0] < projectionExtent[0] &&\n        loadExtent[2] < projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] + worldWidth,\n          loadExtent[1],\n          loadExtent[2] + worldWidth,\n          loadExtent[3],\n        ]);\n      } else if (\n        loadExtent[0] > projectionExtent[0] &&\n        loadExtent[2] > projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] - worldWidth,\n          loadExtent[1],\n          loadExtent[2] - worldWidth,\n          loadExtent[3],\n        ]);\n      }\n    }\n\n    if (\n      this.ready &&\n      this.renderedResolution_ == resolution &&\n      this.renderedRevision_ == vectorLayerRevision &&\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n      this.renderedFrameDeclutter_ === !!frameState.declutter &&\n      containsExtent(this.wrappedRenderedExtent_, extent)\n    ) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n\n    const replayGroup = new CanvasBuilderGroup(\n      getRenderTolerance(resolution, pixelRatio),\n      extent,\n      resolution,\n      pixelRatio,\n    );\n\n    const userProjection = getUserProjection();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = toUserExtent(extent, projection);\n        vectorSource.loadFeatures(\n          userExtent,\n          toUserResolution(resolution, projection),\n          userProjection,\n        );\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    let ready = true;\n    const render =\n      /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       * @param {number} index Index.\n       */\n      (feature, index) => {\n        let styles;\n        const styleFunction =\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(\n            feature,\n            squaredTolerance,\n            styles,\n            replayGroup,\n            userTransform,\n            this.getLayer().getDeclutter(),\n            index,\n          );\n          ready = ready && !dirty;\n        }\n      };\n\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i], i);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(\n      extent,\n      resolution,\n      pixelRatio,\n      vectorSource.getOverlaps(),\n      replayGroupInstructions,\n      vectorLayer.getRenderBuffer(),\n      !!frameState.declutter,\n    );\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedFrameDeclutter_ = !!frameState.declutter;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.renderedPixelRatio_ = pixelRatio;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n   * @param {boolean} [declutter] Enable decluttering.\n   * @param {number} [index] Render order index.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    transform,\n    declutter,\n    index,\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            transform,\n            declutter,\n            index,\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        transform,\n        declutter,\n        index,\n      );\n    }\n    return loading;\n  }\n}\n\nexport default CanvasVectorLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}