{"ast":null,"code":"/**\n * @module ol/render/canvas/LineStringBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction, { beginPathInstruction, strokeInstruction } from './Instruction.js';\nimport { defaultLineDash, defaultLineDashOffset } from '../canvas.js';\n\nclass CanvasLineStringBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n  }\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} end.\n   */\n\n\n  drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);\n    const moveToLineToInstruction = [CanvasInstruction.MOVE_TO_LINE_TO, myBegin, myEnd];\n    this.instructions.push(moveToLineToInstruction);\n    this.hitDetectionInstructions.push(moveToLineToInstruction);\n    return end;\n  }\n  /**\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} lineStringGeometry Line string geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n\n\n  drawLineString(lineStringGeometry, feature, index) {\n    const state = this.state;\n    const strokeStyle = state.strokeStyle;\n    const lineWidth = state.lineWidth;\n\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(lineStringGeometry, feature, index);\n    this.hitDetectionInstructions.push([CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin, state.miterLimit, defaultLineDash, defaultLineDashOffset], beginPathInstruction);\n    const flatCoordinates = lineStringGeometry.getFlatCoordinates();\n    const stride = lineStringGeometry.getStride();\n    this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(feature);\n  }\n  /**\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n\n\n  drawMultiLineString(multiLineStringGeometry, feature, index) {\n    const state = this.state;\n    const strokeStyle = state.strokeStyle;\n    const lineWidth = state.lineWidth;\n\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(multiLineStringGeometry, feature, index);\n    this.hitDetectionInstructions.push([CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin, state.miterLimit, defaultLineDash, defaultLineDashOffset], beginPathInstruction);\n    const ends = multiLineStringGeometry.getEnds();\n    const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\n    const stride = multiLineStringGeometry.getStride();\n    let offset = 0;\n\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.drawFlatCoordinates_(flatCoordinates, offset,\n      /** @type {number} */\n      ends[i], stride);\n    }\n\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(feature);\n  }\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n\n\n  finish() {\n    const state = this.state;\n\n    if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {\n      this.instructions.push(strokeInstruction);\n    }\n\n    this.reverseHitDetectionInstructions();\n    this.state = null;\n    return super.finish();\n  }\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n\n\n  applyStroke(state) {\n    if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {\n      this.instructions.push(strokeInstruction);\n      state.lastStroke = this.coordinates.length;\n    }\n\n    state.lastStroke = 0;\n    super.applyStroke(state);\n    this.instructions.push(beginPathInstruction);\n  }\n\n}\n\nexport default CanvasLineStringBuilder;","map":{"version":3,"names":["CanvasBuilder","CanvasInstruction","beginPathInstruction","strokeInstruction","defaultLineDash","defaultLineDashOffset","CanvasLineStringBuilder","constructor","tolerance","maxExtent","resolution","pixelRatio","drawFlatCoordinates_","flatCoordinates","offset","end","stride","myBegin","coordinates","length","myEnd","appendFlatLineCoordinates","moveToLineToInstruction","MOVE_TO_LINE_TO","instructions","push","hitDetectionInstructions","drawLineString","lineStringGeometry","feature","index","state","strokeStyle","lineWidth","undefined","updateStrokeStyle","applyStroke","beginGeometry","SET_STROKE_STYLE","lineCap","lineJoin","miterLimit","getFlatCoordinates","getStride","endGeometry","drawMultiLineString","multiLineStringGeometry","ends","getEnds","i","ii","finish","lastStroke","reverseHitDetectionInstructions"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/render/canvas/LineStringBuilder.js"],"sourcesContent":["/**\n * @module ol/render/canvas/LineStringBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction, {\n  beginPathInstruction,\n  strokeInstruction,\n} from './Instruction.js';\nimport {defaultLineDash, defaultLineDashOffset} from '../canvas.js';\n\nclass CanvasLineStringBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} end.\n   */\n  drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatLineCoordinates(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      false,\n      false,\n    );\n    const moveToLineToInstruction = [\n      CanvasInstruction.MOVE_TO_LINE_TO,\n      myBegin,\n      myEnd,\n    ];\n    this.instructions.push(moveToLineToInstruction);\n    this.hitDetectionInstructions.push(moveToLineToInstruction);\n    return end;\n  }\n\n  /**\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} lineStringGeometry Line string geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawLineString(lineStringGeometry, feature, index) {\n    const state = this.state;\n    const strokeStyle = state.strokeStyle;\n    const lineWidth = state.lineWidth;\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(lineStringGeometry, feature, index);\n    this.hitDetectionInstructions.push(\n      [\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ],\n      beginPathInstruction,\n    );\n    const flatCoordinates = lineStringGeometry.getFlatCoordinates();\n    const stride = lineStringGeometry.getStride();\n    this.drawFlatCoordinates_(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride,\n    );\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawMultiLineString(multiLineStringGeometry, feature, index) {\n    const state = this.state;\n    const strokeStyle = state.strokeStyle;\n    const lineWidth = state.lineWidth;\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(multiLineStringGeometry, feature, index);\n    this.hitDetectionInstructions.push(\n      [\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ],\n      beginPathInstruction,\n    );\n    const ends = multiLineStringGeometry.getEnds();\n    const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\n    const stride = multiLineStringGeometry.getStride();\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.drawFlatCoordinates_(\n        flatCoordinates,\n        offset,\n        /** @type {number} */ (ends[i]),\n        stride,\n      );\n    }\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    const state = this.state;\n    if (\n      state.lastStroke != undefined &&\n      state.lastStroke != this.coordinates.length\n    ) {\n      this.instructions.push(strokeInstruction);\n    }\n    this.reverseHitDetectionInstructions();\n    this.state = null;\n    return super.finish();\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n  applyStroke(state) {\n    if (\n      state.lastStroke != undefined &&\n      state.lastStroke != this.coordinates.length\n    ) {\n      this.instructions.push(strokeInstruction);\n      state.lastStroke = this.coordinates.length;\n    }\n    state.lastStroke = 0;\n    super.applyStroke(state);\n    this.instructions.push(beginPathInstruction);\n  }\n}\n\nexport default CanvasLineStringBuilder;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,cAA1B;AACA,OAAOC,iBAAP,IACEC,oBADF,EAEEC,iBAFF,QAGO,kBAHP;AAIA,SAAQC,eAAR,EAAyBC,qBAAzB,QAAqD,cAArD;;AAEA,MAAMC,uBAAN,SAAsCN,aAAtC,CAAoD;EAClD;AACF;AACA;AACA;AACA;AACA;EACEO,WAAW,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,UAAvB,EAAmCC,UAAnC,EAA+C;IACxD,MAAMH,SAAN,EAAiBC,SAAjB,EAA4BC,UAA5B,EAAwCC,UAAxC;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEC,oBAAoB,CAACC,eAAD,EAAkBC,MAAlB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuC;IACzD,MAAMC,OAAO,GAAG,KAAKC,WAAL,CAAiBC,MAAjC;IACA,MAAMC,KAAK,GAAG,KAAKC,yBAAL,CACZR,eADY,EAEZC,MAFY,EAGZC,GAHY,EAIZC,MAJY,EAKZ,KALY,EAMZ,KANY,CAAd;IAQA,MAAMM,uBAAuB,GAAG,CAC9BrB,iBAAiB,CAACsB,eADY,EAE9BN,OAF8B,EAG9BG,KAH8B,CAAhC;IAKA,KAAKI,YAAL,CAAkBC,IAAlB,CAAuBH,uBAAvB;IACA,KAAKI,wBAAL,CAA8BD,IAA9B,CAAmCH,uBAAnC;IACA,OAAOP,GAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEY,cAAc,CAACC,kBAAD,EAAqBC,OAArB,EAA8BC,KAA9B,EAAqC;IACjD,MAAMC,KAAK,GAAG,KAAKA,KAAnB;IACA,MAAMC,WAAW,GAAGD,KAAK,CAACC,WAA1B;IACA,MAAMC,SAAS,GAAGF,KAAK,CAACE,SAAxB;;IACA,IAAID,WAAW,KAAKE,SAAhB,IAA6BD,SAAS,KAAKC,SAA/C,EAA0D;MACxD;IACD;;IACD,KAAKC,iBAAL,CAAuBJ,KAAvB,EAA8B,KAAKK,WAAnC;IACA,KAAKC,aAAL,CAAmBT,kBAAnB,EAAuCC,OAAvC,EAAgDC,KAAhD;IACA,KAAKJ,wBAAL,CAA8BD,IAA9B,CACE,CACExB,iBAAiB,CAACqC,gBADpB,EAEEP,KAAK,CAACC,WAFR,EAGED,KAAK,CAACE,SAHR,EAIEF,KAAK,CAACQ,OAJR,EAKER,KAAK,CAACS,QALR,EAMET,KAAK,CAACU,UANR,EAOErC,eAPF,EAQEC,qBARF,CADF,EAWEH,oBAXF;IAaA,MAAMW,eAAe,GAAGe,kBAAkB,CAACc,kBAAnB,EAAxB;IACA,MAAM1B,MAAM,GAAGY,kBAAkB,CAACe,SAAnB,EAAf;IACA,KAAK/B,oBAAL,CACEC,eADF,EAEE,CAFF,EAGEA,eAAe,CAACM,MAHlB,EAIEH,MAJF;IAMA,KAAKU,wBAAL,CAA8BD,IAA9B,CAAmCtB,iBAAnC;IACA,KAAKyC,WAAL,CAAiBf,OAAjB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEgB,mBAAmB,CAACC,uBAAD,EAA0BjB,OAA1B,EAAmCC,KAAnC,EAA0C;IAC3D,MAAMC,KAAK,GAAG,KAAKA,KAAnB;IACA,MAAMC,WAAW,GAAGD,KAAK,CAACC,WAA1B;IACA,MAAMC,SAAS,GAAGF,KAAK,CAACE,SAAxB;;IACA,IAAID,WAAW,KAAKE,SAAhB,IAA6BD,SAAS,KAAKC,SAA/C,EAA0D;MACxD;IACD;;IACD,KAAKC,iBAAL,CAAuBJ,KAAvB,EAA8B,KAAKK,WAAnC;IACA,KAAKC,aAAL,CAAmBS,uBAAnB,EAA4CjB,OAA5C,EAAqDC,KAArD;IACA,KAAKJ,wBAAL,CAA8BD,IAA9B,CACE,CACExB,iBAAiB,CAACqC,gBADpB,EAEEP,KAAK,CAACC,WAFR,EAGED,KAAK,CAACE,SAHR,EAIEF,KAAK,CAACQ,OAJR,EAKER,KAAK,CAACS,QALR,EAMET,KAAK,CAACU,UANR,EAOErC,eAPF,EAQEC,qBARF,CADF,EAWEH,oBAXF;IAaA,MAAM6C,IAAI,GAAGD,uBAAuB,CAACE,OAAxB,EAAb;IACA,MAAMnC,eAAe,GAAGiC,uBAAuB,CAACJ,kBAAxB,EAAxB;IACA,MAAM1B,MAAM,GAAG8B,uBAAuB,CAACH,SAAxB,EAAf;IACA,IAAI7B,MAAM,GAAG,CAAb;;IACA,KAAK,IAAImC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGH,IAAI,CAAC5B,MAA1B,EAAkC8B,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;MAC7CnC,MAAM,GAAG,KAAKF,oBAAL,CACPC,eADO,EAEPC,MAFO;MAGP;MAAuBiC,IAAI,CAACE,CAAD,CAHpB,EAIPjC,MAJO,CAAT;IAMD;;IACD,KAAKU,wBAAL,CAA8BD,IAA9B,CAAmCtB,iBAAnC;IACA,KAAKyC,WAAL,CAAiBf,OAAjB;EACD;EAED;AACF;AACA;;;EACEsB,MAAM,GAAG;IACP,MAAMpB,KAAK,GAAG,KAAKA,KAAnB;;IACA,IACEA,KAAK,CAACqB,UAAN,IAAoBlB,SAApB,IACAH,KAAK,CAACqB,UAAN,IAAoB,KAAKlC,WAAL,CAAiBC,MAFvC,EAGE;MACA,KAAKK,YAAL,CAAkBC,IAAlB,CAAuBtB,iBAAvB;IACD;;IACD,KAAKkD,+BAAL;IACA,KAAKtB,KAAL,GAAa,IAAb;IACA,OAAO,MAAMoB,MAAN,EAAP;EACD;EAED;AACF;AACA;;;EACEf,WAAW,CAACL,KAAD,EAAQ;IACjB,IACEA,KAAK,CAACqB,UAAN,IAAoBlB,SAApB,IACAH,KAAK,CAACqB,UAAN,IAAoB,KAAKlC,WAAL,CAAiBC,MAFvC,EAGE;MACA,KAAKK,YAAL,CAAkBC,IAAlB,CAAuBtB,iBAAvB;MACA4B,KAAK,CAACqB,UAAN,GAAmB,KAAKlC,WAAL,CAAiBC,MAApC;IACD;;IACDY,KAAK,CAACqB,UAAN,GAAmB,CAAnB;IACA,MAAMhB,WAAN,CAAkBL,KAAlB;IACA,KAAKP,YAAL,CAAkBC,IAAlB,CAAuBvB,oBAAvB;EACD;;AAvJiD;;AA0JpD,eAAeI,uBAAf"},"metadata":{},"sourceType":"module"}