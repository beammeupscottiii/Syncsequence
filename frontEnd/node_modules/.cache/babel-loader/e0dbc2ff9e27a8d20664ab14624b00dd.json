{"ast":null,"code":"var _jsxFileName = \"/home/jce/Web Dev Space/Syncsequence/frontEnd/src/components/notifs/instant.jsx\",\n    _s = $RefreshSig$();\n\n/* * * V I T A L S * * */\nimport React, { useState, useReducer, useEffect } from 'react';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { useNavigate } from 'react-router-dom';\nimport APIaccess from '../../apiaccess';\nimport './notifs.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst accessAPI = APIaccess();\nexport default function Instants(_ref) {\n  _s();\n\n  let {\n    sendMessage,\n    socketMessage,\n    setSocketMessage,\n    setActive,\n    isActive,\n    accessID,\n    setAccessID,\n    getUnreadCount,\n    current,\n    setCurrent\n  } = _ref;\n  const navigate = useNavigate();\n  let userID = sessionStorage.getItem('userID');\n  let username = sessionStorage.getItem('userName');\n  let activity = isActive;\n  /***\r\n   * 12. 20. 2023\r\n   * \r\n   * All <manage* > component api functions to be processed through <instant>\r\n   * as to streamline UX of user making decisions\r\n   * \r\n   */\n\n  /*** \r\n  \tFunctions to be used by primary useEffect \r\n  ***/\n\n  let makeNotif_sendInitialRequest = async notif => {\n    await accessAPI.newInteraction(notif).then(data => {\n      if (data.confirmation == false) {\n        setSocketMessage({\n          type: 'simpleNotif',\n          message: `You have already sent @${notif.recipientUsername} this kind of request`\n        });\n      } else if (data.message == 'connectionRequestSent') {\n        setSocketMessage({\n          type: 'request',\n          message: 'connectionRequestSent',\n          username: notif.recipientUsername\n        });\n        setActive({\n          state: true,\n          type: 1\n        });\n        notif.message = 'connectionRequestRecieved';\n        notif.originalID = data.originalID; //for reciever to mark read within popUp\n\n        sendMessage(JSON.stringify(notif));\n      } else if (data.message == 'connectionAcceptedSent') {\n        //confirm: true, message: request\n        console.log(data);\n        setSocketMessage({\n          type: 'request',\n          message: data.message,\n          person: notif.recipientUsername\n        });\n        setActive({\n          state: true,\n          type: 1\n        });\n        notif.message = 'connectionAcceptedRecieved';\n        notif.originalID = data._id;\n        sendMessage(JSON.stringify(notif));\n      } else if (data.message == 'subscribed') {\n        console.log(data);\n        setSocketMessage({\n          type: 'confirmation',\n          message: data.message,\n          recipientUsername: data.recipientUsername\n        });\n        setActive({\n          state: true,\n          type: 1\n        });\n        notif.originalID = data._id;\n        sendMessage(JSON.stringify(notif));\n      } else if (data.message == 'subscriptionRequestSent') {\n        console.log(data);\n        console.log(notif);\n        setSocketMessage({\n          type: 'request',\n          message: 'subscriptionRequestSent',\n          username: notif.recipientUsername\n        });\n        setActive({\n          state: true,\n          type: 1\n        });\n        notif.originalID = data._id; //for the reciever to mark their notif read\n\n        notif.message = 'subscriptionRequestRecieved';\n        sendMessage(JSON.stringify(notif));\n      } else if (data.message == 'subscriptionAccepted') {\n        console.log(socketMessage);\n        console.log(notif);\n        setSocketMessage({\n          type: 'confirmation',\n          message: 'subscriptionAccepted',\n          person: notif.recipientUsername\n        });\n        setActive({\n          state: true,\n          type: 1\n        });\n        notif.originalID = data._id;\n        notif.senderUsername = username;\n        sendMessage(JSON.stringify(notif)); // body = {\n        // \ttype: 'request',\n        // \tsenderID: userID,\n        // \tsenderUsername: username,\n        // \trecipients: [notif.sender],\n        // \trecipientUsername: notif.senderUsername,\n        // \tmessage: 'subscriptionAccepted'\n        // }\n      } // else if(data.message == 'requestRecieved') {\n      // \tconsole.log(data);\n      // \tsetSocketMessage({\n      // \t\ttype: 'confirmation',\n      // \t\tmessage: data.message\n      // \t})\n      // \tsetActive({\n      // \t\tstate: true,\n      // \t\ttype: 1\n      // \t})\n      // \tnotif.originalID = data._id;\n      // }\n\n    });\n  }; //for connection and subscription requests\n  // let makeNotif_sendAcceptRequest = async (notif) => {\n  // \tawait accessAPI.newInteraction(notif).then((data) => {\n  // \t\tif(data.confirmation == false) {\n  // \t\t\tsetSocketMessage({\n  // \t\t\t\ttype: 'simpleNotif',\n  // \t\t\t\tmessage: `You and ${notif.senderUsername} are already connected`\n  // \t\t\t})\n  // \t\t}\n  // \t\tif(data.message == 'subscriptionAccepted') {\n  // \t\t\tsetSocketMessage({\n  // \t\t\t\ttype: 'confirmation',\n  // \t\t\t\tmessage: 'subscriptionAccepted',\n  // \t\t\t\tperson: data.recipientUsername\n  // \t\t\t})\n  // \t\t\tsetActive({\n  // \t\t\t\tstate: true,\n  // \t\t\t\ttype: 1\n  // \t\t\t})\n  // \t\t\tnotif.originalID = data._id;\n  // \t\t\tsendMessage(JSON.stringify(notif));\n  // \t\t\t// body = {\n  // \t\t\t// \ttype: 'request',\n  // \t\t\t// \tsenderID: userID,\n  // \t\t\t// \tsenderUsername: username,\n  // \t\t\t// \trecipients: [notif.sender],\n  // \t\t\t// \trecipientUsername: notif.senderUsername,\n  // \t\t\t// \tmessage: 'subscriptionAccepted'\n  // \t\t\t// }\n  // \t\t}\n  // \t\t// else if (data.message == 'accepted') {\n  // \t\t// \tsendMessage(JSON.stringify(notif));\n  // \t\t// \tsetSocketMessage({\n  // \t\t// \t\ttype: 'confirmation',\n  // \t\t// \t\tmessage: 'subscribed',\n  // \t\t// \t\tperson: notif.senderUsername\n  // \t\t// \t})\n  // \t\t// \tsetActive({\n  // \t\t// \t\tstate: true,\n  // \t\t// \t\ttype: 1\n  // \t\t// \t})\n  // \t\t// }\n  // \t})\n  // }\n  //for automatic subscription\n  // let makeNotif_subscribed = async (notif) => {\n  // \tawait accessAPI.newInteraction(notif).then((data) => {\n  // \t\tif(data.confirmation == false) {\n  // \t\t\tsetSocketMessage({\n  // \t\t\t\ttype: 'simpleNotif',\n  // \t\t\t\tmessage: `You are already subscribed to ${notif.senderUsername}`\n  // \t\t\t})\n  // \t\t}\n  // \t\tif(data.confirm == true) {\n  // \t\t\tsendMessage(JSON.stringify(notif));\n  // \t\t\tsetSocketMessage({\n  // \t\t\t\ttype: 'confirmation',\n  // \t\t\t\tmessage: 'subscribed'\n  // \t\t\t})\n  // \t\t\tsetActive({\n  // \t\t\t\tstate: true,\n  // \t\t\t\ttype: 1\n  // \t\t\t})\n  // \t\t}\n  // \t})\n  // }\n\n\n  let makeNotif_sendCommentNotif = async notif => {\n    if (socketMessage.message == 'response' && userID == socketMessage.respondeeId) {\n      console.log('true');\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'comment'\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n      return;\n    }\n\n    await accessAPI.newInteraction(notif).then(data => {\n      if (data) {\n        setSocketMessage({\n          type: 'confirmation',\n          message: 'comment'\n        });\n        setActive({\n          state: true,\n          type: 1\n        });\n      }\n\n      notif._id = data;\n    });\n    let pause = setTimeout(() => {\n      sendMessage(JSON.stringify(notif));\n    }, 1000);\n  };\n\n  let makeNotif_markNotifRead = async notif => {\n    console.log(notif);\n    let request = await accessAPI.newInteraction(notif);\n\n    if (request) {\n      console.log('something');\n      getUnreadCount();\n      setActive({\n        type: null,\n        state: false\n      });\n    }\n  };\n\n  let makeNotif_taggedPost = async notif => {\n    let request = await accessAPI.newInteraction(notif).then(data => {\n      if (data) {\n        console.log(data);\n        setSocketMessage({\n          type: 'confirmation',\n          message: 'post'\n        });\n        setActive({\n          state: true,\n          type: 1\n        });\n        notif._id = data;\n      }\n    });\n    let pause = setTimeout(() => {\n      sendMessage(JSON.stringify(notif));\n    }, 1000);\n  };\n\n  let action_NewTag = async data => {\n    console.log(data);\n    let request = await accessAPI.newGroup(data);\n\n    if (request.alreadyExists) {\n      setSocketMessage({\n        type: 'response',\n        message: 'alreadyExists',\n        groupID: request.id\n      });\n      setActive({\n        state: true,\n        type: 2\n      });\n    } else if (request.confirm) {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'tagAdd',\n        groupName: request.name\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_addTag = async data => {\n    let request = await accessAPI.manageGroup('addUser', data);\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'tagAdd',\n        groupName: request.groupName\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_deleteTag = async data => {\n    let request = await accessAPI.manageGroup('deleteGroup', data);\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'tagDelete',\n        groupName: request.groupName\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_newCollection = async data => {\n    let request = await accessAPI.newGroup(data);\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'newCollection',\n        groupName: request.name\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.alreadyExists) {\n      setSocketMessage({\n        type: 'error',\n        message: request.alreadyExists\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_renameCollection = async data => {\n    let request = await accessAPI.manageGroup('renameGroup', data);\n\n    if (request == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'renamedCollection'\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_deleteCollection = async data => {\n    let request = await accessAPI.manageGroup('deleteGroup', data);\n\n    if (request.groupName === 'BOOKMARKS') {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'emptyBookmarks',\n        groupName: request.groupName\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'deletedCollection',\n        groupName: request.groupName\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_privatizeCollection = async data => {\n    let request = await accessAPI.manageGroup('privatizeGroup', data);\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'privatizedCollection',\n        isPrivate: request.isPrivate\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_addToCollection = async data => {\n    let request = await accessAPI.groupPosts({\n      action: 'addPost',\n      groupID: data.groupID,\n      postID: data.postID,\n      postOwner: data.postOwner\n    });\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'addToCollection',\n        groupName: request.groupName\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_removeFromCollection = async data => {\n    console.log(data);\n    let request = await accessAPI.groupPosts({\n      action: 'removePost',\n      groupID: data.groupID,\n      postID: data.postID\n    });\n\n    if (request.confirmation == true && data.action == 'removeAllFromCollection') {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'removedAllFromCollection',\n        groupName: request.groupName\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'removedFromCollection',\n        groupName: request.groupName\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_profilePhoto = async data => {\n    let body = new FormData();\n    body.append('option', 'profilePhoto');\n    body.append('photo', data.content); // console.log(data.content)\n\n    console.log(body);\n    let request = await accessAPI.userSettings_profilePhoto(body);\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        label: 'profilePhoto',\n        message: request.message,\n        updatedPhoto: request.updatedPhoto\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n      sessionStorage.setItem('profilePhoto');\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_usernameUpdate = async data => {\n    let body = {\n      newUsername: data.newUsername,\n      option: 'username'\n    };\n    let request = await accessAPI.userSettings(body);\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        label: 'usernameUpdated',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n      sessionStorage.setItem('userName', data.newUsername);\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_changePassword = async data => {\n    let body = {\n      option: 'changePassword',\n      currentPassword: data.currentPassword,\n      newPassword: data.newPassword\n    };\n    let request = await accessAPI.userSettings(body);\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        label: 'passwordUpdated',\n        message: \"Password successfully updated\"\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_updateBio = async data => {\n    let request = await accessAPI.userSettings(data);\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        label: 'bioUpdated',\n        message: \"Biography updated!\"\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_privacySetting = async data => {\n    let request = await accessAPI.userSettings(data);\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        label: 'privacyUpdated',\n        message: `Privacy setting is now ${data.state}`\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_addToPinnedMedia = async data => {\n    let request = await accessAPI.userSettings({\n      option: 'pinnedMedia',\n      type: 'add',\n      content: data.content\n    });\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        label: 'usersPinned',\n        message: `Content added to Pinned Media`\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_removeFromPinnedPosts = async data => {\n    let request = await accessAPI.userSettings({\n      option: 'pinnedPosts',\n      type: 'remove',\n      content: data.content\n    });\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        label: 'usersPinned',\n        message: `Content removed from Pinned Media`\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_removeFromPinnedMedia = async data => {\n    let request = await accessAPI.userSettings({\n      option: 'pinnedMedia',\n      type: 'remove',\n      content: data.content\n    });\n\n    if (request.confirmation == true) {\n      setSocketMessage({\n        type: 'confirmation',\n        label: 'usersPinned',\n        message: `Content removed from Pinned Media`\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (request.message) {\n      setSocketMessage({\n        type: 'error',\n        message: request.message\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  };\n\n  let action_updateNotifs = async data => {\n    sendMessage(JSON.stringify(data));\n  };\n  /*** \r\n  \tResponse functions to alerts recieved by user\r\n  ***/\n\n\n  let interact = async (arg, notif) => {\n    /* Sets socketMessage to accept connection request */\n    if (arg == 'accept') {\n      let notifi = {\n        type: 'request',\n        recipients: [accessID.accept],\n        recipientUsername: notif.senderUsername,\n        senderID: userID,\n        senderUsername: username,\n        message: 'connectionAcceptedSent'\n      };\n      setSocketMessage(notifi);\n      setActive({\n        type: null,\n        state: false\n      });\n      console.log(accessID);\n      console.log(notifi); // if(notif.message == 'subscriptionRequested') {\n      // \t//should be the same as a regular automatic subscription\n      // \tlet body = {\n      // \t\ttype: 'request',\n      // \t\tsenderID: userID,\n      // \t\tsenderUsername: username,\n      // \t\trecipients: [notif.sender],\n      // \t\trecipientUsername: notif.senderUsername,\n      // \t\tmessage: 'subscriptionAccepted'\n      // \t}\n      // \tsetSocketMessage(body);\n      // }\n      // if(notif.message == 'initial') {//simply notifies requester of connection acceptance\t\n      // }\n    } else if (arg == 'subscriptionAccepted') {\n      let body = {\n        type: 'request',\n        senderID: userID,\n        senderUsername: username,\n        recipients: [notif.senderID],\n        recipientUsername: notif.senderUsername,\n        // message: 'subscriptionAccepted'\n        message: 'subscriptionAccepted'\n      };\n      let sm = {\n        type: 'markRead',\n        notifID: notif._id,\n        userID: userID,\n        senderUsername: username\n      };\n      let request = await accessAPI.newInteraction(sm);\n      setActive({\n        type: null,\n        state: false\n      });\n      let delay = setTimeout(() => {\n        setSocketMessage(body);\n      }, 400);\n      console.log(body);\n    } else if (arg == 'ignore') {\n      let notif = {\n        type: 'markRead',\n        notifID: accessID.notifID,\n        userID: userID\n      };\n      makeNotif_markNotifRead(notif);\n    } else if (arg == 'markRead') {\n      let notif = {\n        type: 'markRead',\n        notifID: accessID.notifID,\n        userID: userID\n      };\n      makeNotif_markNotifRead(notif);\n    } else if (arg == 'viewPost') {\n      let post = await accessAPI.getBlogPost(accessID.postURL);\n      setAccessID({\n        commentID: accessID.commentID\n      });\n      setTimeout(() => {\n        navigate(`/post/${accessID.postURL}`, {\n          state: {\n            post: post\n          }\n        });\n      }, 300);\n    } else if (arg == 'remove') {\n      if (socketMessage.message == 'confirm_deletePost') {\n        setCurrent({ ...current,\n          scrollTo: null\n        });\n        navigate(`/home`);\n        let request = await accessAPI.deletePost(accessID.remove).then(data => {\n          if (data) {\n            setSocketMessage({\n              type: 'confirmation',\n              message: 'deletedPost'\n            });\n            setActive({\n              state: true,\n              type: 1\n            });\n          }\n        });\n      } else if (socketMessage.message == 'confirm_deleteComment') {} //remove post\n\n    } else if (arg == 'deleteComment') {\n      let request = await accessAPI.deleteComment(accessID.remove).then(data => {\n        if (data.confirm) {\n          setSocketMessage({\n            type: 'confirmation',\n            message: 'deletedComment'\n          });\n          setActive({\n            state: true,\n            type: 1\n          });\n        }\n      });\n    } else if (arg == 'joinGroup') {\n      setActive({\n        type: null,\n        state: false\n      });\n      let data = {\n        groupID: socketMessage.groupID,\n        userID: userID\n      };\n      let request = await accessAPI.manageGroup('addUser', data).then(data => {\n        if (data.message == 'noAccess') {\n          setSocketMessage({\n            type: 'error',\n            message: `This ${data.type} is private`,\n            groupID: data.id\n          });\n          setActive({\n            state: true,\n            type: 1\n          });\n        } else if (data.confirm == true) {\n          setSocketMessage({\n            type: 'confirmation',\n            message: 'group',\n            groupName: data.name\n          });\n          setActive({\n            state: true,\n            type: 1\n          });\n        }\n      });\n    }\n  };\n  /**\r\n   * Primary useEffect\r\n   * Upon change of 'socketMessage'\r\n   * execute a make or action function with socketMessage\r\n   * \r\n   * 12. 31. 2023\r\n   * could probably use switch n case here...\r\n   */\n\n\n  useEffect(() => {\n    /* U S E R   S E T T I N G S */\n    if (socketMessage.action == 'updateNotifs') {\n      action_updateNotifs(socketMessage);\n\n      if (socketMessage.message) {\n        setActive({\n          state: true,\n          type: 1\n        });\n      }\n    } else if (socketMessage.action == 'profilePhoto') {\n      action_profilePhoto(socketMessage);\n    } else if (socketMessage.action == 'usernameUpdate') {\n      action_usernameUpdate(socketMessage);\n    } else if (socketMessage.action == 'changePassword') {\n      action_changePassword(socketMessage);\n    } else if (socketMessage.action == 'bioUpdate') {\n      action_updateBio(socketMessage);\n    } else if (socketMessage.action == 'privacy') {\n      action_privacySetting(socketMessage);\n    } else if (socketMessage.action == 'addToPinnedMedia') {\n      action_addToPinnedMedia(socketMessage);\n    } else if (socketMessage.action == 'removeFromPinnedMedia' || socketMessage.action == 'removeAllFromPinnedMedia') {\n      action_removeFromPinnedMedia(socketMessage);\n    } else if (socketMessage.action == 'removeFromPinnedPosts' || socketMessage.action == 'removeAllFromPinnedPosts') {\n      action_removeFromPinnedPosts(socketMessage);\n    }\n    /* P O S T  O P T I O N S */\n    else if (socketMessage.action == 'deletePost') {\n      setAccessID({\n        remove: socketMessage.postID\n      });\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'confirm_deletePost'\n      });\n      setActive({\n        state: true,\n        type: 22\n      });\n    } else if (socketMessage.action == 'deleteComment') {\n      setAccessID({\n        remove: socketMessage.commentID\n      });\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'confirm_deleteComment'\n      });\n      setActive({\n        state: true,\n        type: 22\n      });\n    }\n    /* M A N A G E  M A C R O S  F U N C T I O N S */\n    else if (socketMessage.action == 'newTag') {\n      action_NewTag(socketMessage);\n    } else if (socketMessage.action == 'addTag') {\n      action_addTag(socketMessage);\n    } else if (socketMessage.action == 'deleteTag') {\n      action_deleteTag(socketMessage);\n    } else if (socketMessage.action == 'newCollection') {\n      action_newCollection(socketMessage);\n    } else if (socketMessage.action == 'renameCollection') {\n      action_renameCollection(socketMessage);\n    } else if (socketMessage.action == 'privatizeCollection') {\n      action_privatizeCollection(socketMessage);\n    } else if (socketMessage.action == 'deleteCollection') {\n      console.log('recieved');\n      action_deleteCollection(socketMessage);\n    } else if (socketMessage.action == 'addToCollection') {\n      action_addToCollection(socketMessage);\n    } else if (socketMessage.action == 'removeFromCollection') {\n      action_removeFromCollection(socketMessage);\n    } else if (socketMessage.action == 'removeAllFromCollection') {\n      action_removeFromCollection(socketMessage);\n    }\n    /*\r\n    \tI N T E R A C T I O N S \r\n    */\n    else if (socketMessage.type == 'request' && socketMessage.message == 'connectionRequestSent') {\n      if (!socketMessage.recipients) {\n        return;\n      } else {\n        console.log(socketMessage);\n        makeNotif_sendInitialRequest(socketMessage);\n      }\n    } else if (socketMessage.type == 'request' && socketMessage.message == 'connectionAcceptedSent') {\n      // makeNotif_sendAcceptRequest(socketMessage);\n      makeNotif_sendInitialRequest(socketMessage);\n    } else if (socketMessage.type == 'request' && socketMessage.message == 'subscribed') {\n      // makeNotif_subscribed(socketMessage);\n      makeNotif_sendInitialRequest(socketMessage);\n    } else if (socketMessage.type == 'request' && socketMessage.message.includes('sub')) {\n      if (!socketMessage.recipients) {\n        return;\n      } else {\n        console.log(socketMessage);\n        makeNotif_sendInitialRequest(socketMessage);\n      }\n    } else if (socketMessage.type == 'comment') {\n      if (socketMessage.message == 'initial' || socketMessage.message == 'response') {\n        makeNotif_sendCommentNotif(socketMessage);\n      } else {\n        return;\n      }\n    } else if (socketMessage.type == 'tagging') {\n      if (socketMessage.message == 'sent') {\n        makeNotif_taggedPost(socketMessage);\n      }\n    } else if (socketMessage.confirm === 'postRemoval') {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'removal'\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (socketMessage.confirm === 'postUpload') {\n      setSocketMessage({\n        type: 'confirmation',\n        message: 'post'\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (socketMessage.confirm === 'postDrafted') {\n      setSocketMessage({\n        type: 'draft',\n        message: 'post'\n      });\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (socketMessage.type == 'markRead') {\n      makeNotif_markNotifRead(socketMessage);\n    } else if (socketMessage.type == 'error') {\n      //set socketMessage.message wherever useing this call\n      setActive({\n        state: true,\n        type: 1\n      });\n    } else if (socketMessage.type == 'simpleNotif') {\n      //set socketMessage.message wherever useing this call\n      setActive({\n        state: true,\n        type: 1\n      });\n    }\n  }, [socketMessage]);\n  const popUpNotif = React.useRef();\n  /**\r\n   * Returns specific popUp notification type based on\r\n   * message recieved from webSocket\r\n   * \r\n   * level indicates significance of alert:\r\n   *    blue --- post / comment / updateSetting / cancel \r\n   * \t  green --- acceptRequest / acceptInvite / tagging \r\n   * \t  orange --- ignore / flag / confirmRemoval \r\n   *    magenta --- error\r\n   * \t\r\n   */\n\n  let [level, setLevel] = React.useState('');\n  /*\r\n  \t05. 24. 2024\r\n  \tUpdate this all so that 'confirmation' messages simply display message\r\n  \tset within action function. Remove need for 'message.message' \r\n  */\n\n  let returnPopUpType = message => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"popUpNotif\",\n      className: `${isActive.state == true ? 'active' : ''}\n\t\t\t\t\t\t\t\t\t\t\t ${isActive.state == false ? 'nonActive' : ''}}>\t\t\t\t\t\t\t\t\t\t`,\n      children: [message.type == 'tagging' && message.message == 'recieved' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [message.senderUsername, \" tagged you in a post \\\"\", message.postTitle, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1264,\n        columnNumber: 6\n      }, this), message.type == 'comment' && message.message == 'initial-recieved' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [socketMessage.senderUsername, \" left a comment on \\\"\", socketMessage.postTitle, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1267,\n        columnNumber: 6\n      }, this), message.type == 'comment' && message.message == 'response-recieved' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [socketMessage.senderUsername, \" responded to your comment on \\\"\", socketMessage.postTitle, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1270,\n        columnNumber: 6\n      }, this), message.type == 'request' && message.message == 'connectionRequestSent' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You sent @\", message.username, \" a connection request!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1273,\n        columnNumber: 6\n      }, this), message.type == 'request' && message.message == 'connectionRequestRecieved' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [message.senderUsername, \" sent a connection request\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1276,\n        columnNumber: 6\n      }, this), message.type == 'request' && message.message == 'initial' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [message.senderUsername, \" has sent a connection request!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1279,\n        columnNumber: 6\n      }, this), message.type == 'request' && message.message == 'connectionAcceptedRecieved' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You are connected with \", message.senderUsername, \" !\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1282,\n        columnNumber: 6\n      }, this), message.type == 'request' && message.message == 'connectionAcceptedSent' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You are connected with \", message.person, \" !\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1285,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'accepted' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are now connected !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1288,\n        columnNumber: 6\n      }, this), message.type == 'request' && message.message == 'subscriptionRequestRecieved' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"@\", message.senderUsername, \" requests subscription to you\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1291,\n        columnNumber: 6\n      }, this), message.type == 'request' && message.message == 'subscriptionRequestSent' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You sent @\", message.username, \" a subscription request\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1294,\n        columnNumber: 6\n      }, this), message.type == 'request' && message.message == 'subscriptionAccepted' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You are now subscribed to @\", message.senderUsername]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1297,\n        columnNumber: 6\n      }, this), message.type == 'request' && message.message == 'subscribed' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"@\", message.senderUsername, \" is now subscribed to you!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1303,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'subscriptionAccepted' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"@\", message.person, \" is now a subscriber!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1306,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'subscribed' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You've subscribed to \", message.recipientUsername]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1309,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'unsubscribed' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You've unsubscribed from \", message.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1312,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'request' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connection Request Sent !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1315,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'requestRecieved' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Subscription Request Sent !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1318,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'removal' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Disconnected from \", message.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1321,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'confirm_deletePost' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are about to delete this post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1324,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'confirm_deleteComment' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Are you sure you wish to delete this comment?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1327,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'deletedPost' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Post deleted!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1330,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'deletedComment' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Comment deleted!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1333,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'ignore' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Request Ignored\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1336,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'comment' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Comment Posted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1339,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'post' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Post Uploaded !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1342,\n        columnNumber: 6\n      }, this), message.type == 'draft' && message.message == 'post' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Post Drafted!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1345,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'tagAdd' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You've added \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\\"\", message.groupName, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1348,\n          columnNumber: 22\n        }, this), \" to your tags\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1348,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'newCollection' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"New collection \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\\"\", message.groupName, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1351,\n          columnNumber: 24\n        }, this), \" created \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1351,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'renamedCollection' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Collection has been renamed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1354,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'emptyBookmarks' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [message.groupName, \" have been emptied\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1357,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'deletedCollection' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You've deleted your collection \\\"\", message.groupName, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1360,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'privatizedCollection' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Collection is now \", message.isPrivate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1363,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'addToCollection' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Post added to \", message.groupName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1366,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'removedFromCollection' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Post removed from \", message.groupName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1369,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'removedAllFromCollection' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"All posts removed \", message.groupName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1372,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.message == 'tagDelete' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You've removed \", message.groupName, \" from your tags\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1375,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.label == 'profilePhoto' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1379,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.label == 'usernameUpdated' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1383,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.label == 'passwordUpdated' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1387,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.label == 'bioUpdated' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1391,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.label == 'privacyUpdated' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1395,\n        columnNumber: 6\n      }, this), message.type == 'confirmation' && message.label == 'usersPinned' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1399,\n        columnNumber: 6\n      }, this), message.type == 'error' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1403,\n        columnNumber: 6\n      }, this), message.type == 'simpleNotif' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1406,\n        columnNumber: 6\n      }, this), message.type == 'response' && message.message == 'alreadyExists' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"This \", message.groupType, \" already exists. Would you like to join?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1409,\n        columnNumber: 6\n      }, this), message.action == 'updateNotifs' && message.message && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1412,\n        columnNumber: 6\n      }, this), isActive.type == 3 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        id: \"options\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonDefault\",\n            onClick: () => {\n              setActive({\n                type: null,\n                state: false\n              });\n            },\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1419,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1419,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonDefault\",\n            onClick: () => {\n              if (message.message == 'connectionRequestRecieved') {\n                interact('accept', message);\n              } else if (message.message == 'subscriptionRequestRecieved') {\n                interact('subscriptionAccepted', message.data); // type: 'request',\n                // senderID: userID,\n                // senderUsername: username,\n                // recipients: [notif.sender],\n                // recipientUsername: notif.senderUsername,\n                // message: 'subscriptionAccepted'\n              }\n            },\n            children: \"Accept\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1420,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1420,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonDefault\",\n            onClick: () => {\n              interact('ignore');\n            },\n            children: \"Ignore\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1437,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1437,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1418,\n        columnNumber: 6\n      }, this), isActive.type == 2 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        id: \"options\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonDefault\",\n            onClick: () => {\n              setActive({\n                type: null,\n                state: false\n              });\n\n              if (accessID.notifID) {\n                interact('markRead');\n              }\n            },\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1443,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1443,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonDefault\",\n            onClick: () => {\n              setActive({\n                type: null,\n                state: false\n              });\n\n              if (accessID.postURL) {\n                interact('viewPost');\n                console.log(accessID.postID);\n              } else if (message.message == 'alreadyExists') {\n                interact('joinGroup');\n              }\n            },\n            children: \"Interact\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1449,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1449,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1442,\n        columnNumber: 6\n      }, this), isActive.type == 22 &&\n      /*#__PURE__*/\n      //for removing posts(?)\n      _jsxDEV(\"ul\", {\n        id: \"options\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonDefault\",\n            onClick: () => {\n              setActive({\n                type: null,\n                state: false\n              });\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1466,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1466,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonDefault\",\n            onClick: () => {\n              setActive({\n                type: null,\n                state: false\n              });\n\n              if (accessID.remove && socketMessage.message == 'confirm_deletePost') {\n                interact('remove');\n              } else if (accessID.remove && socketMessage.message == 'confirm_deleteComment') {\n                interact('deleteComment');\n              }\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1469,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1469,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1465,\n        columnNumber: 6\n      }, this), isActive.type == 1 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        id: \"options\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonDefault\",\n            onClick: () => {\n              setActive({\n                type: null,\n                state: false\n              });\n            },\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1483,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1483,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1482,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1260,\n      columnNumber: 4\n    }, this);\n  }; // console.log(accessID)\n  // console.log(socketMessage);\n\n\n  return returnPopUpType(socketMessage);\n}\n/***\r\n * Format for socketMessage object\r\n * \r\n * type: confirmation, request, comment, tagging\r\n * sender:\r\n * recipients:\r\n * message: \r\n */\n\n/**\r\n * For error alerts:\r\n * setSocketMessage({\r\n \ttype: 'error',\r\n \tmessage: 'exactly what needs to be communicated to user'\r\n * })\r\n */\n\n_s(Instants, \"9smHGpQ08VFJAOsTTKu6fwsv/ks=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Instants;\n\nvar _c;\n\n$RefreshReg$(_c, \"Instants\");","map":{"version":3,"names":["React","useState","useReducer","useEffect","useWebSocket","ReadyState","useNavigate","APIaccess","accessAPI","Instants","sendMessage","socketMessage","setSocketMessage","setActive","isActive","accessID","setAccessID","getUnreadCount","current","setCurrent","navigate","userID","sessionStorage","getItem","username","activity","makeNotif_sendInitialRequest","notif","newInteraction","then","data","confirmation","type","message","recipientUsername","state","originalID","JSON","stringify","console","log","person","_id","senderUsername","makeNotif_sendCommentNotif","respondeeId","pause","setTimeout","makeNotif_markNotifRead","request","makeNotif_taggedPost","action_NewTag","newGroup","alreadyExists","groupID","id","confirm","groupName","name","action_addTag","manageGroup","action_deleteTag","action_newCollection","action_renameCollection","action_deleteCollection","action_privatizeCollection","isPrivate","action_addToCollection","groupPosts","action","postID","postOwner","action_removeFromCollection","action_profilePhoto","body","FormData","append","content","userSettings_profilePhoto","label","updatedPhoto","setItem","action_usernameUpdate","newUsername","option","userSettings","action_changePassword","currentPassword","newPassword","action_updateBio","action_privacySetting","action_addToPinnedMedia","action_removeFromPinnedPosts","action_removeFromPinnedMedia","action_updateNotifs","interact","arg","notifi","recipients","accept","senderID","sm","notifID","delay","post","getBlogPost","postURL","commentID","scrollTo","deletePost","remove","deleteComment","includes","popUpNotif","useRef","level","setLevel","returnPopUpType","postTitle","groupType"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/src/components/notifs/instant.jsx"],"sourcesContent":["/* * * V I T A L S * * */\r\nimport React, { useState, useReducer, useEffect } from 'react';\r\nimport useWebSocket, {ReadyState} from 'react-use-websocket';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport APIaccess from '../../apiaccess';\r\nimport './notifs.css';\r\n\r\nconst accessAPI = APIaccess();\r\n\r\nexport default function Instants({\r\n\tsendMessage, \r\n\tsocketMessage, \r\n\tsetSocketMessage, \r\n\tsetActive, \r\n\tisActive, \r\n\taccessID, \r\n\tsetAccessID, \r\n\tgetUnreadCount,\r\n\tcurrent,\r\n\tsetCurrent\r\n}) {\r\n\r\n\tconst navigate = useNavigate();\r\n\tlet userID = sessionStorage.getItem('userID');\r\n\tlet username = sessionStorage.getItem('userName');\r\n\tlet activity = isActive;\r\n\r\n\t/***\r\n\t * 12. 20. 2023\r\n\t * \r\n\t * All <manage* > component api functions to be processed through <instant>\r\n\t * as to streamline UX of user making decisions\r\n\t * \r\n\t */\r\n\r\n\t/*** \r\n\t\tFunctions to be used by primary useEffect \r\n\t***/\r\n\tlet makeNotif_sendInitialRequest = async (notif) => {\r\n\t\tawait accessAPI.newInteraction(notif).then((data) => {\r\n\r\n\t\t\tif(data.confirmation == false) {\r\n\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\ttype: 'simpleNotif',\r\n\t\t\t\t\tmessage: `You have already sent @${notif.recipientUsername} this kind of request`\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse if(data.message == 'connectionRequestSent') {\r\n\r\n\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\ttype: 'request',\r\n\t\t\t\t\tmessage: 'connectionRequestSent',\r\n\t\t\t\t\tusername: notif.recipientUsername\r\n\t\t\t\t})\r\n\t\t\t\tsetActive({\r\n\t\t\t\t\tstate: true,\r\n\t\t\t\t\ttype: 1\r\n\t\t\t\t})\r\n\r\n\t\t\t\tnotif.message = 'connectionRequestRecieved';\r\n\t\t\t\tnotif.originalID = data.originalID; //for reciever to mark read within popUp\r\n\r\n\t\t\t\tsendMessage(JSON.stringify(notif));\r\n\t\t\t}\r\n\t\t\telse if(data.message == 'connectionAcceptedSent') { //confirm: true, message: request\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\ttype: 'request',\r\n\t\t\t\t\tmessage: data.message,\r\n\t\t\t\t\tperson: notif.recipientUsername\r\n\t\t\t\t})\r\n\t\t\t\tsetActive({\r\n\t\t\t\t\tstate: true,\r\n\t\t\t\t\ttype: 1\r\n\t\t\t\t})\r\n\t\t\t\tnotif.message = 'connectionAcceptedRecieved'\r\n\t\t\t\tnotif.originalID = data._id;\r\n\r\n\t\t\t\tsendMessage(JSON.stringify(notif));\r\n\t\t\t}\r\n\t\t\telse if(data.message == 'subscribed') {\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\ttype: 'confirmation',\r\n\t\t\t\t\tmessage: data.message,\r\n\t\t\t\t\trecipientUsername: data.recipientUsername\r\n\t\t\t\t})\r\n\t\t\t\tsetActive({\r\n\t\t\t\t\tstate: true,\r\n\t\t\t\t\ttype: 1\r\n\t\t\t\t})\r\n\t\t\t\tnotif.originalID = data._id;\r\n\t\t\t\t\r\n\t\t\t\tsendMessage(JSON.stringify(notif));\r\n\t\t\t}\r\n\t\t\telse if(data.message == 'subscriptionRequestSent') {\r\n\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t\tconsole.log(notif);\r\n\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\ttype: 'request',\r\n\t\t\t\t\tmessage: 'subscriptionRequestSent',\r\n\t\t\t\t\tusername: notif.recipientUsername\r\n\t\t\t\t})\r\n\t\t\t\tsetActive({\r\n\t\t\t\t\tstate: true,\r\n\t\t\t\t\ttype: 1\r\n\t\t\t\t})\r\n\t\t\t\tnotif.originalID = data._id; //for the reciever to mark their notif read\r\n\t\t\t\tnotif.message = 'subscriptionRequestRecieved';\r\n\r\n\t\t\t\tsendMessage(JSON.stringify(notif));\r\n\t\t\t}\r\n\t\t\telse if(data.message == 'subscriptionAccepted') {\r\n\r\n\t\t\t\tconsole.log(socketMessage);\r\n\t\t\t\tconsole.log(notif)\r\n\r\n\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\ttype: 'confirmation',\r\n\t\t\t\t\tmessage: 'subscriptionAccepted',\r\n\t\t\t\t\tperson: notif.recipientUsername\r\n\t\t\t\t})\r\n\t\t\t\tsetActive({\r\n\t\t\t\t\tstate: true,\r\n\t\t\t\t\ttype: 1\r\n\t\t\t\t})\r\n\r\n\t\t\t\tnotif.originalID = data._id;\r\n\t\t\t\tnotif.senderUsername = username;\r\n\t\t\t\tsendMessage(JSON.stringify(notif));\r\n\t\t\t\t// body = {\r\n\t\t\t\t\t// \ttype: 'request',\r\n\t\t\t\t\t// \tsenderID: userID,\r\n\t\t\t\t\t// \tsenderUsername: username,\r\n\t\t\t\t\t// \trecipients: [notif.sender],\r\n\t\t\t\t\t// \trecipientUsername: notif.senderUsername,\r\n\t\t\t\t\t// \tmessage: 'subscriptionAccepted'\r\n\t\t\t\t\t// }\r\n\t\t\t}\r\n\t\t\t// else if(data.message == 'requestRecieved') {\r\n\t\t\t\t// \tconsole.log(data);\r\n\t\t\t\t// \tsetSocketMessage({\r\n\t\t\t\t// \t\ttype: 'confirmation',\r\n\t\t\t\t// \t\tmessage: data.message\r\n\t\t\t\t// \t})\r\n\t\t\t\t// \tsetActive({\r\n\t\t\t\t// \t\tstate: true,\r\n\t\t\t\t// \t\ttype: 1\r\n\t\t\t\t// \t})\r\n\t\t\t\t// \tnotif.originalID = data._id;\r\n\t\t\t\t// }\r\n\t\t})\r\n\t}\r\n\r\n\t//for connection and subscription requests\r\n\t// let makeNotif_sendAcceptRequest = async (notif) => {\r\n\r\n\t// \tawait accessAPI.newInteraction(notif).then((data) => {\r\n\t// \t\tif(data.confirmation == false) {\r\n\t// \t\t\tsetSocketMessage({\r\n\t// \t\t\t\ttype: 'simpleNotif',\r\n\t// \t\t\t\tmessage: `You and ${notif.senderUsername} are already connected`\r\n\t// \t\t\t})\r\n\t// \t\t}\r\n\r\n\t// \t\tif(data.message == 'subscriptionAccepted') {\r\n\r\n\t// \t\t\tsetSocketMessage({\r\n\t// \t\t\t\ttype: 'confirmation',\r\n\t// \t\t\t\tmessage: 'subscriptionAccepted',\r\n\t// \t\t\t\tperson: data.recipientUsername\r\n\t// \t\t\t})\r\n\t// \t\t\tsetActive({\r\n\t// \t\t\t\tstate: true,\r\n\t// \t\t\t\ttype: 1\r\n\t// \t\t\t})\r\n\r\n\t// \t\t\tnotif.originalID = data._id;\r\n\t// \t\t\tsendMessage(JSON.stringify(notif));\r\n\t// \t\t\t// body = {\r\n\t// \t\t\t// \ttype: 'request',\r\n\t// \t\t\t// \tsenderID: userID,\r\n\t// \t\t\t// \tsenderUsername: username,\r\n\t// \t\t\t// \trecipients: [notif.sender],\r\n\t// \t\t\t// \trecipientUsername: notif.senderUsername,\r\n\t// \t\t\t// \tmessage: 'subscriptionAccepted'\r\n\t// \t\t\t// }\r\n\t// \t\t}\r\n\r\n\t// \t\t// else if (data.message == 'accepted') {\r\n\r\n\t// \t\t// \tsendMessage(JSON.stringify(notif));\r\n\r\n\t// \t\t// \tsetSocketMessage({\r\n\t// \t\t// \t\ttype: 'confirmation',\r\n\t// \t\t// \t\tmessage: 'subscribed',\r\n\t// \t\t// \t\tperson: notif.senderUsername\r\n\t// \t\t// \t})\r\n\t// \t\t// \tsetActive({\r\n\t// \t\t// \t\tstate: true,\r\n\t// \t\t// \t\ttype: 1\r\n\t// \t\t// \t})\r\n\t// \t\t// }\r\n\t// \t})\r\n\t// }\r\n\r\n\t//for automatic subscription\r\n\t// let makeNotif_subscribed = async (notif) => {\r\n\r\n\t// \tawait accessAPI.newInteraction(notif).then((data) => {\r\n\t// \t\tif(data.confirmation == false) {\r\n\t// \t\t\tsetSocketMessage({\r\n\t// \t\t\t\ttype: 'simpleNotif',\r\n\t// \t\t\t\tmessage: `You are already subscribed to ${notif.senderUsername}`\r\n\t// \t\t\t})\r\n\t// \t\t}\r\n\r\n\t// \t\tif(data.confirm == true) {\r\n\r\n\t// \t\t\tsendMessage(JSON.stringify(notif));\r\n\r\n\t// \t\t\tsetSocketMessage({\r\n\t// \t\t\t\ttype: 'confirmation',\r\n\t// \t\t\t\tmessage: 'subscribed'\r\n\t// \t\t\t})\r\n\t// \t\t\tsetActive({\r\n\t// \t\t\t\tstate: true,\r\n\t// \t\t\t\ttype: 1\r\n\t// \t\t\t})\r\n\t// \t\t}\r\n\t// \t})\r\n\t// }\r\n\r\n\tlet makeNotif_sendCommentNotif = async (notif) => {\r\n\r\n\t\tif(socketMessage.message == 'response' && userID == socketMessage.respondeeId) {\r\n\r\n\t\t\tconsole.log('true');\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'comment'\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tawait accessAPI.newInteraction(notif).then((data)=> {\r\n\t\t\tif(data) {\r\n\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\ttype: 'confirmation',\r\n\t\t\t\t\tmessage: 'comment'\r\n\t\t\t\t})\r\n\t\t\t\tsetActive({\r\n\t\t\t\t\tstate: true,\r\n\t\t\t\t\ttype: 1\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tnotif._id = data;\r\n\t\t})\r\n\r\n\t\tlet pause = setTimeout(()=> {\r\n\t\t\tsendMessage(JSON.stringify(notif));\r\n\t\t}, 1000)\r\n\t}\r\n\r\n\tlet makeNotif_markNotifRead = async(notif) => {\r\n\t\tconsole.log(notif);\r\n\t\tlet request = await accessAPI.newInteraction(notif);\r\n\r\n\t\tif(request) {\r\n\t\t\tconsole.log('something')\r\n\t\t\tgetUnreadCount();\r\n\r\n\t\t\tsetActive({\r\n\t\t\t\ttype: null, \r\n\t\t\t\tstate: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet makeNotif_taggedPost = async(notif) => {\r\n\t\tlet request = await accessAPI.newInteraction(notif).then((data) => {\r\n\t\t\tif(data) {\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\ttype: 'confirmation',\r\n\t\t\t\t\tmessage: 'post'\r\n\t\t\t\t})\r\n\t\t\t\tsetActive({\r\n\t\t\t\t\tstate: true,\r\n\t\t\t\t\ttype: 1\r\n\t\t\t\t})\r\n\t\t\t\tnotif._id = data;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet pause = setTimeout(()=> {\r\n\t\t\tsendMessage(JSON.stringify(notif));\r\n\t\t}, 1000)\t\r\n\t}\r\n\r\n\tlet action_NewTag = async(data) => {\r\n\r\n\t\tconsole.log(data);\r\n\t\tlet request = await accessAPI.newGroup(data);\r\n\r\n\t\t\tif(request.alreadyExists) {\r\n\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\ttype: 'response',\r\n\t\t\t\t\tmessage: 'alreadyExists',\r\n\t\t\t\t\tgroupID: request.id\r\n\t\t\t\t})\r\n\t\t\t\tsetActive({\r\n\t\t\t\t\tstate: true,\r\n\t\t\t\t\ttype: 2\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse if (request.confirm) {\r\n\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\ttype: 'confirmation',\r\n\t\t\t\t\tmessage: 'tagAdd',\r\n\t\t\t\t\tgroupName: request.name\r\n\t\t\t\t})\r\n\t\t\t\tsetActive({\r\n\t\t\t\t\tstate: true,\r\n\t\t\t\t\ttype: 1\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t}\r\n\r\n\tlet action_addTag = async(data) => {\r\n\r\n\t\tlet request = await accessAPI.manageGroup('addUser', data);\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'tagAdd',\r\n\t\t\t\tgroupName: request.groupName\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_deleteTag = async(data) => {\r\n\r\n\t\tlet request = await accessAPI.manageGroup('deleteGroup', data);\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'tagDelete',\r\n\t\t\t\tgroupName: request.groupName\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_newCollection = async(data) => {\r\n\t\tlet request = await accessAPI.newGroup(data);\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'newCollection',\r\n\t\t\t\tgroupName: request.name\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.alreadyExists) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.alreadyExists\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_renameCollection = async(data) => {\r\n\t\tlet request = await accessAPI.manageGroup('renameGroup', data);\r\n\r\n\t\tif(request == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'renamedCollection',\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_deleteCollection = async(data) => {\r\n\r\n\t\tlet request = await accessAPI.manageGroup('deleteGroup', data);\r\n\r\n\t\tif(request.groupName === 'BOOKMARKS') {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'emptyBookmarks',\r\n\t\t\t\tgroupName: request.groupName\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'deletedCollection',\r\n\t\t\t\tgroupName: request.groupName\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_privatizeCollection = async(data) => {\r\n\t\tlet request = await accessAPI.manageGroup('privatizeGroup', data);\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'privatizedCollection',\r\n\t\t\t\tisPrivate: request.isPrivate\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_addToCollection = async(data) => {\r\n\t\tlet request = await accessAPI.groupPosts({\r\n\t\t\taction: 'addPost', \r\n\t\t\tgroupID: data.groupID, \r\n\t\t\tpostID: data.postID,\r\n\t\t\tpostOwner: data.postOwner\r\n\t\t});\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'addToCollection',\r\n\t\t\t\tgroupName: request.groupName\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_removeFromCollection = async(data) => {\r\n\t\tconsole.log(data)\r\n\t\tlet request = await accessAPI.groupPosts({\r\n\t\t\taction: 'removePost', \r\n\t\t\tgroupID: data.groupID, \r\n\t\t\tpostID: data.postID\r\n\t\t});\r\n\r\n\t\t\r\n\r\n\t\tif(request.confirmation == true && data.action == 'removeAllFromCollection') {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'removedAllFromCollection',\r\n\t\t\t\tgroupName: request.groupName\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'removedFromCollection',\r\n\t\t\t\tgroupName: request.groupName\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_profilePhoto = async(data) => {\r\n\r\n\t\tlet body = new FormData();\r\n\t\t\tbody.append('option', 'profilePhoto');\r\n\t\t\tbody.append('photo', data.content)\r\n\t\t// console.log(data.content)\r\n\t\tconsole.log(body)\r\n\r\n\t\tlet request = await accessAPI.userSettings_profilePhoto(body);\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tlabel: 'profilePhoto',\r\n\t\t\t\tmessage: request.message,\r\n\t\t\t\tupdatedPhoto: request.updatedPhoto\t\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\r\n\t\t\tsessionStorage.setItem('profilePhoto', )\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_usernameUpdate = async(data) => {\r\n\r\n\t\tlet body = {\r\n\t\t\tnewUsername: data.newUsername,\r\n\t\t\toption: 'username'\r\n\t\t};\r\n\r\n\t\tlet request = await accessAPI.userSettings(body);\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tlabel: 'usernameUpdated',\r\n\t\t\t\tmessage: request.message\t\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\r\n\t\t\tsessionStorage.setItem('userName', data.newUsername);\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_changePassword = async(data) => {\r\n\t\tlet body = {\r\n\t\t\toption: 'changePassword',\r\n\t\t\tcurrentPassword: data.currentPassword,\r\n\t\t\tnewPassword: data.newPassword\r\n\t\t};\r\n\r\n\t\tlet request = await accessAPI.userSettings(body);\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tlabel: 'passwordUpdated',\r\n\t\t\t\tmessage: \"Password successfully updated\"\t\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_updateBio = async(data) => {\r\n\r\n\t\tlet request = await accessAPI.userSettings(data);\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tlabel: 'bioUpdated',\r\n\t\t\t\tmessage: \"Biography updated!\"\t\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_privacySetting = async(data) => {\r\n\r\n\t\tlet request = await accessAPI.userSettings(data);\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tlabel: 'privacyUpdated',\r\n\t\t\t\tmessage: `Privacy setting is now ${data.state}` \t\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_addToPinnedMedia = async(data) => {\r\n\t\tlet request = await accessAPI.userSettings({\r\n\t\t\toption: 'pinnedMedia',\r\n\t\t\ttype: 'add',\r\n\t\t\tcontent: data.content\r\n\t\t});\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tlabel: 'usersPinned',\r\n\t\t\t\tmessage: `Content added to Pinned Media`\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_removeFromPinnedPosts = async(data) => {\r\n\t\t\r\n\t\tlet request = await accessAPI.userSettings({\r\n\t\t\toption: 'pinnedPosts',\r\n\t\t\ttype: 'remove',\r\n\t\t\tcontent: data.content\r\n\t\t});\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tlabel: 'usersPinned',\r\n\t\t\t\tmessage: `Content removed from Pinned Media`\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_removeFromPinnedMedia = async(data) => {\r\n\r\n\t\tlet request = await accessAPI.userSettings({\r\n\t\t\toption: 'pinnedMedia',\r\n\t\t\ttype: 'remove',\r\n\t\t\tcontent: data.content\r\n\t\t});\r\n\r\n\t\tif(request.confirmation == true) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tlabel: 'usersPinned',\r\n\t\t\t\tmessage: `Content removed from Pinned Media`\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(request.message) {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tmessage: request.message\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlet action_updateNotifs = async(data) => {\r\n\t\tsendMessage(JSON.stringify(data));\r\n\t}\r\n\r\n\r\n\t/*** \r\n\t\tResponse functions to alerts recieved by user\r\n\t***/\r\n\tlet interact = async(arg, notif) => {\r\n\r\n\t\t/* Sets socketMessage to accept connection request */\r\n\t\tif(arg == 'accept') {\r\n\r\n\t\t\tlet notifi = {\r\n\t\t\t\ttype: 'request',\r\n\t\t\t\trecipients: [accessID.accept],\r\n\t\t\t\trecipientUsername: notif.senderUsername,\r\n\t\t\t\tsenderID: userID,\r\n\t\t\t\tsenderUsername: username,\r\n\t\t\t\tmessage: 'connectionAcceptedSent'\r\n\t\t\t};\r\n\r\n\t\t\tsetSocketMessage(notifi);\r\n\t\t\tsetActive({\r\n\t\t\t\ttype: null,\r\n\t\t\t\tstate: false\r\n\t\t\t})\r\n\t\t\tconsole.log(accessID);\r\n\t\t\tconsole.log(notifi);\r\n\r\n\t\t\t// if(notif.message == 'subscriptionRequested') {\r\n\r\n\t\t\t// \t//should be the same as a regular automatic subscription\r\n\t\t\t// \tlet body = {\r\n\t\t\t// \t\ttype: 'request',\r\n\t\t\t// \t\tsenderID: userID,\r\n\t\t\t// \t\tsenderUsername: username,\r\n\t\t\t// \t\trecipients: [notif.sender],\r\n\t\t\t// \t\trecipientUsername: notif.senderUsername,\r\n\t\t\t// \t\tmessage: 'subscriptionAccepted'\r\n\t\t\t// \t}\r\n\t\t\t// \tsetSocketMessage(body);\r\n\t\t\t// }\r\n\r\n\t\t\t// if(notif.message == 'initial') {//simply notifies requester of connection acceptance\t\r\n\t\t\t\t\r\n\t\t\t// }\r\n\t\t}\r\n\r\n\t\telse if(arg == 'subscriptionAccepted') {\r\n\t\t\tlet body = {\r\n\t\t\t\ttype: 'request',\r\n\t\t\t\tsenderID: userID,\r\n\t\t\t\tsenderUsername: username,\r\n\t\t\t\trecipients: [notif.senderID],\r\n\t\t\t\trecipientUsername: notif.senderUsername,\r\n\t\t\t\t// message: 'subscriptionAccepted'\r\n\t\t\t\tmessage: 'subscriptionAccepted'\r\n\t\t\t}\r\n\r\n\t\t\tlet sm = {\r\n\t\t\t\t\ttype: 'markRead',\r\n\t\t\t\t\tnotifID: notif._id,\r\n\t\t\t\t\tuserID: userID,\r\n\t\t\t\t\tsenderUsername: username\r\n\t\t\t\t};\r\n\t\t\tlet request = await accessAPI.newInteraction(sm)\r\n\r\n\t\t\tsetActive({type: null, state: false})\r\n\r\n\t\t\tlet delay = setTimeout(()=> {\r\n\t\t\t\tsetSocketMessage(body);\t\r\n\t\t\t}, 400)\r\n\t\t\t\r\n\t\t\tconsole.log(body);\r\n\t\t}\r\n\r\n\t\telse if(arg == 'ignore') {\r\n\t\t\tlet notif = {\r\n\t\t\t\ttype: 'markRead',\r\n\t\t\t\tnotifID: accessID.notifID,\r\n\t\t\t\tuserID: userID,\r\n\t\t\t};\r\n\t\t\tmakeNotif_markNotifRead(notif);\r\n\r\n\t\t} \r\n\r\n\t\telse if(arg == 'markRead') {\r\n\r\n\t\t\tlet notif = {\r\n\t\t\t\ttype: 'markRead',\r\n\t\t\t\tnotifID: accessID.notifID,\r\n\t\t\t\tuserID: userID,\r\n\t\t\t};\r\n\t\t\tmakeNotif_markNotifRead(notif);\r\n\t\t} \r\n\r\n\t\telse if(arg == 'viewPost') {\r\n\r\n\t\t\tlet post = await accessAPI.getBlogPost(accessID.postURL);\r\n\t\t\tsetAccessID({\r\n\t\t\t\tcommentID: accessID.commentID\r\n\t\t\t})\r\n\t\t\tsetTimeout(()=> {\r\n\t\t\t\tnavigate(`/post/${accessID.postURL}`, {\r\n\t\t\t\t\t\tstate: {post: post}\r\n\t\t\t\t\t})\r\n\t\t\t}, 300)\r\n\t\t} \r\n\r\n\t\telse if (arg == 'remove') {\r\n\r\n\t\t\tif(socketMessage.message == 'confirm_deletePost') {\r\n\r\n\t\t\t\tsetCurrent({\r\n\t\t\t\t\t...current,\r\n\t\t\t\t\tscrollTo: null\r\n\t\t\t\t})\r\n\r\n\t\t\t\tnavigate(`/home`);\r\n\r\n\t\t\t\tlet request = await accessAPI.deletePost(accessID.remove).then((data)=> {\r\n\t\t\t\t\tif(data) {\r\n\t\t\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\t\t\ttype: 'confirmation',\r\n\t\t\t\t\t\t\tmessage: 'deletedPost'\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\tsetActive({\r\n\t\t\t\t\t\t\tstate: true,\r\n\t\t\t\t\t\t\ttype: 1\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t} else if(socketMessage.message == 'confirm_deleteComment') {\r\n\r\n\t\t\t} //remove post\r\n\t\t}\r\n\r\n\t\telse if (arg == 'deleteComment') {\r\n\r\n\t\t\tlet request = await accessAPI.deleteComment(accessID.remove).then((data)=> {\r\n\t\t\t\t\tif(data.confirm) {\r\n\t\t\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\t\t\ttype: 'confirmation',\r\n\t\t\t\t\t\t\tmessage: 'deletedComment'\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\tsetActive({\r\n\t\t\t\t\t\t\tstate: true,\r\n\t\t\t\t\t\t\ttype: 1\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t}\r\n\r\n\t\telse if(arg == 'joinGroup') {\r\n\t\t\tsetActive({\r\n\t\t\t\ttype: null,\r\n\t\t\t\tstate: false\r\n\t\t\t})\r\n\r\n\t\t\tlet data = {\r\n\t\t\t\tgroupID: socketMessage.groupID,\r\n\t\t\t\tuserID: userID\r\n\t\t\t}\r\n\r\n\t\t\tlet request = await accessAPI.manageGroup('addUser', data).then((data)=> {\r\n\t\t\t\tif(data.message == 'noAccess') {\r\n\t\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\t\ttype: 'error',\r\n\t\t\t\t\t\tmessage: `This ${data.type} is private`,\r\n\t\t\t\t\t\tgroupID: data.id\r\n\t\t\t\t\t})\r\n\t\t\t\t\tsetActive({\r\n\t\t\t\t\t\tstate: true,\r\n\t\t\t\t\t\ttype: 1\r\n\t\t\t\t\t})\r\n\t\t\t\t} else if(data.confirm == true) {\r\n\t\t\t\t\tsetSocketMessage({\r\n\t\t\t\t\t\ttype: 'confirmation',\r\n\t\t\t\t\t\tmessage: 'group',\r\n\t\t\t\t\t\tgroupName: data.name\r\n\t\t\t\t\t})\r\n\t\t\t\t\tsetActive({\r\n\t\t\t\t\t\tstate: true,\r\n\t\t\t\t\t\ttype: 1\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Primary useEffect\r\n\t * Upon change of 'socketMessage'\r\n\t * execute a make or action function with socketMessage\r\n\t * \r\n\t * 12. 31. 2023\r\n\t * could probably use switch n case here...\r\n\t */\r\n\tuseEffect(()=> {\r\n\r\n\t\t/* U S E R   S E T T I N G S */\r\n\t\tif(socketMessage.action == 'updateNotifs') {\r\n\t\t\taction_updateNotifs(socketMessage);\r\n\t\t\tif(socketMessage.message) {\r\n\t\t\t\tsetActive({\r\n\t\t\t\t\tstate: true,\r\n\t\t\t\t\ttype: 1\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(socketMessage.action == 'profilePhoto') {\r\n\t\t\taction_profilePhoto(socketMessage);\r\n\t\t}\r\n\r\n\t\telse if(socketMessage.action == 'usernameUpdate') {\r\n\t\t\taction_usernameUpdate(socketMessage);\r\n\t\t}\r\n\r\n\t\telse if(socketMessage.action == 'changePassword') {\r\n\t\t\taction_changePassword(socketMessage)\r\n\t\t}\r\n\r\n\t\telse if(socketMessage.action == 'bioUpdate') {\r\n\t\t\taction_updateBio(socketMessage)\r\n\t\t}\r\n\r\n\t\telse if(socketMessage.action == 'privacy') {\r\n\t\t\taction_privacySetting(socketMessage)\r\n\t\t}\r\n\t\telse if(socketMessage.action == 'addToPinnedMedia') {\r\n\t\t\taction_addToPinnedMedia(socketMessage)\r\n\t\t}\r\n\t\telse if(socketMessage.action == 'removeFromPinnedMedia' || socketMessage.action == 'removeAllFromPinnedMedia') {\r\n\t\t\taction_removeFromPinnedMedia(socketMessage)\r\n\t\t}\r\n\t\telse if(socketMessage.action == 'removeFromPinnedPosts' || socketMessage.action == 'removeAllFromPinnedPosts') {\r\n\t\t\taction_removeFromPinnedPosts(socketMessage)\r\n\t\t}\r\n\r\n\r\n\t\t/* P O S T  O P T I O N S */\r\n\t\telse if(socketMessage.action == 'deletePost') {\r\n\t\t\tsetAccessID({\r\n\t\t\t\tremove: socketMessage.postID\r\n\t\t\t})\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'confirm_deletePost'\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 22\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\telse if(socketMessage.action == 'deleteComment') {\r\n\t\t\tsetAccessID({\r\n\t\t\t\tremove: socketMessage.commentID\r\n\t\t\t})\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'confirm_deleteComment'\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 22\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t\t/* M A N A G E  M A C R O S  F U N C T I O N S */\r\n\t\telse if(socketMessage.action == 'newTag') {\r\n\t\t\taction_NewTag(socketMessage);\r\n\t\t}\r\n\t\telse if(socketMessage.action == 'addTag') {\r\n\t\t\taction_addTag(socketMessage);\r\n\t\t}\r\n\t\telse if(socketMessage.action == 'deleteTag') {\r\n\t\t\taction_deleteTag(socketMessage)\r\n\t\t}\r\n\t\t\r\n\t\telse if(socketMessage.action == 'newCollection') {\r\n\t\t\taction_newCollection(socketMessage);\r\n\t\t}\r\n\t\telse if(socketMessage.action == 'renameCollection') {\r\n\t\t\taction_renameCollection(socketMessage);\r\n\t\t}\r\n\t\telse if(socketMessage.action == 'privatizeCollection') {\r\n\t\t\taction_privatizeCollection(socketMessage);\r\n\t\t}\r\n\t\telse if(socketMessage.action == 'deleteCollection') {\r\n\t\t\tconsole.log('recieved');\r\n\t\t\taction_deleteCollection(socketMessage);\r\n\t\t}\r\n\t\telse if(socketMessage.action == 'addToCollection') {\r\n\t\t\taction_addToCollection(socketMessage);\r\n\t\t}\r\n\t\telse if(socketMessage.action == 'removeFromCollection') {\r\n\t\t\taction_removeFromCollection(socketMessage);\r\n\t\t}\r\n\t\telse if(socketMessage.action == 'removeAllFromCollection') {\r\n\t\t\taction_removeFromCollection(socketMessage);\r\n\t\t}\r\n\r\n\r\n\t\t/*\r\n\t\t\tI N T E R A C T I O N S \r\n\t\t*/\r\n\t\telse if (socketMessage.type == 'request' && socketMessage.message == 'connectionRequestSent') {\r\n\t\t\tif(!socketMessage.recipients) {\r\n\t\t\t\treturn\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(socketMessage);\r\n\t\t\t\tmakeNotif_sendInitialRequest(socketMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(socketMessage.type == 'request' && socketMessage.message == 'connectionAcceptedSent') {\r\n\t\t\t// makeNotif_sendAcceptRequest(socketMessage);\r\n\t\t\tmakeNotif_sendInitialRequest(socketMessage);\r\n\t\t}\r\n\t\telse if(socketMessage.type == 'request' && socketMessage.message == 'subscribed') {\r\n\t\t\t// makeNotif_subscribed(socketMessage);\r\n\t\t\tmakeNotif_sendInitialRequest(socketMessage);\r\n\t\t}\r\n\t\telse if (socketMessage.type == 'request' && socketMessage.message.includes('sub')) {\r\n\t\t\tif(!socketMessage.recipients) {\r\n\t\t\t\treturn\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(socketMessage);\r\n\t\t\t\tmakeNotif_sendInitialRequest(socketMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(socketMessage.type == 'comment') {\r\n\r\n\t\t\tif(socketMessage.message == 'initial' || socketMessage.message == 'response') {\r\n\t\t\t\tmakeNotif_sendCommentNotif(socketMessage);\r\n\t\t\t} else {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(socketMessage.type == 'tagging') {\r\n\r\n\t\t\tif(socketMessage.message == 'sent') {\r\n\t\t\t\tmakeNotif_taggedPost(socketMessage);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\telse if(socketMessage.confirm === 'postRemoval') {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'removal'\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if (socketMessage.confirm === 'postUpload') {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'confirmation',\r\n\t\t\t\tmessage: 'post'\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if (socketMessage.confirm === 'postDrafted') {\r\n\t\t\tsetSocketMessage({\r\n\t\t\t\ttype: 'draft',\r\n\t\t\t\tmessage: 'post'\r\n\t\t\t})\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if(socketMessage.type == 'markRead') {\r\n\t\t\tmakeNotif_markNotifRead(socketMessage);\r\n\t\t}\r\n\t\telse if(socketMessage.type == 'error') { //set socketMessage.message wherever useing this call\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if(socketMessage.type == 'simpleNotif') { //set socketMessage.message wherever useing this call\r\n\t\t\tsetActive({\r\n\t\t\t\tstate: true,\r\n\t\t\t\ttype: 1\r\n\t\t\t});\r\n\t\t}\r\n\t}, [socketMessage]);\r\n\r\n\t\r\n\tconst popUpNotif = React.useRef();\r\n\r\n\t/**\r\n\t * Returns specific popUp notification type based on\r\n\t * message recieved from webSocket\r\n\t * \r\n\t * level indicates significance of alert:\r\n\t *    blue --- post / comment / updateSetting / cancel \r\n\t * \t  green --- acceptRequest / acceptInvite / tagging \r\n\t * \t  orange --- ignore / flag / confirmRemoval \r\n\t *    magenta --- error\r\n\t * \t\r\n\t */\r\n\tlet [level, setLevel] = React.useState('')\r\n\r\n\t/*\r\n\t\t05. 24. 2024\r\n\t\tUpdate this all so that 'confirmation' messages simply display message\r\n\t\tset within action function. Remove need for 'message.message' \r\n\t*/\r\n\r\n\tlet returnPopUpType = (message) => {\r\n\r\n\t\treturn (\r\n\t\t\t<div id=\"popUpNotif\" className={`${isActive.state == true ? 'active' : ''}\r\n\t\t\t\t\t\t\t\t\t\t\t ${isActive.state == false ? 'nonActive' : ''}}>\t\t\t\t\t\t\t\t\t\t`}>\r\n\r\n\t\t\t\t{(message.type == 'tagging' && message.message == 'recieved') &&\r\n\t\t\t\t\t<p>{message.senderUsername} tagged you in a post \"{message.postTitle}\"</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'comment' && message.message == 'initial-recieved') &&\r\n\t\t\t\t\t<p>{socketMessage.senderUsername} left a comment on \"{socketMessage.postTitle}\"</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'comment' && message.message == 'response-recieved') &&\r\n\t\t\t\t\t<p>{socketMessage.senderUsername} responded to your comment on \"{socketMessage.postTitle}\"</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'request' && message.message == 'connectionRequestSent') &&\r\n\t\t\t\t\t<p>You sent @{message.username} a connection request!</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'request' && message.message == 'connectionRequestRecieved') &&\r\n\t\t\t\t\t<p>{message.senderUsername} sent a connection request</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'request' && message.message == 'initial') &&\r\n\t\t\t\t\t<p>{message.senderUsername} has sent a connection request!</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'request' && message.message == 'connectionAcceptedRecieved') &&\r\n\t\t\t\t\t<p>You are connected with {message.senderUsername} !</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'request' && message.message == 'connectionAcceptedSent') &&\r\n\t\t\t\t\t<p>You are connected with {message.person} !</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'accepted') &&\r\n\t\t\t\t\t<p>You are now connected !</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'request' && message.message == 'subscriptionRequestRecieved') &&\r\n\t\t\t\t\t<p>@{message.senderUsername} requests subscription to you</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'request' && message.message == 'subscriptionRequestSent') &&\r\n\t\t\t\t\t<p>You sent @{message.username} a subscription request</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'request' && message.message == 'subscriptionAccepted') &&\r\n\t\t\t\t\t<p>You are now subscribed to @{message.senderUsername}</p>\r\n\t\t\t\t}\r\n\t\t\t\t{/*{(message.type == 'request' && message.message == 'subscriptionAccept') &&\r\n\t\t\t\t\t<p>You are now subscribed to @{message.senderUsername}</p>\r\n\t\t\t\t}*/}\r\n\t\t\t\t{(message.type == 'request' && message.message == 'subscribed') &&\r\n\t\t\t\t\t<p>@{message.senderUsername} is now subscribed to you!</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'subscriptionAccepted') &&\r\n\t\t\t\t\t<p>@{message.person} is now a subscriber!</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'subscribed') &&\r\n\t\t\t\t\t<p>You've subscribed to {message.recipientUsername}</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'unsubscribed') &&\r\n\t\t\t\t\t<p>You've unsubscribed from {message.username}</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'request') &&\r\n\t\t\t\t\t<p>Connection Request Sent !</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'requestRecieved') &&\r\n\t\t\t\t\t<p>Subscription Request Sent !</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'removal') &&\r\n\t\t\t\t\t<p>Disconnected from {message.username}</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'confirm_deletePost') &&\r\n\t\t\t\t\t<p>You are about to delete this post</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'confirm_deleteComment') &&\r\n\t\t\t\t\t<p>Are you sure you wish to delete this comment?</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'deletedPost') &&\r\n\t\t\t\t\t<p>Post deleted!</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'deletedComment') &&\r\n\t\t\t\t\t<p>Comment deleted!</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'ignore') &&\r\n\t\t\t\t\t<p>Request Ignored</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'comment') &&\r\n\t\t\t\t\t<p>Comment Posted</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'post') &&\r\n\t\t\t\t\t<p>Post Uploaded !</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'draft' && message.message == 'post') &&\r\n\t\t\t\t\t<p>Post Drafted!</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'tagAdd') &&\r\n\t\t\t\t\t<p>You've added <span>\"{message.groupName}\"</span> to your tags</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'newCollection') &&\r\n\t\t\t\t\t<p>New collection <span>\"{message.groupName}\"</span> created </p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'renamedCollection') &&\r\n\t\t\t\t\t<p>Collection has been renamed</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'emptyBookmarks') &&\r\n\t\t\t\t\t<p>{message.groupName} have been emptied</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'deletedCollection') &&\r\n\t\t\t\t\t<p>You've deleted your collection \"{message.groupName}\"</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'privatizedCollection') &&\r\n\t\t\t\t\t<p>Collection is now {message.isPrivate}</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'addToCollection') &&\r\n\t\t\t\t\t<p>Post added to {message.groupName}</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'removedFromCollection') &&\r\n\t\t\t\t\t<p>Post removed from {message.groupName}</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'removedAllFromCollection') &&\r\n\t\t\t\t\t<p>All posts removed {message.groupName}</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'confirmation' && message.message == 'tagDelete') &&\r\n\t\t\t\t\t<p>You've removed {message.groupName} from your tags</p>\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{(message.type == 'confirmation' && message.label == 'profilePhoto') &&\r\n\t\t\t\t\t<p>{message.message}</p>\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{(message.type == 'confirmation' && message.label == 'usernameUpdated') &&\r\n\t\t\t\t\t<p>{message.message}</p>\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{(message.type == 'confirmation' && message.label == 'passwordUpdated') &&\r\n\t\t\t\t\t<p>{message.message}</p>\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{(message.type == 'confirmation' && message.label == 'bioUpdated') &&\r\n\t\t\t\t\t<p>{message.message}</p>\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{(message.type == 'confirmation' && message.label == 'privacyUpdated') &&\r\n\t\t\t\t\t<p>{message.message}</p>\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{(message.type == 'confirmation' && message.label == 'usersPinned') &&\r\n\t\t\t\t\t<p>{message.message}</p>\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{message.type == 'error' &&\r\n\t\t\t\t\t<p>{message.message}</p>\r\n\t\t\t\t}\r\n\t\t\t\t{message.type == 'simpleNotif' &&\r\n\t\t\t\t\t<p>{message.message}</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.type == 'response' && message.message == 'alreadyExists') &&\r\n\t\t\t\t\t<p>This {message.groupType} already exists. Would you like to join?</p>\r\n\t\t\t\t}\r\n\t\t\t\t{(message.action == 'updateNotifs' && message.message) &&\r\n\t\t\t\t\t<p>{message.message}</p>\r\n\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t{/*<p>This is some demo text</p>*/}\r\n\r\n\t\t\t\t{isActive.type == 3 &&\r\n\t\t\t\t\t<ul id=\"options\">\r\n\t\t\t\t\t\t<li><button className=\"buttonDefault\" onClick={()=> {setActive({type: null, state: false})}}>Close</button></li>\r\n\t\t\t\t\t\t<li><button className=\"buttonDefault\" onClick={()=> {\r\n\r\n\t\t\t\t\t\t\tif(message.message == 'connectionRequestRecieved') {\r\n\t\t\t\t\t\t\t\tinteract('accept', message)\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if (message.message == 'subscriptionRequestRecieved') {\r\n\t\t\t\t\t\t\t\tinteract('subscriptionAccepted', message.data)\r\n\r\n\t\t\t\t\t\t\t\t// type: 'request',\r\n\t\t\t\t\t\t\t\t// senderID: userID,\r\n\t\t\t\t\t\t\t\t// senderUsername: username,\r\n\t\t\t\t\t\t\t\t// recipients: [notif.sender],\r\n\t\t\t\t\t\t\t\t// recipientUsername: notif.senderUsername,\r\n\t\t\t\t\t\t\t\t// message: 'subscriptionAccepted'\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}}>Accept</button></li> \r\n\t\t\t\t\t\t<li><button className=\"buttonDefault\" onClick={()=> {interact('ignore')}}>Ignore</button></li>\r\n\t\t\t\t\t\t{/*setSocketMessage for connection request acceptace or ignore: users ID will be saved in state*/}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t}\r\n\t\t\t\t{isActive.type == 2 &&\r\n\t\t\t\t\t<ul id=\"options\">\r\n\t\t\t\t\t\t<li><button className=\"buttonDefault\" onClick={()=> {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetActive({type: null, state: false});\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(accessID.notifID) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinteract('markRead');\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}>Close</button></li>\r\n\t\t\t\t\t\t<li><button className=\"buttonDefault\" onClick={()=> {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetActive({type: null, state: false});\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(accessID.postURL) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinteract('viewPost');\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(accessID.postID)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse if(message.message == 'alreadyExists') {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinteract('joinGroup');\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}>Interact</button></li> \r\n\t\t\t\t\t\t{/*has button who's function changes based on \r\n\t\t\t\t\t\t\tmessage.buttonText to contain varying wording\r\n\t\t\t\t\t\t*/}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t}\r\n\t\t\t\t{isActive.type == 22 && //for removing posts(?)\r\n\t\t\t\t\t<ul id=\"options\">\r\n\t\t\t\t\t\t<li><button className=\"buttonDefault\" onClick={()=> {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetActive({type: null, state: false});\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}>Cancel</button></li>\r\n\t\t\t\t\t\t<li><button className=\"buttonDefault\" onClick={()=> {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetActive({type: null, state: false});\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(accessID.remove && socketMessage.message == 'confirm_deletePost') {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinteract('remove');\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse if(accessID.remove && socketMessage.message == 'confirm_deleteComment') {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinteract('deleteComment');\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}>Delete</button></li> \r\n\t\t\t\t\t\t{/*has button who's function changes based on */}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t}\r\n\t\t\t\t{isActive.type == 1 &&\r\n\t\t\t\t\t<ul id=\"options\">\r\n\t\t\t\t\t\t<li><button className=\"buttonDefault\" onClick={()=> {setActive({type: null, state: false})}}>Close</button></li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t}\r\n\t\t\t</div>\t\r\n\t\t)\t\r\n\t}\r\n\t// console.log(accessID)\r\n\t// console.log(socketMessage);\r\n\t\r\n\treturn (\r\n\t\treturnPopUpType(socketMessage)\r\n\t)\r\n}\r\n\r\n/***\r\n * Format for socketMessage object\r\n * \r\n * type: confirmation, request, comment, tagging\r\n * sender:\r\n * recipients:\r\n * message: \r\n */\r\n\r\n/**\r\n * For error alerts:\r\n * setSocketMessage({\r\n \ttype: 'error',\r\n \tmessage: 'exactly what needs to be communicated to user'\r\n * })\r\n */\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}