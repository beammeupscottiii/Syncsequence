{"ast":null,"code":"/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {'point' | 'line'} TextPlacement\n * Default text placement is `'point'`. Note that\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\n */\n\n/**\n * @typedef {'left' | 'center' | 'right'} TextJustify\n */\n\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\n\nconst DEFAULT_FILL_COLOR = '#333';\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS `font` value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {TextPlacement} [placement='point'] Text placement.\n * @property {number} [repeat] Repeat interval. When set, the text will be repeated at this interval, which specifies\n * the distance between two text anchors in pixels. Only available when `placement` is set to `'line'`. Overrides 'textAlign'.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for `placement: 'line'` or the immediate rendering API.\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {TextJustify} [justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\n * `'hanging'`, `'ideographic'`.\n * @property {import(\"./Fill.js\").default|null} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333). Specify `null` for no fill.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n * @property {import('../style/Style.js').DeclutterMode} [declutterMode] Declutter mode: `declutter`, `obstacle`, `none`\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\n\nclass Text {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.font_ = options.font;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.rotation_ = options.rotation;\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n\n    this.rotateWithView_ = options.rotateWithView;\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */\n\n    this.scale_ = options.scale;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n    /**\n     * @private\n     * @type {string|Array<string>|undefined}\n     */\n\n    this.text_ = options.text;\n    /**\n     * @private\n     * @type {CanvasTextAlign|undefined}\n     */\n\n    this.textAlign_ = options.textAlign;\n    /**\n     * @private\n     * @type {TextJustify|undefined}\n     */\n\n    this.justify_ = options.justify;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.repeat_ = options.repeat;\n    /**\n     * @private\n     * @type {CanvasTextBaseline|undefined}\n     */\n\n    this.textBaseline_ = options.textBaseline;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default|null}\n     */\n\n    this.fill_ = options.fill !== undefined ? options.fill : new Fill({\n      color: DEFAULT_FILL_COLOR\n    });\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n    /**\n     * @private\n     * @type {TextPlacement}\n     */\n\n    this.placement_ = options.placement !== undefined ? options.placement : 'point';\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.overflow_ = !!options.overflow;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default|null}\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default|null}\n     */\n\n    this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default|null}\n     */\n\n    this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n\n    this.padding_ = options.padding === undefined ? null : options.padding;\n    /**\n     * @private\n     * @type {import('../style/Style.js').DeclutterMode}\n     */\n\n    this.declutterMode_ = options.declutterMode;\n  }\n  /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */\n\n\n  clone() {\n    const scale = this.getScale();\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      repeat: this.getRepeat(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      justify: this.getJustify(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n      backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,\n      padding: this.getPadding() || undefined,\n      declutterMode: this.getDeclutterMode()\n    });\n  }\n  /**\n   * Get the `overflow` configuration.\n   * @return {boolean} Let text overflow the length of the path they follow.\n   * @api\n   */\n\n\n  getOverflow() {\n    return this.overflow_;\n  }\n  /**\n   * Get the font name.\n   * @return {string|undefined} Font.\n   * @api\n   */\n\n\n  getFont() {\n    return this.font_;\n  }\n  /**\n   * Get the maximum angle between adjacent characters.\n   * @return {number} Angle in radians.\n   * @api\n   */\n\n\n  getMaxAngle() {\n    return this.maxAngle_;\n  }\n  /**\n   * Get the label placement.\n   * @return {TextPlacement} Text placement.\n   * @api\n   */\n\n\n  getPlacement() {\n    return this.placement_;\n  }\n  /**\n   * Get the repeat interval of the text.\n   * @return {number|undefined} Repeat interval in pixels.\n   * @api\n   */\n\n\n  getRepeat() {\n    return this.repeat_;\n  }\n  /**\n   * Get the x-offset for the text.\n   * @return {number} Horizontal text offset.\n   * @api\n   */\n\n\n  getOffsetX() {\n    return this.offsetX_;\n  }\n  /**\n   * Get the y-offset for the text.\n   * @return {number} Vertical text offset.\n   * @api\n   */\n\n\n  getOffsetY() {\n    return this.offsetY_;\n  }\n  /**\n   * Get the fill style for the text.\n   * @return {import(\"./Fill.js\").default|null} Fill style.\n   * @api\n   */\n\n\n  getFill() {\n    return this.fill_;\n  }\n  /**\n   * Determine whether the text rotates with the map.\n   * @return {boolean|undefined} Rotate with map.\n   * @api\n   */\n\n\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n  /**\n   * Get the text rotation.\n   * @return {number|undefined} Rotation.\n   * @api\n   */\n\n\n  getRotation() {\n    return this.rotation_;\n  }\n  /**\n   * Get the text scale.\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\n   * @api\n   */\n\n\n  getScale() {\n    return this.scale_;\n  }\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n\n\n  getScaleArray() {\n    return this.scaleArray_;\n  }\n  /**\n   * Get the stroke style for the text.\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\n   * @api\n   */\n\n\n  getStroke() {\n    return this.stroke_;\n  }\n  /**\n   * Get the text to be rendered.\n   * @return {string|Array<string>|undefined} Text.\n   * @api\n   */\n\n\n  getText() {\n    return this.text_;\n  }\n  /**\n   * Get the text alignment.\n   * @return {CanvasTextAlign|undefined} Text align.\n   * @api\n   */\n\n\n  getTextAlign() {\n    return this.textAlign_;\n  }\n  /**\n   * Get the justification.\n   * @return {TextJustify|undefined} Justification.\n   * @api\n   */\n\n\n  getJustify() {\n    return this.justify_;\n  }\n  /**\n   * Get the text baseline.\n   * @return {CanvasTextBaseline|undefined} Text baseline.\n   * @api\n   */\n\n\n  getTextBaseline() {\n    return this.textBaseline_;\n  }\n  /**\n   * Get the background fill style for the text.\n   * @return {import(\"./Fill.js\").default|null} Fill style.\n   * @api\n   */\n\n\n  getBackgroundFill() {\n    return this.backgroundFill_;\n  }\n  /**\n   * Get the background stroke style for the text.\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\n   * @api\n   */\n\n\n  getBackgroundStroke() {\n    return this.backgroundStroke_;\n  }\n  /**\n   * Get the padding for the text.\n   * @return {Array<number>|null} Padding.\n   * @api\n   */\n\n\n  getPadding() {\n    return this.padding_;\n  }\n  /**\n   * Get the declutter mode of the shape\n   * @return {import(\"./Style.js\").DeclutterMode} Shape's declutter mode\n   * @api\n   */\n\n\n  getDeclutterMode() {\n    return this.declutterMode_;\n  }\n  /**\n   * Set the `overflow` property.\n   *\n   * @param {boolean} overflow Let text overflow the path that it follows.\n   * @api\n   */\n\n\n  setOverflow(overflow) {\n    this.overflow_ = overflow;\n  }\n  /**\n   * Set the font.\n   *\n   * @param {string|undefined} font Font.\n   * @api\n   */\n\n\n  setFont(font) {\n    this.font_ = font;\n  }\n  /**\n   * Set the maximum angle between adjacent characters.\n   *\n   * @param {number} maxAngle Angle in radians.\n   * @api\n   */\n\n\n  setMaxAngle(maxAngle) {\n    this.maxAngle_ = maxAngle;\n  }\n  /**\n   * Set the x offset.\n   *\n   * @param {number} offsetX Horizontal text offset.\n   * @api\n   */\n\n\n  setOffsetX(offsetX) {\n    this.offsetX_ = offsetX;\n  }\n  /**\n   * Set the y offset.\n   *\n   * @param {number} offsetY Vertical text offset.\n   * @api\n   */\n\n\n  setOffsetY(offsetY) {\n    this.offsetY_ = offsetY;\n  }\n  /**\n   * Set the text placement.\n   *\n   * @param {TextPlacement} placement Placement.\n   * @api\n   */\n\n\n  setPlacement(placement) {\n    this.placement_ = placement;\n  }\n  /**\n   * Set the repeat interval of the text.\n   * @param {number|undefined} [repeat] Repeat interval in pixels.\n   * @api\n   */\n\n\n  setRepeat(repeat) {\n    this.repeat_ = repeat;\n  }\n  /**\n   * Set whether to rotate the text with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n\n\n  setRotateWithView(rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  }\n  /**\n   * Set the fill.\n   *\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\n   * @api\n   */\n\n\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n  /**\n   * Set the rotation.\n   *\n   * @param {number|undefined} rotation Rotation.\n   * @api\n   */\n\n\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n   * @api\n   */\n\n\n  setScale(scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n  }\n  /**\n   * Set the stroke.\n   *\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\n   * @api\n   */\n\n\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n  /**\n   * Set the text.\n   *\n   * @param {string|Array<string>|undefined} text Text.\n   * @api\n   */\n\n\n  setText(text) {\n    this.text_ = text;\n  }\n  /**\n   * Set the text alignment.\n   *\n   * @param {CanvasTextAlign|undefined} textAlign Text align.\n   * @api\n   */\n\n\n  setTextAlign(textAlign) {\n    this.textAlign_ = textAlign;\n  }\n  /**\n   * Set the justification.\n   *\n   * @param {TextJustify|undefined} justify Justification.\n   * @api\n   */\n\n\n  setJustify(justify) {\n    this.justify_ = justify;\n  }\n  /**\n   * Set the text baseline.\n   *\n   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\n   * @api\n   */\n\n\n  setTextBaseline(textBaseline) {\n    this.textBaseline_ = textBaseline;\n  }\n  /**\n   * Set the background fill.\n   *\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\n   * @api\n   */\n\n\n  setBackgroundFill(fill) {\n    this.backgroundFill_ = fill;\n  }\n  /**\n   * Set the background stroke.\n   *\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\n   * @api\n   */\n\n\n  setBackgroundStroke(stroke) {\n    this.backgroundStroke_ = stroke;\n  }\n  /**\n   * Set the padding (`[top, right, bottom, left]`).\n   *\n   * @param {Array<number>|null} padding Padding.\n   * @api\n   */\n\n\n  setPadding(padding) {\n    this.padding_ = padding;\n  }\n\n}\n\nexport default Text;","map":{"version":3,"names":["Fill","toSize","DEFAULT_FILL_COLOR","Text","constructor","options","font_","font","rotation_","rotation","rotateWithView_","rotateWithView","scale_","scale","scaleArray_","undefined","text_","text","textAlign_","textAlign","justify_","justify","repeat_","repeat","textBaseline_","textBaseline","fill_","fill","color","maxAngle_","maxAngle","Math","PI","placement_","placement","overflow_","overflow","stroke_","stroke","offsetX_","offsetX","offsetY_","offsetY","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","padding_","padding","declutterMode_","declutterMode","clone","getScale","getFont","getPlacement","getRepeat","getMaxAngle","getOverflow","getRotation","getRotateWithView","Array","isArray","slice","getText","getTextAlign","getJustify","getTextBaseline","getFill","getStroke","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding","getDeclutterMode","getScaleArray","setOverflow","setFont","setMaxAngle","setOffsetX","setOffsetY","setPlacement","setRepeat","setRotateWithView","setFill","setRotation","setScale","setStroke","setText","setTextAlign","setJustify","setTextBaseline","setBackgroundFill","setBackgroundStroke","setPadding"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/style/Text.js"],"sourcesContent":["/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {'point' | 'line'} TextPlacement\n * Default text placement is `'point'`. Note that\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\n */\n\n/**\n * @typedef {'left' | 'center' | 'right'} TextJustify\n */\n\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nconst DEFAULT_FILL_COLOR = '#333';\n\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS `font` value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {TextPlacement} [placement='point'] Text placement.\n * @property {number} [repeat] Repeat interval. When set, the text will be repeated at this interval, which specifies\n * the distance between two text anchors in pixels. Only available when `placement` is set to `'line'`. Overrides 'textAlign'.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for `placement: 'line'` or the immediate rendering API.\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {TextJustify} [justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\n * `'hanging'`, `'ideographic'`.\n * @property {import(\"./Fill.js\").default|null} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333). Specify `null` for no fill.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n * @property {import('../style/Style.js').DeclutterMode} [declutterMode] Declutter mode: `declutter`, `obstacle`, `none`\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nclass Text {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.font_ = options.font;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n\n    /**\n     * @private\n     * @type {string|Array<string>|undefined}\n     */\n    this.text_ = options.text;\n\n    /**\n     * @private\n     * @type {CanvasTextAlign|undefined}\n     */\n    this.textAlign_ = options.textAlign;\n\n    /**\n     * @private\n     * @type {TextJustify|undefined}\n     */\n    this.justify_ = options.justify;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.repeat_ = options.repeat;\n\n    /**\n     * @private\n     * @type {CanvasTextBaseline|undefined}\n     */\n    this.textBaseline_ = options.textBaseline;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default|null}\n     */\n    this.fill_ =\n      options.fill !== undefined\n        ? options.fill\n        : new Fill({color: DEFAULT_FILL_COLOR});\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxAngle_ =\n      options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n\n    /**\n     * @private\n     * @type {TextPlacement}\n     */\n    this.placement_ =\n      options.placement !== undefined ? options.placement : 'point';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overflow_ = !!options.overflow;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default|null}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default|null}\n     */\n    this.backgroundFill_ = options.backgroundFill\n      ? options.backgroundFill\n      : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default|null}\n     */\n    this.backgroundStroke_ = options.backgroundStroke\n      ? options.backgroundStroke\n      : null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.padding_ = options.padding === undefined ? null : options.padding;\n\n    /**\n     * @private\n     * @type {import('../style/Style.js').DeclutterMode}\n     */\n    this.declutterMode_ = options.declutterMode;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      repeat: this.getRepeat(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      justify: this.getJustify(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill()\n        ? this.getBackgroundFill().clone()\n        : undefined,\n      backgroundStroke: this.getBackgroundStroke()\n        ? this.getBackgroundStroke().clone()\n        : undefined,\n      padding: this.getPadding() || undefined,\n      declutterMode: this.getDeclutterMode(),\n    });\n  }\n\n  /**\n   * Get the `overflow` configuration.\n   * @return {boolean} Let text overflow the length of the path they follow.\n   * @api\n   */\n  getOverflow() {\n    return this.overflow_;\n  }\n\n  /**\n   * Get the font name.\n   * @return {string|undefined} Font.\n   * @api\n   */\n  getFont() {\n    return this.font_;\n  }\n\n  /**\n   * Get the maximum angle between adjacent characters.\n   * @return {number} Angle in radians.\n   * @api\n   */\n  getMaxAngle() {\n    return this.maxAngle_;\n  }\n\n  /**\n   * Get the label placement.\n   * @return {TextPlacement} Text placement.\n   * @api\n   */\n  getPlacement() {\n    return this.placement_;\n  }\n\n  /**\n   * Get the repeat interval of the text.\n   * @return {number|undefined} Repeat interval in pixels.\n   * @api\n   */\n  getRepeat() {\n    return this.repeat_;\n  }\n\n  /**\n   * Get the x-offset for the text.\n   * @return {number} Horizontal text offset.\n   * @api\n   */\n  getOffsetX() {\n    return this.offsetX_;\n  }\n\n  /**\n   * Get the y-offset for the text.\n   * @return {number} Vertical text offset.\n   * @api\n   */\n  getOffsetY() {\n    return this.offsetY_;\n  }\n\n  /**\n   * Get the fill style for the text.\n   * @return {import(\"./Fill.js\").default|null} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Determine whether the text rotates with the map.\n   * @return {boolean|undefined} Rotate with map.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Get the text rotation.\n   * @return {number|undefined} Rotation.\n   * @api\n   */\n  getRotation() {\n    return this.rotation_;\n  }\n\n  /**\n   * Get the text scale.\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\n   * @api\n   */\n  getScale() {\n    return this.scale_;\n  }\n\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  getScaleArray() {\n    return this.scaleArray_;\n  }\n\n  /**\n   * Get the stroke style for the text.\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Get the text to be rendered.\n   * @return {string|Array<string>|undefined} Text.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Get the text alignment.\n   * @return {CanvasTextAlign|undefined} Text align.\n   * @api\n   */\n  getTextAlign() {\n    return this.textAlign_;\n  }\n\n  /**\n   * Get the justification.\n   * @return {TextJustify|undefined} Justification.\n   * @api\n   */\n  getJustify() {\n    return this.justify_;\n  }\n\n  /**\n   * Get the text baseline.\n   * @return {CanvasTextBaseline|undefined} Text baseline.\n   * @api\n   */\n  getTextBaseline() {\n    return this.textBaseline_;\n  }\n\n  /**\n   * Get the background fill style for the text.\n   * @return {import(\"./Fill.js\").default|null} Fill style.\n   * @api\n   */\n  getBackgroundFill() {\n    return this.backgroundFill_;\n  }\n\n  /**\n   * Get the background stroke style for the text.\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\n   * @api\n   */\n  getBackgroundStroke() {\n    return this.backgroundStroke_;\n  }\n\n  /**\n   * Get the padding for the text.\n   * @return {Array<number>|null} Padding.\n   * @api\n   */\n  getPadding() {\n    return this.padding_;\n  }\n\n  /**\n   * Get the declutter mode of the shape\n   * @return {import(\"./Style.js\").DeclutterMode} Shape's declutter mode\n   * @api\n   */\n  getDeclutterMode() {\n    return this.declutterMode_;\n  }\n\n  /**\n   * Set the `overflow` property.\n   *\n   * @param {boolean} overflow Let text overflow the path that it follows.\n   * @api\n   */\n  setOverflow(overflow) {\n    this.overflow_ = overflow;\n  }\n\n  /**\n   * Set the font.\n   *\n   * @param {string|undefined} font Font.\n   * @api\n   */\n  setFont(font) {\n    this.font_ = font;\n  }\n\n  /**\n   * Set the maximum angle between adjacent characters.\n   *\n   * @param {number} maxAngle Angle in radians.\n   * @api\n   */\n  setMaxAngle(maxAngle) {\n    this.maxAngle_ = maxAngle;\n  }\n\n  /**\n   * Set the x offset.\n   *\n   * @param {number} offsetX Horizontal text offset.\n   * @api\n   */\n  setOffsetX(offsetX) {\n    this.offsetX_ = offsetX;\n  }\n\n  /**\n   * Set the y offset.\n   *\n   * @param {number} offsetY Vertical text offset.\n   * @api\n   */\n  setOffsetY(offsetY) {\n    this.offsetY_ = offsetY;\n  }\n\n  /**\n   * Set the text placement.\n   *\n   * @param {TextPlacement} placement Placement.\n   * @api\n   */\n  setPlacement(placement) {\n    this.placement_ = placement;\n  }\n\n  /**\n   * Set the repeat interval of the text.\n   * @param {number|undefined} [repeat] Repeat interval in pixels.\n   * @api\n   */\n  setRepeat(repeat) {\n    this.repeat_ = repeat;\n  }\n\n  /**\n   * Set whether to rotate the text with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  }\n\n  /**\n   * Set the fill.\n   *\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Set the rotation.\n   *\n   * @param {number|undefined} rotation Rotation.\n   * @api\n   */\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n  }\n\n  /**\n   * Set the stroke.\n   *\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Set the text.\n   *\n   * @param {string|Array<string>|undefined} text Text.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Set the text alignment.\n   *\n   * @param {CanvasTextAlign|undefined} textAlign Text align.\n   * @api\n   */\n  setTextAlign(textAlign) {\n    this.textAlign_ = textAlign;\n  }\n\n  /**\n   * Set the justification.\n   *\n   * @param {TextJustify|undefined} justify Justification.\n   * @api\n   */\n  setJustify(justify) {\n    this.justify_ = justify;\n  }\n\n  /**\n   * Set the text baseline.\n   *\n   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\n   * @api\n   */\n  setTextBaseline(textBaseline) {\n    this.textBaseline_ = textBaseline;\n  }\n\n  /**\n   * Set the background fill.\n   *\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\n   * @api\n   */\n  setBackgroundFill(fill) {\n    this.backgroundFill_ = fill;\n  }\n\n  /**\n   * Set the background stroke.\n   *\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\n   * @api\n   */\n  setBackgroundStroke(stroke) {\n    this.backgroundStroke_ = stroke;\n  }\n\n  /**\n   * Set the padding (`[top, right, bottom, left]`).\n   *\n   * @param {Array<number>|null} padding Padding.\n   * @api\n   */\n  setPadding(padding) {\n    this.padding_ = padding;\n  }\n}\n\nexport default Text;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAAQC,MAAR,QAAqB,YAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAG,MAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,IAAN,CAAW;EACT;AACF;AACA;EACEC,WAAW,CAACC,OAAD,EAAU;IACnBA,OAAO,GAAGA,OAAO,IAAI,EAArB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,KAAL,GAAaD,OAAO,CAACE,IAArB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,SAAL,GAAiBH,OAAO,CAACI,QAAzB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,eAAL,GAAuBL,OAAO,CAACM,cAA/B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,MAAL,GAAcP,OAAO,CAACQ,KAAtB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,WAAL,GAAmBb,MAAM,CAACI,OAAO,CAACQ,KAAR,KAAkBE,SAAlB,GAA8BV,OAAO,CAACQ,KAAtC,GAA8C,CAA/C,CAAzB;IAEA;AACJ;AACA;AACA;;IACI,KAAKG,KAAL,GAAaX,OAAO,CAACY,IAArB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,UAAL,GAAkBb,OAAO,CAACc,SAA1B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,QAAL,GAAgBf,OAAO,CAACgB,OAAxB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAejB,OAAO,CAACkB,MAAvB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,aAAL,GAAqBnB,OAAO,CAACoB,YAA7B;IAEA;AACJ;AACA;AA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;;;EACEkD,WAAW,GAAG;IACZ,OAAO,KAAK3B,SAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEyB,YAAY,GAAG;IACb,OAAO,KAAKrB,UAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEsB,SAAS,GAAG;IACV,OAAO,KAAKjC,OAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE+C,UAAU,GAAG;IACX,OAAO,KAAK9B,QAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE+B,UAAU,GAAG;IACX,OAAO,KAAK7B,QAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE0B,OAAO,GAAG;IACR,OAAO,KAAKzC,KAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEiC,iBAAiB,GAAG;IAClB,OAAO,KAAKjD,eAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEgD,WAAW,GAAG;IACZ,OAAO,KAAKlD,SAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE4C,QAAQ,GAAG;IACT,OAAO,KAAKxC,MAAZ;EACD;EAED;AACF;AACA;AACA;;;EACE+D,aAAa,GAAG;IACd,OAAO,KAAK7D,WAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEsD,SAAS,GAAG;IACV,OAAO,KAAK/B,OAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE0B,OAAO,GAAG;IACR,OAAO,KAAK/C,KAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEgD,YAAY,GAAG;IACb,OAAO,KAAK9C,UAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE+C,UAAU,GAAG;IACX,OAAO,KAAK7C,QAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE8C,eAAe,GAAG;IAChB,OAAO,KAAK1C,aAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE+C,iBAAiB,GAAG;IAClB,OAAO,KAAK5B,eAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE6B,mBAAmB,GAAG;IACpB,OAAO,KAAK3B,iBAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE4B,UAAU,GAAG;IACX,OAAO,KAAK1B,QAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE2B,gBAAgB,GAAG;IACjB,OAAO,KAAKzB,cAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE2B,WAAW,CAACxC,QAAD,EAAW;IACpB,KAAKD,SAAL,GAAiBC,QAAjB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEyC,OAAO,CAACtE,IAAD,EAAO;IACZ,KAAKD,KAAL,GAAaC,IAAb;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEuE,WAAW,CAAChD,QAAD,EAAW;IACpB,KAAKD,SAAL,GAAiBC,QAAjB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEiD,UAAU,CAACvC,OAAD,EAAU;IAClB,KAAKD,QAAL,GAAgBC,OAAhB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEwC,UAAU,CAACtC,OAAD,EAAU;IAClB,KAAKD,QAAL,GAAgBC,OAAhB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEuC,YAAY,CAAC/C,SAAD,EAAY;IACtB,KAAKD,UAAL,GAAkBC,SAAlB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEgD,SAAS,CAAC3D,MAAD,EAAS;IAChB,KAAKD,OAAL,GAAeC,MAAf;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE4D,iBAAiB,CAACxE,cAAD,EAAiB;IAChC,KAAKD,eAAL,GAAuBC,cAAvB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEyE,OAAO,CAACzD,IAAD,EAAO;IACZ,KAAKD,KAAL,GAAaC,IAAb;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE0D,WAAW,CAAC5E,QAAD,EAAW;IACpB,KAAKD,SAAL,GAAiBC,QAAjB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE6E,QAAQ,CAACzE,KAAD,EAAQ;IACd,KAAKD,MAAL,GAAcC,KAAd;IACA,KAAKC,WAAL,GAAmBb,MAAM,CAACY,KAAK,KAAKE,SAAV,GAAsBF,KAAtB,GAA8B,CAA/B,CAAzB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE0E,SAAS,CAACjD,MAAD,EAAS;IAChB,KAAKD,OAAL,GAAeC,MAAf;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEkD,OAAO,CAACvE,IAAD,EAAO;IACZ,KAAKD,KAAL,GAAaC,IAAb;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEwE,YAAY,CAACtE,SAAD,EAAY;IACtB,KAAKD,UAAL,GAAkBC,SAAlB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEuE,UAAU,CAACrE,OAAD,EAAU;IAClB,KAAKD,QAAL,GAAgBC,OAAhB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEsE,eAAe,CAAClE,YAAD,EAAe;IAC5B,KAAKD,aAAL,GAAqBC,YAArB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEmE,iBAAiB,CAACjE,IAAD,EAAO;IACtB,KAAKgB,eAAL,GAAuBhB,IAAvB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEkE,mBAAmB,CAACvD,MAAD,EAAS;IAC1B,KAAKO,iBAAL,GAAyBP,MAAzB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEwD,UAAU,CAAC9C,OAAD,EAAU;IAClB,KAAKD,QAAL,GAAgBC,OAAhB;EACD;;AA1iBQ;;AA6iBX,eAAe7C,IAAf"},"metadata":{},"sourceType":"module"}