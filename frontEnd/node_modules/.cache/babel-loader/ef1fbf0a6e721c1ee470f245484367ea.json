{"ast":null,"code":"/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { assert } from '../asserts.js';\nimport { get as getIconImage } from './IconImage.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {import(\"./Style.js\").DeclutterMode} [declutterMode] Declutter mode.\n */\n\n/**\n * @param {number} width The width.\n * @param {number} height The height.\n * @param {number|undefined} wantedWidth The wanted width.\n * @param {number|undefined} wantedHeight The wanted height.\n * @return {number|Array<number>} The scale.\n */\n\nfunction calculateScale(width, height, wantedWidth, wantedHeight) {\n  if (wantedWidth !== undefined && wantedHeight !== undefined) {\n    return [wantedWidth / width, wantedHeight / height];\n  }\n\n  if (wantedWidth !== undefined) {\n    return wantedWidth / width;\n  }\n\n  if (wantedHeight !== undefined) {\n    return wantedHeight / height;\n  }\n\n  return 1;\n}\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\n\n\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n    /**\n     * @type {number}\n     */\n\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n    /**\n     * @type {number}\n     */\n\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n\n    const scale = options.scale !== undefined ? options.scale : 1;\n    /**\n     * @type {boolean}\n     */\n\n    const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode\n    });\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.normalizedAnchor_ = null;\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n\n    this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n\n    this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n\n    this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    const image = options.img !== undefined ? options.img : null;\n    let cacheKey = options.src;\n    assert(!(cacheKey !== undefined && image), '`image` and `src` cannot be provided at the same time');\n\n    if ((cacheKey === undefined || cacheKey.length === 0) && image) {\n      cacheKey =\n      /** @type {HTMLImageElement} */\n      image.src || getUid(image);\n    }\n\n    assert(cacheKey !== undefined && cacheKey.length > 0, 'A defined and non-empty `src` or `image` must be provided');\n    assert(!((options.width !== undefined || options.height !== undefined) && options.scale !== undefined), '`width` or `height` cannot be provided together with `scale`');\n    let imageState;\n\n    if (options.src !== undefined) {\n      imageState = ImageState.IDLE;\n    } else if (image !== undefined) {\n      if ('complete' in image) {\n        if (image.complete) {\n          imageState = image.src ? ImageState.LOADED : ImageState.IDLE;\n        } else {\n          imageState = ImageState.LOADING;\n        }\n      } else {\n        imageState = ImageState.LOADED;\n      }\n    }\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n\n\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n\n    this.iconImage_ = getIconImage(image,\n    /** @type {string} */\n    cacheKey, this.crossOrigin_, imageState, this.color_);\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n\n    this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.origin_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.size_ = options.size !== undefined ? options.size : null;\n    /**\n     * Calculate the scale if width or height were given.\n     */\n\n    if (options.width !== undefined || options.height !== undefined) {\n      let width, height;\n\n      if (options.size) {\n        [width, height] = options.size;\n      } else {\n        const image = this.getImage(1);\n\n        if (image.width && image.height) {\n          width = image.width;\n          height = image.height;\n        } else if (image instanceof HTMLImageElement) {\n          this.initialOptions_ = options;\n\n          const onload = () => {\n            this.unlistenImageChange(onload);\n\n            if (!this.initialOptions_) {\n              return;\n            }\n\n            const imageSize = this.iconImage_.getSize();\n            this.setScale(calculateScale(imageSize[0], imageSize[1], options.width, options.height));\n          };\n\n          this.listenImageChange(onload);\n          return;\n        }\n      }\n\n      if (width !== undefined) {\n        this.setScale(calculateScale(width, height, options.width, options.height));\n      }\n    }\n  }\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n\n\n  clone() {\n    let scale, width, height;\n\n    if (this.initialOptions_) {\n      width = this.initialOptions_.width;\n      height = this.initialOptions_.height;\n    } else {\n      scale = this.getScale();\n      scale = Array.isArray(scale) ? scale.slice() : scale;\n    }\n\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n      crossOrigin: this.crossOrigin_,\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      opacity: this.getOpacity(),\n      rotateWithView: this.getRotateWithView(),\n      rotation: this.getRotation(),\n      scale,\n      width,\n      height,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      src: this.getSrc(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode()\n    });\n  }\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n\n\n  getAnchor() {\n    let anchor = this.normalizedAnchor_;\n\n    if (!anchor) {\n      anchor = this.anchor_;\n      const size = this.getSize();\n\n      if (this.anchorXUnits_ == 'fraction' || this.anchorYUnits_ == 'fraction') {\n        if (!size) {\n          return null;\n        }\n\n        anchor = this.anchor_.slice();\n\n        if (this.anchorXUnits_ == 'fraction') {\n          anchor[0] *= size[0];\n        }\n\n        if (this.anchorYUnits_ == 'fraction') {\n          anchor[1] *= size[1];\n        }\n      }\n\n      if (this.anchorOrigin_ != 'top-left') {\n        if (!size) {\n          return null;\n        }\n\n        if (anchor === this.anchor_) {\n          anchor = this.anchor_.slice();\n        }\n\n        if (this.anchorOrigin_ == 'top-right' || this.anchorOrigin_ == 'bottom-right') {\n          anchor[0] = -anchor[0] + size[0];\n        }\n\n        if (this.anchorOrigin_ == 'bottom-left' || this.anchorOrigin_ == 'bottom-right') {\n          anchor[1] = -anchor[1] + size[1];\n        }\n      }\n\n      this.normalizedAnchor_ = anchor;\n    }\n\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray(); // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n\n    return [anchor[0] - displacement[0] / scale[0], anchor[1] + displacement[1] / scale[1]];\n  }\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n\n\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n\n\n  getColor() {\n    return this.color_;\n  }\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon\n   * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.\n   * @api\n   */\n\n\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n\n\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n\n\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n\n\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\n   */\n\n\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n\n\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n\n    let offset = this.offset_;\n\n    if (this.offsetOrigin_ != 'top-left') {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n\n      if (!size || !iconImageSize) {\n        return null;\n      }\n\n      offset = offset.slice();\n\n      if (this.offsetOrigin_ == 'top-right' || this.offsetOrigin_ == 'bottom-right') {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n\n      if (this.offsetOrigin_ == 'bottom-left' || this.offsetOrigin_ == 'bottom-right') {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n\n    this.origin_ = offset;\n    return this.origin_;\n  }\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n\n\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n\n\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n  /**\n   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon width (in pixels).\n   * @api\n   */\n\n\n  getWidth() {\n    const scale = this.getScaleArray();\n\n    if (this.size_) {\n      return this.size_[0] * scale[0];\n    }\n\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\n      return this.iconImage_.getSize()[0] * scale[0];\n    }\n\n    return undefined;\n  }\n  /**\n   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon height (in pixels).\n   * @api\n   */\n\n\n  getHeight() {\n    const scale = this.getScaleArray();\n\n    if (this.size_) {\n      return this.size_[1] * scale[1];\n    }\n\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\n      return this.iconImage_.getSize()[1] * scale[1];\n    }\n\n    return undefined;\n  }\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n\n\n  setScale(scale) {\n    delete this.initialOptions_;\n    super.setScale(scale);\n  }\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n\n\n  load() {\n    this.iconImage_.load();\n  }\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n\n  ready() {\n    return this.iconImage_.ready();\n  }\n\n}\n\nexport default Icon;","map":{"version":3,"names":["EventType","ImageState","ImageStyle","asArray","assert","get","getIconImage","getUid","calculateScale","width","height","wantedWidth","wantedHeight","undefined","Icon","constructor","options","opacity","rotation","scale","rotateWithView","displacement","declutterMode","anchor_","anchor","normalizedAnchor_","anchorOrigin_","anchorOrigin","anchorXUnits_","anchorXUnits","anchorYUnits_","anchorYUnits","crossOrigin_","crossOrigin","image","img","cacheKey","src","length","imageState","IDLE","complete","LOADED","LOADING","color_","color","iconImage_","offset_","offset","offsetOrigin_","offsetOrigin","origin_","size_","size","getImage","HTMLImageElement","initialOptions_","onload","unlistenImageChange","imageSize","getSize","setScale","listenImageChange","clone","getScale","Array","isArray","slice","getOpacity","getRotateWithView","getRotation","getSrc","getDisplacement","getDeclutterMode","getAnchor","getScaleArray","setAnchor","getColor","pixelRatio","getPixelRatio","getImageSize","getImageState","getHitDetectionImage","getOrigin","iconImageSize","getWidth","getHeight","listener","addEventListener","CHANGE","load","removeEventListener","ready"],"sources":["/home/jce/Web Dev Space/Syncsequence/frontEnd/node_modules/ol/style/Icon.js"],"sourcesContent":["/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {assert} from '../asserts.js';\nimport {get as getIconImage} from './IconImage.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {import(\"./Style.js\").DeclutterMode} [declutterMode] Declutter mode.\n */\n\n/**\n * @param {number} width The width.\n * @param {number} height The height.\n * @param {number|undefined} wantedWidth The wanted width.\n * @param {number|undefined} wantedHeight The wanted height.\n * @return {number|Array<number>} The scale.\n */\nfunction calculateScale(width, height, wantedWidth, wantedHeight) {\n  if (wantedWidth !== undefined && wantedHeight !== undefined) {\n    return [wantedWidth / width, wantedHeight / height];\n  }\n  if (wantedWidth !== undefined) {\n    return wantedWidth / width;\n  }\n  if (wantedHeight !== undefined) {\n    return wantedHeight / height;\n  }\n  return 1;\n}\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.anchorOrigin_ =\n      options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorXUnits_ =\n      options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorYUnits_ =\n      options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    const image = options.img !== undefined ? options.img : null;\n\n    let cacheKey = options.src;\n\n    assert(\n      !(cacheKey !== undefined && image),\n      '`image` and `src` cannot be provided at the same time',\n    );\n\n    if ((cacheKey === undefined || cacheKey.length === 0) && image) {\n      cacheKey = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n    }\n    assert(\n      cacheKey !== undefined && cacheKey.length > 0,\n      'A defined and non-empty `src` or `image` must be provided',\n    );\n\n    assert(\n      !(\n        (options.width !== undefined || options.height !== undefined) &&\n        options.scale !== undefined\n      ),\n      '`width` or `height` cannot be provided together with `scale`',\n    );\n\n    let imageState;\n    if (options.src !== undefined) {\n      imageState = ImageState.IDLE;\n    } else if (image !== undefined) {\n      if ('complete' in image) {\n        if (image.complete) {\n          imageState = image.src ? ImageState.LOADED : ImageState.IDLE;\n        } else {\n          imageState = ImageState.LOADING;\n        }\n      } else {\n        imageState = ImageState.LOADED;\n      }\n    }\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(\n      image,\n      /** @type {string} */ (cacheKey),\n      this.crossOrigin_,\n      imageState,\n      this.color_,\n    );\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.offsetOrigin_ =\n      options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n\n    /**\n     * Calculate the scale if width or height were given.\n     */\n    if (options.width !== undefined || options.height !== undefined) {\n      let width, height;\n      if (options.size) {\n        [width, height] = options.size;\n      } else {\n        const image = this.getImage(1);\n        if (image.width && image.height) {\n          width = image.width;\n          height = image.height;\n        } else if (image instanceof HTMLImageElement) {\n          this.initialOptions_ = options;\n          const onload = () => {\n            this.unlistenImageChange(onload);\n            if (!this.initialOptions_) {\n              return;\n            }\n            const imageSize = this.iconImage_.getSize();\n            this.setScale(\n              calculateScale(\n                imageSize[0],\n                imageSize[1],\n                options.width,\n                options.height,\n              ),\n            );\n          };\n          this.listenImageChange(onload);\n          return;\n        }\n      }\n      if (width !== undefined) {\n        this.setScale(\n          calculateScale(width, height, options.width, options.height),\n        );\n      }\n    }\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    let scale, width, height;\n    if (this.initialOptions_) {\n      width = this.initialOptions_.width;\n      height = this.initialOptions_.height;\n    } else {\n      scale = this.getScale();\n      scale = Array.isArray(scale) ? scale.slice() : scale;\n    }\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      color:\n        this.color_ && this.color_.slice\n          ? this.color_.slice()\n          : this.color_ || undefined,\n      crossOrigin: this.crossOrigin_,\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      opacity: this.getOpacity(),\n      rotateWithView: this.getRotateWithView(),\n      rotation: this.getRotation(),\n      scale,\n      width,\n      height,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      src: this.getSrc(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    let anchor = this.normalizedAnchor_;\n    if (!anchor) {\n      anchor = this.anchor_;\n      const size = this.getSize();\n      if (\n        this.anchorXUnits_ == 'fraction' ||\n        this.anchorYUnits_ == 'fraction'\n      ) {\n        if (!size) {\n          return null;\n        }\n        anchor = this.anchor_.slice();\n        if (this.anchorXUnits_ == 'fraction') {\n          anchor[0] *= size[0];\n        }\n        if (this.anchorYUnits_ == 'fraction') {\n          anchor[1] *= size[1];\n        }\n      }\n\n      if (this.anchorOrigin_ != 'top-left') {\n        if (!size) {\n          return null;\n        }\n        if (anchor === this.anchor_) {\n          anchor = this.anchor_.slice();\n        }\n        if (\n          this.anchorOrigin_ == 'top-right' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[0] = -anchor[0] + size[0];\n        }\n        if (\n          this.anchorOrigin_ == 'bottom-left' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[1] = -anchor[1] + size[1];\n        }\n      }\n      this.normalizedAnchor_ = anchor;\n    }\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [\n      anchor[0] - displacement[0] / scale[0],\n      anchor[1] + displacement[1] / scale[1],\n    ];\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon\n   * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\n   */\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n\n    if (this.offsetOrigin_ != 'top-left') {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (\n        this.offsetOrigin_ == 'top-right' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (\n        this.offsetOrigin_ == 'bottom-left' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon width (in pixels).\n   * @api\n   */\n  getWidth() {\n    const scale = this.getScaleArray();\n    if (this.size_) {\n      return this.size_[0] * scale[0];\n    }\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\n      return this.iconImage_.getSize()[0] * scale[0];\n    }\n    return undefined;\n  }\n\n  /**\n   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon height (in pixels).\n   * @api\n   */\n  getHeight() {\n    const scale = this.getScaleArray();\n    if (this.size_) {\n      return this.size_[1] * scale[1];\n    }\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\n      return this.iconImage_.getSize()[1] * scale[1];\n    }\n    return undefined;\n  }\n\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    delete this.initialOptions_;\n    super.setScale(scale);\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n\n  ready() {\n    return this.iconImage_.ready();\n  }\n}\n\nexport default Icon;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}